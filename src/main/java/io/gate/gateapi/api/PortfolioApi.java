/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;

import com.google.gson.reflect.TypeToken;


import io.gate.gateapi.models.PortfolioAccount;
import io.gate.gateapi.models.PortfolioBorrowable;
import io.gate.gateapi.models.PortfolioLoan;
import io.gate.gateapi.models.PortfolioLoanRecord;
import io.gate.gateapi.models.PortfolioMode;
import io.gate.gateapi.models.PortfolioTransferable;
import io.gate.gateapi.models.UniLoan;
import io.gate.gateapi.models.UniLoanInterestRecord;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PortfolioApi {
    private ApiClient localVarApiClient;

    public PortfolioApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortfolioApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call listPortfolioAccountsCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPortfolioAccountsValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioAccountsCall(currency, _callback);
        return localVarCall;
    }


    private ApiResponse<PortfolioAccount> listPortfolioAccountsWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioAccountsValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<PortfolioAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPortfolioAccountsAsync(String currency, final ApiCallback<PortfolioAccount> _callback) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioAccountsValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<PortfolioAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPortfolioAccountsRequest {
        private String currency;

        private APIlistPortfolioAccountsRequest() {
        }

        /**
         * Set currency
         * @param currency Retrieve data of the specified currency (optional)
         * @return APIlistPortfolioAccountsRequest
         */
        public APIlistPortfolioAccountsRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Build call for listPortfolioAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPortfolioAccountsCall(currency, _callback);
        }

        /**
         * Execute listPortfolioAccounts request
         * @return PortfolioAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public PortfolioAccount execute() throws ApiException {
            ApiResponse<PortfolioAccount> localVarResp = listPortfolioAccountsWithHttpInfo(currency);
            return localVarResp.getData();
        }

        /**
         * Execute listPortfolioAccounts request with HTTP info returned
         * @return ApiResponse&lt;PortfolioAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfolioAccount> executeWithHttpInfo() throws ApiException {
            return listPortfolioAccountsWithHttpInfo(currency);
        }

        /**
         * Execute listPortfolioAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfolioAccount> _callback) throws ApiException {
            return listPortfolioAccountsAsync(currency, _callback);
        }
    }

    /**
     * Get portfolio account information
     * The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
     * @return APIlistPortfolioAccountsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPortfolioAccountsRequest listPortfolioAccounts() {
        return new APIlistPortfolioAccountsRequest();
    }

    /**
     * Build call for listAccountPortfolioMode
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountPortfolioModeCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio/account_mode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountPortfolioModeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listAccountPortfolioModeCall(_callback);
        return localVarCall;
    }

    /**
     * Retrieve the account&#39;s portfolio mode
     * cross_margin - cross margin
     * @return Map&lt;String, Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Boolean> listAccountPortfolioMode() throws ApiException {
        ApiResponse<Map<String, Boolean>> localVarResp = listAccountPortfolioModeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve the account&#39;s portfolio mode
     * cross_margin - cross margin
     * @return ApiResponse&lt;Map&lt;String, Boolean&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Boolean>> listAccountPortfolioModeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAccountPortfolioModeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the account&#39;s portfolio mode (asynchronously)
     * cross_margin - cross margin
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountPortfolioModeAsync(final ApiCallback<Map<String, Boolean>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listAccountPortfolioModeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for setAccountPortfolioMode
     * @param portfolioMode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAccountPortfolioModeCall(PortfolioMode portfolioMode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = portfolioMode;

        // create path and map variables
        String localVarPath = "/portfolio/account_mode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAccountPortfolioModeValidateBeforeCall(PortfolioMode portfolioMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioMode' is set
        if (portfolioMode == null) {
            throw new ApiException("Missing the required parameter 'portfolioMode' when calling setAccountPortfolioMode(Async)");
        }

        okhttp3.Call localVarCall = setAccountPortfolioModeCall(portfolioMode, _callback);
        return localVarCall;
    }

    /**
     * Configure the account&#39;s portfolio mode.
     * 
     * @param portfolioMode  (required)
     * @return Map&lt;String, Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Boolean> setAccountPortfolioMode(PortfolioMode portfolioMode) throws ApiException {
        ApiResponse<Map<String, Boolean>> localVarResp = setAccountPortfolioModeWithHttpInfo(portfolioMode);
        return localVarResp.getData();
    }

    /**
     * Configure the account&#39;s portfolio mode.
     * 
     * @param portfolioMode  (required)
     * @return ApiResponse&lt;Map&lt;String, Boolean&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Boolean>> setAccountPortfolioModeWithHttpInfo(PortfolioMode portfolioMode) throws ApiException {
        okhttp3.Call localVarCall = setAccountPortfolioModeValidateBeforeCall(portfolioMode, null);
        Type localVarReturnType = new TypeToken<Map<String, Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Configure the account&#39;s portfolio mode. (asynchronously)
     * 
     * @param portfolioMode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAccountPortfolioModeAsync(PortfolioMode portfolioMode, final ApiCallback<Map<String, Boolean>> _callback) throws ApiException {
        okhttp3.Call localVarCall = setAccountPortfolioModeValidateBeforeCall(portfolioMode, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getPortfolioBorrowable
     * @param currency Retrieve data of the specified currency (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioBorrowableCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio/borrowable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioBorrowableValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getPortfolioBorrowable(Async)");
        }

        okhttp3.Call localVarCall = getPortfolioBorrowableCall(currency, _callback);
        return localVarCall;
    }

    /**
     * Retrieve the maximum borrowable amount for the account.
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @return PortfolioBorrowable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioBorrowable getPortfolioBorrowable(String currency) throws ApiException {
        ApiResponse<PortfolioBorrowable> localVarResp = getPortfolioBorrowableWithHttpInfo(currency);
        return localVarResp.getData();
    }

    /**
     * Retrieve the maximum borrowable amount for the account.
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @return ApiResponse&lt;PortfolioBorrowable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioBorrowable> getPortfolioBorrowableWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioBorrowableValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<PortfolioBorrowable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the maximum borrowable amount for the account. (asynchronously)
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioBorrowableAsync(String currency, final ApiCallback<PortfolioBorrowable> _callback) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioBorrowableValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<PortfolioBorrowable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getPortfolioTransferable
     * @param currency Retrieve data of the specified currency (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioTransferableCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio/transferable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioTransferableValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getPortfolioTransferable(Async)");
        }

        okhttp3.Call localVarCall = getPortfolioTransferableCall(currency, _callback);
        return localVarCall;
    }

    /**
     * Retrieve the maximum amount that can be transferred out from the account
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @return PortfolioTransferable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioTransferable getPortfolioTransferable(String currency) throws ApiException {
        ApiResponse<PortfolioTransferable> localVarResp = getPortfolioTransferableWithHttpInfo(currency);
        return localVarResp.getData();
    }

    /**
     * Retrieve the maximum amount that can be transferred out from the account
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @return ApiResponse&lt;PortfolioTransferable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioTransferable> getPortfolioTransferableWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioTransferableValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<PortfolioTransferable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the maximum amount that can be transferred out from the account (asynchronously)
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioTransferableAsync(String currency, final ApiCallback<PortfolioTransferable> _callback) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioTransferableValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<PortfolioTransferable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listPortfolioUniLoanInterestRecordsCall(String currency, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio/loans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPortfolioUniLoanInterestRecordsValidateBeforeCall(String currency, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioUniLoanInterestRecordsCall(currency, page, limit, _callback);
        return localVarCall;
    }


    private ApiResponse<List<UniLoan>> listPortfolioUniLoanInterestRecordsWithHttpInfo(String currency, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioUniLoanInterestRecordsValidateBeforeCall(currency, page, limit, null);
        Type localVarReturnType = new TypeToken<List<UniLoan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPortfolioUniLoanInterestRecordsAsync(String currency, Integer page, Integer limit, final ApiCallback<List<UniLoan>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioUniLoanInterestRecordsValidateBeforeCall(currency, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<UniLoan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPortfolioUniLoanInterestRecordsRequest {
        private String currency;
        private Integer page;
        private Integer limit;

        private APIlistPortfolioUniLoanInterestRecordsRequest() {
        }

        /**
         * Set currency
         * @param currency Retrieve data of the specified currency (optional)
         * @return APIlistPortfolioUniLoanInterestRecordsRequest
         */
        public APIlistPortfolioUniLoanInterestRecordsRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistPortfolioUniLoanInterestRecordsRequest
         */
        public APIlistPortfolioUniLoanInterestRecordsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)
         * @return APIlistPortfolioUniLoanInterestRecordsRequest
         */
        public APIlistPortfolioUniLoanInterestRecordsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for listPortfolioUniLoanInterestRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPortfolioUniLoanInterestRecordsCall(currency, page, limit, _callback);
        }

        /**
         * Execute listPortfolioUniLoanInterestRecords request
         * @return List&lt;UniLoan&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<UniLoan> execute() throws ApiException {
            ApiResponse<List<UniLoan>> localVarResp = listPortfolioUniLoanInterestRecordsWithHttpInfo(currency, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute listPortfolioUniLoanInterestRecords request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UniLoan&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UniLoan>> executeWithHttpInfo() throws ApiException {
            return listPortfolioUniLoanInterestRecordsWithHttpInfo(currency, page, limit);
        }

        /**
         * Execute listPortfolioUniLoanInterestRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UniLoan>> _callback) throws ApiException {
            return listPortfolioUniLoanInterestRecordsAsync(currency, page, limit, _callback);
        }
    }

    /**
     * List loans
     * 
     * @return APIlistPortfolioUniLoanInterestRecordsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPortfolioUniLoanInterestRecordsRequest listPortfolioUniLoanInterestRecords() {
        return new APIlistPortfolioUniLoanInterestRecordsRequest();
    }

    /**
     * Build call for createPortfolioLoan
     * @param portfolioLoan  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPortfolioLoanCall(PortfolioLoan portfolioLoan, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = portfolioLoan;

        // create path and map variables
        String localVarPath = "/portfolio/loans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPortfolioLoanValidateBeforeCall(PortfolioLoan portfolioLoan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioLoan' is set
        if (portfolioLoan == null) {
            throw new ApiException("Missing the required parameter 'portfolioLoan' when calling createPortfolioLoan(Async)");
        }

        okhttp3.Call localVarCall = createPortfolioLoanCall(portfolioLoan, _callback);
        return localVarCall;
    }

    /**
     * Borrow or repay
     * When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
     * @param portfolioLoan  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public void createPortfolioLoan(PortfolioLoan portfolioLoan) throws ApiException {
        createPortfolioLoanWithHttpInfo(portfolioLoan);
    }

    /**
     * Borrow or repay
     * When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
     * @param portfolioLoan  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createPortfolioLoanWithHttpInfo(PortfolioLoan portfolioLoan) throws ApiException {
        okhttp3.Call localVarCall = createPortfolioLoanValidateBeforeCall(portfolioLoan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Borrow or repay (asynchronously)
     * When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
     * @param portfolioLoan  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPortfolioLoanAsync(PortfolioLoan portfolioLoan, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = createPortfolioLoanValidateBeforeCall(portfolioLoan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call listPortfolioLoanRecordsCall(String type, String currency, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio/loan_records";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPortfolioLoanRecordsValidateBeforeCall(String type, String currency, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioLoanRecordsCall(type, currency, page, limit, _callback);
        return localVarCall;
    }


    private ApiResponse<List<PortfolioLoanRecord>> listPortfolioLoanRecordsWithHttpInfo(String type, String currency, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioLoanRecordsValidateBeforeCall(type, currency, page, limit, null);
        Type localVarReturnType = new TypeToken<List<PortfolioLoanRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPortfolioLoanRecordsAsync(String type, String currency, Integer page, Integer limit, final ApiCallback<List<PortfolioLoanRecord>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioLoanRecordsValidateBeforeCall(type, currency, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<PortfolioLoanRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPortfolioLoanRecordsRequest {
        private String type;
        private String currency;
        private Integer page;
        private Integer limit;

        private APIlistPortfolioLoanRecordsRequest() {
        }

        /**
         * Set type
         * @param type The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)
         * @return APIlistPortfolioLoanRecordsRequest
         */
        public APIlistPortfolioLoanRecordsRequest type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Set currency
         * @param currency Retrieve data of the specified currency (optional)
         * @return APIlistPortfolioLoanRecordsRequest
         */
        public APIlistPortfolioLoanRecordsRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistPortfolioLoanRecordsRequest
         */
        public APIlistPortfolioLoanRecordsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)
         * @return APIlistPortfolioLoanRecordsRequest
         */
        public APIlistPortfolioLoanRecordsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for listPortfolioLoanRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPortfolioLoanRecordsCall(type, currency, page, limit, _callback);
        }

        /**
         * Execute listPortfolioLoanRecords request
         * @return List&lt;PortfolioLoanRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<PortfolioLoanRecord> execute() throws ApiException {
            ApiResponse<List<PortfolioLoanRecord>> localVarResp = listPortfolioLoanRecordsWithHttpInfo(type, currency, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute listPortfolioLoanRecords request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PortfolioLoanRecord&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PortfolioLoanRecord>> executeWithHttpInfo() throws ApiException {
            return listPortfolioLoanRecordsWithHttpInfo(type, currency, page, limit);
        }

        /**
         * Execute listPortfolioLoanRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PortfolioLoanRecord>> _callback) throws ApiException {
            return listPortfolioLoanRecordsAsync(type, currency, page, limit, _callback);
        }
    }

    /**
     * Get load records
     * 
     * @return APIlistPortfolioLoanRecordsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPortfolioLoanRecordsRequest listPortfolioLoanRecords() {
        return new APIlistPortfolioLoanRecordsRequest();
    }

    private okhttp3.Call listPortfolioLoanInterestRecordsCall(String currency, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio/interest_records";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPortfolioLoanInterestRecordsValidateBeforeCall(String currency, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioLoanInterestRecordsCall(currency, page, limit, _callback);
        return localVarCall;
    }


    private ApiResponse<List<UniLoanInterestRecord>> listPortfolioLoanInterestRecordsWithHttpInfo(String currency, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioLoanInterestRecordsValidateBeforeCall(currency, page, limit, null);
        Type localVarReturnType = new TypeToken<List<UniLoanInterestRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPortfolioLoanInterestRecordsAsync(String currency, Integer page, Integer limit, final ApiCallback<List<UniLoanInterestRecord>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioLoanInterestRecordsValidateBeforeCall(currency, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<UniLoanInterestRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPortfolioLoanInterestRecordsRequest {
        private String currency;
        private Integer page;
        private Integer limit;

        private APIlistPortfolioLoanInterestRecordsRequest() {
        }

        /**
         * Set currency
         * @param currency Retrieve data of the specified currency (optional)
         * @return APIlistPortfolioLoanInterestRecordsRequest
         */
        public APIlistPortfolioLoanInterestRecordsRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistPortfolioLoanInterestRecordsRequest
         */
        public APIlistPortfolioLoanInterestRecordsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)
         * @return APIlistPortfolioLoanInterestRecordsRequest
         */
        public APIlistPortfolioLoanInterestRecordsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for listPortfolioLoanInterestRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPortfolioLoanInterestRecordsCall(currency, page, limit, _callback);
        }

        /**
         * Execute listPortfolioLoanInterestRecords request
         * @return List&lt;UniLoanInterestRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<UniLoanInterestRecord> execute() throws ApiException {
            ApiResponse<List<UniLoanInterestRecord>> localVarResp = listPortfolioLoanInterestRecordsWithHttpInfo(currency, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute listPortfolioLoanInterestRecords request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UniLoanInterestRecord&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UniLoanInterestRecord>> executeWithHttpInfo() throws ApiException {
            return listPortfolioLoanInterestRecordsWithHttpInfo(currency, page, limit);
        }

        /**
         * Execute listPortfolioLoanInterestRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UniLoanInterestRecord>> _callback) throws ApiException {
            return listPortfolioLoanInterestRecordsAsync(currency, page, limit, _callback);
        }
    }

    /**
     * List interest records
     * 
     * @return APIlistPortfolioLoanInterestRecordsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPortfolioLoanInterestRecordsRequest listPortfolioLoanInterestRecords() {
        return new APIlistPortfolioLoanInterestRecordsRequest();
    }

}
