/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;

import com.google.gson.reflect.TypeToken;


import io.gate.gateapi.models.TransferablesResult;
import io.gate.gateapi.models.UniLoan;
import io.gate.gateapi.models.UniLoanInterestRecord;
import io.gate.gateapi.models.UnifiedAccount;
import io.gate.gateapi.models.UnifiedBorrowable;
import io.gate.gateapi.models.UnifiedCurrency;
import io.gate.gateapi.models.UnifiedDiscount;
import io.gate.gateapi.models.UnifiedHistoryLoanRate;
import io.gate.gateapi.models.UnifiedLeverageConfig;
import io.gate.gateapi.models.UnifiedLeverageSetting;
import io.gate.gateapi.models.UnifiedLoan;
import io.gate.gateapi.models.UnifiedLoanRecord;
import io.gate.gateapi.models.UnifiedMarginTiers;
import io.gate.gateapi.models.UnifiedModeSet;
import io.gate.gateapi.models.UnifiedPortfolioInput;
import io.gate.gateapi.models.UnifiedPortfolioOutput;
import io.gate.gateapi.models.UnifiedRiskUnits;
import io.gate.gateapi.models.UnifiedTransferable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UnifiedApi {
    private ApiClient localVarApiClient;

    public UnifiedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UnifiedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call listUnifiedAccountsCall(String currency, String subUid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (subUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub_uid", subUid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUnifiedAccountsValidateBeforeCall(String currency, String subUid, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedAccountsCall(currency, subUid, _callback);
        return localVarCall;
    }


    private ApiResponse<UnifiedAccount> listUnifiedAccountsWithHttpInfo(String currency, String subUid) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedAccountsValidateBeforeCall(currency, subUid, null);
        Type localVarReturnType = new TypeToken<UnifiedAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUnifiedAccountsAsync(String currency, String subUid, final ApiCallback<UnifiedAccount> _callback) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedAccountsValidateBeforeCall(currency, subUid, _callback);
        Type localVarReturnType = new TypeToken<UnifiedAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistUnifiedAccountsRequest {
        private String currency;
        private String subUid;

        private APIlistUnifiedAccountsRequest() {
        }

        /**
         * Set currency
         * @param currency Retrieve data of the specified currency (optional)
         * @return APIlistUnifiedAccountsRequest
         */
        public APIlistUnifiedAccountsRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set subUid
         * @param subUid Sub account user ID (optional)
         * @return APIlistUnifiedAccountsRequest
         */
        public APIlistUnifiedAccountsRequest subUid(String subUid) {
            this.subUid = subUid;
            return this;
        }

        /**
         * Build call for listUnifiedAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUnifiedAccountsCall(currency, subUid, _callback);
        }

        /**
         * Execute listUnifiedAccounts request
         * @return UnifiedAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public UnifiedAccount execute() throws ApiException {
            ApiResponse<UnifiedAccount> localVarResp = listUnifiedAccountsWithHttpInfo(currency, subUid);
            return localVarResp.getData();
        }

        /**
         * Execute listUnifiedAccounts request with HTTP info returned
         * @return ApiResponse&lt;UnifiedAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UnifiedAccount> executeWithHttpInfo() throws ApiException {
            return listUnifiedAccountsWithHttpInfo(currency, subUid);
        }

        /**
         * Execute listUnifiedAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UnifiedAccount> _callback) throws ApiException {
            return listUnifiedAccountsAsync(currency, subUid, _callback);
        }
    }

    /**
     * Get unified account information
     * The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
     * @return APIlistUnifiedAccountsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistUnifiedAccountsRequest listUnifiedAccounts() {
        return new APIlistUnifiedAccountsRequest();
    }

    /**
     * Build call for getUnifiedBorrowable
     * @param currency Retrieve data of the specified currency (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedBorrowableCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/borrowable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnifiedBorrowableValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getUnifiedBorrowable(Async)");
        }

        okhttp3.Call localVarCall = getUnifiedBorrowableCall(currency, _callback);
        return localVarCall;
    }

    /**
     * Query about the maximum borrowing for the unified account
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @return UnifiedBorrowable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public UnifiedBorrowable getUnifiedBorrowable(String currency) throws ApiException {
        ApiResponse<UnifiedBorrowable> localVarResp = getUnifiedBorrowableWithHttpInfo(currency);
        return localVarResp.getData();
    }

    /**
     * Query about the maximum borrowing for the unified account
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @return ApiResponse&lt;UnifiedBorrowable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnifiedBorrowable> getUnifiedBorrowableWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedBorrowableValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<UnifiedBorrowable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query about the maximum borrowing for the unified account (asynchronously)
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedBorrowableAsync(String currency, final ApiCallback<UnifiedBorrowable> _callback) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedBorrowableValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<UnifiedBorrowable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUnifiedTransferable
     * @param currency Retrieve data of the specified currency (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedTransferableCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/transferable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnifiedTransferableValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getUnifiedTransferable(Async)");
        }

        okhttp3.Call localVarCall = getUnifiedTransferableCall(currency, _callback);
        return localVarCall;
    }

    /**
     * Query about the maximum transferable for the unified account
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @return UnifiedTransferable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public UnifiedTransferable getUnifiedTransferable(String currency) throws ApiException {
        ApiResponse<UnifiedTransferable> localVarResp = getUnifiedTransferableWithHttpInfo(currency);
        return localVarResp.getData();
    }

    /**
     * Query about the maximum transferable for the unified account
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @return ApiResponse&lt;UnifiedTransferable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnifiedTransferable> getUnifiedTransferableWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedTransferableValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<UnifiedTransferable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query about the maximum transferable for the unified account (asynchronously)
     * 
     * @param currency Retrieve data of the specified currency (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedTransferableAsync(String currency, final ApiCallback<UnifiedTransferable> _callback) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedTransferableValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<UnifiedTransferable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUnifiedTransferables
     * @param currencies Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedTransferablesCall(String currencies, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/transferables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencies", currencies));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnifiedTransferablesValidateBeforeCall(String currencies, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currencies' is set
        if (currencies == null) {
            throw new ApiException("Missing the required parameter 'currencies' when calling getUnifiedTransferables(Async)");
        }

        okhttp3.Call localVarCall = getUnifiedTransferablesCall(currencies, _callback);
        return localVarCall;
    }

    /**
     * Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed.
     * 
     * @param currencies Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (required)
     * @return List&lt;TransferablesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public List<TransferablesResult> getUnifiedTransferables(String currencies) throws ApiException {
        ApiResponse<List<TransferablesResult>> localVarResp = getUnifiedTransferablesWithHttpInfo(currencies);
        return localVarResp.getData();
    }

    /**
     * Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed.
     * 
     * @param currencies Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (required)
     * @return ApiResponse&lt;List&lt;TransferablesResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransferablesResult>> getUnifiedTransferablesWithHttpInfo(String currencies) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedTransferablesValidateBeforeCall(currencies, null);
        Type localVarReturnType = new TypeToken<List<TransferablesResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed. (asynchronously)
     * 
     * @param currencies Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedTransferablesAsync(String currencies, final ApiCallback<List<TransferablesResult>> _callback) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedTransferablesValidateBeforeCall(currencies, _callback);
        Type localVarReturnType = new TypeToken<List<TransferablesResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listUnifiedLoansCall(String currency, Integer page, Integer limit, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/loans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUnifiedLoansValidateBeforeCall(String currency, Integer page, Integer limit, String type, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedLoansCall(currency, page, limit, type, _callback);
        return localVarCall;
    }


    private ApiResponse<List<UniLoan>> listUnifiedLoansWithHttpInfo(String currency, Integer page, Integer limit, String type) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedLoansValidateBeforeCall(currency, page, limit, type, null);
        Type localVarReturnType = new TypeToken<List<UniLoan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUnifiedLoansAsync(String currency, Integer page, Integer limit, String type, final ApiCallback<List<UniLoan>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedLoansValidateBeforeCall(currency, page, limit, type, _callback);
        Type localVarReturnType = new TypeToken<List<UniLoan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistUnifiedLoansRequest {
        private String currency;
        private Integer page;
        private Integer limit;
        private String type;

        private APIlistUnifiedLoansRequest() {
        }

        /**
         * Set currency
         * @param currency Retrieve data of the specified currency (optional)
         * @return APIlistUnifiedLoansRequest
         */
        public APIlistUnifiedLoansRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistUnifiedLoansRequest
         */
        public APIlistUnifiedLoansRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)
         * @return APIlistUnifiedLoansRequest
         */
        public APIlistUnifiedLoansRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set type
         * @param type Loan type, platform - platform, margin - margin (optional)
         * @return APIlistUnifiedLoansRequest
         */
        public APIlistUnifiedLoansRequest type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Build call for listUnifiedLoans
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUnifiedLoansCall(currency, page, limit, type, _callback);
        }

        /**
         * Execute listUnifiedLoans request
         * @return List&lt;UniLoan&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<UniLoan> execute() throws ApiException {
            ApiResponse<List<UniLoan>> localVarResp = listUnifiedLoansWithHttpInfo(currency, page, limit, type);
            return localVarResp.getData();
        }

        /**
         * Execute listUnifiedLoans request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UniLoan&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UniLoan>> executeWithHttpInfo() throws ApiException {
            return listUnifiedLoansWithHttpInfo(currency, page, limit, type);
        }

        /**
         * Execute listUnifiedLoans request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UniLoan>> _callback) throws ApiException {
            return listUnifiedLoansAsync(currency, page, limit, type, _callback);
        }
    }

    /**
     * List loans
     * 
     * @return APIlistUnifiedLoansRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistUnifiedLoansRequest listUnifiedLoans() {
        return new APIlistUnifiedLoansRequest();
    }

    /**
     * Build call for createUnifiedLoan
     * @param unifiedLoan  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUnifiedLoanCall(UnifiedLoan unifiedLoan, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = unifiedLoan;

        // create path and map variables
        String localVarPath = "/unified/loans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUnifiedLoanValidateBeforeCall(UnifiedLoan unifiedLoan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'unifiedLoan' is set
        if (unifiedLoan == null) {
            throw new ApiException("Missing the required parameter 'unifiedLoan' when calling createUnifiedLoan(Async)");
        }

        okhttp3.Call localVarCall = createUnifiedLoanCall(unifiedLoan, _callback);
        return localVarCall;
    }

    /**
     * Borrow or repay
     * When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
     * @param unifiedLoan  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public void createUnifiedLoan(UnifiedLoan unifiedLoan) throws ApiException {
        createUnifiedLoanWithHttpInfo(unifiedLoan);
    }

    /**
     * Borrow or repay
     * When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
     * @param unifiedLoan  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createUnifiedLoanWithHttpInfo(UnifiedLoan unifiedLoan) throws ApiException {
        okhttp3.Call localVarCall = createUnifiedLoanValidateBeforeCall(unifiedLoan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Borrow or repay (asynchronously)
     * When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
     * @param unifiedLoan  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUnifiedLoanAsync(UnifiedLoan unifiedLoan, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = createUnifiedLoanValidateBeforeCall(unifiedLoan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call listUnifiedLoanRecordsCall(String type, String currency, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/loan_records";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUnifiedLoanRecordsValidateBeforeCall(String type, String currency, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedLoanRecordsCall(type, currency, page, limit, _callback);
        return localVarCall;
    }


    private ApiResponse<List<UnifiedLoanRecord>> listUnifiedLoanRecordsWithHttpInfo(String type, String currency, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedLoanRecordsValidateBeforeCall(type, currency, page, limit, null);
        Type localVarReturnType = new TypeToken<List<UnifiedLoanRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUnifiedLoanRecordsAsync(String type, String currency, Integer page, Integer limit, final ApiCallback<List<UnifiedLoanRecord>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedLoanRecordsValidateBeforeCall(type, currency, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<UnifiedLoanRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistUnifiedLoanRecordsRequest {
        private String type;
        private String currency;
        private Integer page;
        private Integer limit;

        private APIlistUnifiedLoanRecordsRequest() {
        }

        /**
         * Set type
         * @param type The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)
         * @return APIlistUnifiedLoanRecordsRequest
         */
        public APIlistUnifiedLoanRecordsRequest type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Set currency
         * @param currency Retrieve data of the specified currency (optional)
         * @return APIlistUnifiedLoanRecordsRequest
         */
        public APIlistUnifiedLoanRecordsRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistUnifiedLoanRecordsRequest
         */
        public APIlistUnifiedLoanRecordsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)
         * @return APIlistUnifiedLoanRecordsRequest
         */
        public APIlistUnifiedLoanRecordsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for listUnifiedLoanRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUnifiedLoanRecordsCall(type, currency, page, limit, _callback);
        }

        /**
         * Execute listUnifiedLoanRecords request
         * @return List&lt;UnifiedLoanRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<UnifiedLoanRecord> execute() throws ApiException {
            ApiResponse<List<UnifiedLoanRecord>> localVarResp = listUnifiedLoanRecordsWithHttpInfo(type, currency, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute listUnifiedLoanRecords request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UnifiedLoanRecord&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UnifiedLoanRecord>> executeWithHttpInfo() throws ApiException {
            return listUnifiedLoanRecordsWithHttpInfo(type, currency, page, limit);
        }

        /**
         * Execute listUnifiedLoanRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UnifiedLoanRecord>> _callback) throws ApiException {
            return listUnifiedLoanRecordsAsync(type, currency, page, limit, _callback);
        }
    }

    /**
     * Get load records
     * 
     * @return APIlistUnifiedLoanRecordsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistUnifiedLoanRecordsRequest listUnifiedLoanRecords() {
        return new APIlistUnifiedLoanRecordsRequest();
    }

    private okhttp3.Call listUnifiedLoanInterestRecordsCall(String currency, Integer page, Integer limit, Long from, Long to, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/interest_records";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUnifiedLoanInterestRecordsValidateBeforeCall(String currency, Integer page, Integer limit, Long from, Long to, String type, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedLoanInterestRecordsCall(currency, page, limit, from, to, type, _callback);
        return localVarCall;
    }


    private ApiResponse<List<UniLoanInterestRecord>> listUnifiedLoanInterestRecordsWithHttpInfo(String currency, Integer page, Integer limit, Long from, Long to, String type) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedLoanInterestRecordsValidateBeforeCall(currency, page, limit, from, to, type, null);
        Type localVarReturnType = new TypeToken<List<UniLoanInterestRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUnifiedLoanInterestRecordsAsync(String currency, Integer page, Integer limit, Long from, Long to, String type, final ApiCallback<List<UniLoanInterestRecord>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedLoanInterestRecordsValidateBeforeCall(currency, page, limit, from, to, type, _callback);
        Type localVarReturnType = new TypeToken<List<UniLoanInterestRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistUnifiedLoanInterestRecordsRequest {
        private String currency;
        private Integer page;
        private Integer limit;
        private Long from;
        private Long to;
        private String type;

        private APIlistUnifiedLoanInterestRecordsRequest() {
        }

        /**
         * Set currency
         * @param currency Retrieve data of the specified currency (optional)
         * @return APIlistUnifiedLoanInterestRecordsRequest
         */
        public APIlistUnifiedLoanInterestRecordsRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistUnifiedLoanInterestRecordsRequest
         */
        public APIlistUnifiedLoanInterestRecordsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)
         * @return APIlistUnifiedLoanInterestRecordsRequest
         */
        public APIlistUnifiedLoanInterestRecordsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set from
         * @param from Start timestamp of the query (optional)
         * @return APIlistUnifiedLoanInterestRecordsRequest
         */
        public APIlistUnifiedLoanInterestRecordsRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIlistUnifiedLoanInterestRecordsRequest
         */
        public APIlistUnifiedLoanInterestRecordsRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set type
         * @param type Loan type, platform loan - platform, leverage loan - margin, if not passed, defaults to margin (optional)
         * @return APIlistUnifiedLoanInterestRecordsRequest
         */
        public APIlistUnifiedLoanInterestRecordsRequest type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Build call for listUnifiedLoanInterestRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUnifiedLoanInterestRecordsCall(currency, page, limit, from, to, type, _callback);
        }

        /**
         * Execute listUnifiedLoanInterestRecords request
         * @return List&lt;UniLoanInterestRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<UniLoanInterestRecord> execute() throws ApiException {
            ApiResponse<List<UniLoanInterestRecord>> localVarResp = listUnifiedLoanInterestRecordsWithHttpInfo(currency, page, limit, from, to, type);
            return localVarResp.getData();
        }

        /**
         * Execute listUnifiedLoanInterestRecords request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UniLoanInterestRecord&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UniLoanInterestRecord>> executeWithHttpInfo() throws ApiException {
            return listUnifiedLoanInterestRecordsWithHttpInfo(currency, page, limit, from, to, type);
        }

        /**
         * Execute listUnifiedLoanInterestRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UniLoanInterestRecord>> _callback) throws ApiException {
            return listUnifiedLoanInterestRecordsAsync(currency, page, limit, from, to, type, _callback);
        }
    }

    /**
     * List interest records
     * 
     * @return APIlistUnifiedLoanInterestRecordsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistUnifiedLoanInterestRecordsRequest listUnifiedLoanInterestRecords() {
        return new APIlistUnifiedLoanInterestRecordsRequest();
    }

    /**
     * Build call for getUnifiedRiskUnits
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedRiskUnitsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/risk_units";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnifiedRiskUnitsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedRiskUnitsCall(_callback);
        return localVarCall;
    }

    /**
     * Get user risk unit details
     * Retrieve user risk unit details, only valid in portfolio margin mode
     * @return UnifiedRiskUnits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public UnifiedRiskUnits getUnifiedRiskUnits() throws ApiException {
        ApiResponse<UnifiedRiskUnits> localVarResp = getUnifiedRiskUnitsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get user risk unit details
     * Retrieve user risk unit details, only valid in portfolio margin mode
     * @return ApiResponse&lt;UnifiedRiskUnits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnifiedRiskUnits> getUnifiedRiskUnitsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUnifiedRiskUnitsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UnifiedRiskUnits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user risk unit details (asynchronously)
     * Retrieve user risk unit details, only valid in portfolio margin mode
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedRiskUnitsAsync(final ApiCallback<UnifiedRiskUnits> _callback) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedRiskUnitsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UnifiedRiskUnits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUnifiedMode
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedModeCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/unified_mode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnifiedModeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedModeCall(_callback);
        return localVarCall;
    }

    /**
     * Query mode of the unified account
     * Unified account mode: - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Cross-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode - &#x60;single_currency&#x60;: Single-currency margin mode
     * @return UnifiedModeSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public UnifiedModeSet getUnifiedMode() throws ApiException {
        ApiResponse<UnifiedModeSet> localVarResp = getUnifiedModeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Query mode of the unified account
     * Unified account mode: - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Cross-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode - &#x60;single_currency&#x60;: Single-currency margin mode
     * @return ApiResponse&lt;UnifiedModeSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnifiedModeSet> getUnifiedModeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUnifiedModeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UnifiedModeSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query mode of the unified account (asynchronously)
     * Unified account mode: - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Cross-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode - &#x60;single_currency&#x60;: Single-currency margin mode
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedModeAsync(final ApiCallback<UnifiedModeSet> _callback) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedModeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UnifiedModeSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for setUnifiedMode
     * @param unifiedModeSet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUnifiedModeCall(UnifiedModeSet unifiedModeSet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = unifiedModeSet;

        // create path and map variables
        String localVarPath = "/unified/unified_mode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUnifiedModeValidateBeforeCall(UnifiedModeSet unifiedModeSet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'unifiedModeSet' is set
        if (unifiedModeSet == null) {
            throw new ApiException("Missing the required parameter 'unifiedModeSet' when calling setUnifiedMode(Async)");
        }

        okhttp3.Call localVarCall = setUnifiedModeCall(unifiedModeSet, _callback);
        return localVarCall;
    }

    /**
     * Set mode of the unified account
     * Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode&#x3D;classic &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;classic\&quot;  } &#x60;&#x60;&#x60; - Open the cross-currency margin mode, mode&#x3D;multi_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;multi_currency\&quot;,  \&quot;settings\&quot;: {  \&quot;usdt_futures\&quot;: true  }  } &#x60;&#x60;&#x60; - When the portfolio margin mode is enabled, mode&#x3D;portfolio &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;portfolio\&quot;,  \&quot;settings\&quot;: {  \&quot;spot_hedge\&quot;: true  }  } &#x60;&#x60;&#x60; - When opening a single currency margin mode, mode&#x3D;single_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;single_currency\&quot;  } &#x60;&#x60;&#x60;
     * @param unifiedModeSet  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void setUnifiedMode(UnifiedModeSet unifiedModeSet) throws ApiException {
        setUnifiedModeWithHttpInfo(unifiedModeSet);
    }

    /**
     * Set mode of the unified account
     * Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode&#x3D;classic &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;classic\&quot;  } &#x60;&#x60;&#x60; - Open the cross-currency margin mode, mode&#x3D;multi_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;multi_currency\&quot;,  \&quot;settings\&quot;: {  \&quot;usdt_futures\&quot;: true  }  } &#x60;&#x60;&#x60; - When the portfolio margin mode is enabled, mode&#x3D;portfolio &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;portfolio\&quot;,  \&quot;settings\&quot;: {  \&quot;spot_hedge\&quot;: true  }  } &#x60;&#x60;&#x60; - When opening a single currency margin mode, mode&#x3D;single_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;single_currency\&quot;  } &#x60;&#x60;&#x60;
     * @param unifiedModeSet  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setUnifiedModeWithHttpInfo(UnifiedModeSet unifiedModeSet) throws ApiException {
        okhttp3.Call localVarCall = setUnifiedModeValidateBeforeCall(unifiedModeSet, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set mode of the unified account (asynchronously)
     * Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode&#x3D;classic &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;classic\&quot;  } &#x60;&#x60;&#x60; - Open the cross-currency margin mode, mode&#x3D;multi_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;multi_currency\&quot;,  \&quot;settings\&quot;: {  \&quot;usdt_futures\&quot;: true  }  } &#x60;&#x60;&#x60; - When the portfolio margin mode is enabled, mode&#x3D;portfolio &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;portfolio\&quot;,  \&quot;settings\&quot;: {  \&quot;spot_hedge\&quot;: true  }  } &#x60;&#x60;&#x60; - When opening a single currency margin mode, mode&#x3D;single_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;single_currency\&quot;  } &#x60;&#x60;&#x60;
     * @param unifiedModeSet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUnifiedModeAsync(UnifiedModeSet unifiedModeSet, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = setUnifiedModeValidateBeforeCall(unifiedModeSet, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUnifiedEstimateRate
     * @param currencies Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedEstimateRateCall(List<String> currencies, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/estimate_rate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencies != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "currencies", currencies));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnifiedEstimateRateValidateBeforeCall(List<String> currencies, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currencies' is set
        if (currencies == null) {
            throw new ApiException("Missing the required parameter 'currencies' when calling getUnifiedEstimateRate(Async)");
        }

        okhttp3.Call localVarCall = getUnifiedEstimateRateCall(currencies, _callback);
        return localVarCall;
    }

    /**
     * Get unified estimate rate
     * Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
     * @param currencies Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies. (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getUnifiedEstimateRate(List<String> currencies) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getUnifiedEstimateRateWithHttpInfo(currencies);
        return localVarResp.getData();
    }

    /**
     * Get unified estimate rate
     * Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
     * @param currencies Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies. (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getUnifiedEstimateRateWithHttpInfo(List<String> currencies) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedEstimateRateValidateBeforeCall(currencies, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get unified estimate rate (asynchronously)
     * Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
     * @param currencies Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnifiedEstimateRateAsync(List<String> currencies, final ApiCallback<Map<String, String>> _callback) throws ApiException {
        okhttp3.Call localVarCall = getUnifiedEstimateRateValidateBeforeCall(currencies, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listCurrencyDiscountTiers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCurrencyDiscountTiersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/currency_discount_tiers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCurrencyDiscountTiersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listCurrencyDiscountTiersCall(_callback);
        return localVarCall;
    }

    /**
     * List currency discount tiers
     * 
     * @return List&lt;UnifiedDiscount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public List<UnifiedDiscount> listCurrencyDiscountTiers() throws ApiException {
        ApiResponse<List<UnifiedDiscount>> localVarResp = listCurrencyDiscountTiersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List currency discount tiers
     * 
     * @return ApiResponse&lt;List&lt;UnifiedDiscount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UnifiedDiscount>> listCurrencyDiscountTiersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCurrencyDiscountTiersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<UnifiedDiscount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List currency discount tiers (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCurrencyDiscountTiersAsync(final ApiCallback<List<UnifiedDiscount>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listCurrencyDiscountTiersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<UnifiedDiscount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listLoanMarginTiers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoanMarginTiersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/loan_margin_tiers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoanMarginTiersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listLoanMarginTiersCall(_callback);
        return localVarCall;
    }

    /**
     * List loan margin tiers
     * 
     * @return List&lt;UnifiedMarginTiers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public List<UnifiedMarginTiers> listLoanMarginTiers() throws ApiException {
        ApiResponse<List<UnifiedMarginTiers>> localVarResp = listLoanMarginTiersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List loan margin tiers
     * 
     * @return ApiResponse&lt;List&lt;UnifiedMarginTiers&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UnifiedMarginTiers>> listLoanMarginTiersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listLoanMarginTiersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<UnifiedMarginTiers>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List loan margin tiers (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoanMarginTiersAsync(final ApiCallback<List<UnifiedMarginTiers>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listLoanMarginTiersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<UnifiedMarginTiers>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for calculatePortfolioMargin
     * @param unifiedPortfolioInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculatePortfolioMarginCall(UnifiedPortfolioInput unifiedPortfolioInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = unifiedPortfolioInput;

        // create path and map variables
        String localVarPath = "/unified/portfolio_calculator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculatePortfolioMarginValidateBeforeCall(UnifiedPortfolioInput unifiedPortfolioInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'unifiedPortfolioInput' is set
        if (unifiedPortfolioInput == null) {
            throw new ApiException("Missing the required parameter 'unifiedPortfolioInput' when calling calculatePortfolioMargin(Async)");
        }

        okhttp3.Call localVarCall = calculatePortfolioMarginCall(unifiedPortfolioInput, _callback);
        return localVarCall;
    }

    /**
     * Portfolio margin calculator
     * Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
     * @param unifiedPortfolioInput  (required)
     * @return UnifiedPortfolioOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public UnifiedPortfolioOutput calculatePortfolioMargin(UnifiedPortfolioInput unifiedPortfolioInput) throws ApiException {
        ApiResponse<UnifiedPortfolioOutput> localVarResp = calculatePortfolioMarginWithHttpInfo(unifiedPortfolioInput);
        return localVarResp.getData();
    }

    /**
     * Portfolio margin calculator
     * Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
     * @param unifiedPortfolioInput  (required)
     * @return ApiResponse&lt;UnifiedPortfolioOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnifiedPortfolioOutput> calculatePortfolioMarginWithHttpInfo(UnifiedPortfolioInput unifiedPortfolioInput) throws ApiException {
        okhttp3.Call localVarCall = calculatePortfolioMarginValidateBeforeCall(unifiedPortfolioInput, null);
        Type localVarReturnType = new TypeToken<UnifiedPortfolioOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Portfolio margin calculator (asynchronously)
     * Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
     * @param unifiedPortfolioInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculatePortfolioMarginAsync(UnifiedPortfolioInput unifiedPortfolioInput, final ApiCallback<UnifiedPortfolioOutput> _callback) throws ApiException {
        okhttp3.Call localVarCall = calculatePortfolioMarginValidateBeforeCall(unifiedPortfolioInput, _callback);
        Type localVarReturnType = new TypeToken<UnifiedPortfolioOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUserLeverageCurrencyConfig
     * @param currency Currency (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserLeverageCurrencyConfigCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/leverage/user_currency_config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserLeverageCurrencyConfigValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getUserLeverageCurrencyConfig(Async)");
        }

        okhttp3.Call localVarCall = getUserLeverageCurrencyConfigCall(currency, _callback);
        return localVarCall;
    }

    /**
     * Minimum currency leverage that can be set
     * 
     * @param currency Currency (required)
     * @return UnifiedLeverageConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public UnifiedLeverageConfig getUserLeverageCurrencyConfig(String currency) throws ApiException {
        ApiResponse<UnifiedLeverageConfig> localVarResp = getUserLeverageCurrencyConfigWithHttpInfo(currency);
        return localVarResp.getData();
    }

    /**
     * Minimum currency leverage that can be set
     * 
     * @param currency Currency (required)
     * @return ApiResponse&lt;UnifiedLeverageConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnifiedLeverageConfig> getUserLeverageCurrencyConfigWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = getUserLeverageCurrencyConfigValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<UnifiedLeverageConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Minimum currency leverage that can be set (asynchronously)
     * 
     * @param currency Currency (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserLeverageCurrencyConfigAsync(String currency, final ApiCallback<UnifiedLeverageConfig> _callback) throws ApiException {
        okhttp3.Call localVarCall = getUserLeverageCurrencyConfigValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<UnifiedLeverageConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getUserLeverageCurrencySettingCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/leverage/user_currency_setting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserLeverageCurrencySettingValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getUserLeverageCurrencySettingCall(currency, _callback);
        return localVarCall;
    }


    private ApiResponse<UnifiedLeverageSetting> getUserLeverageCurrencySettingWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = getUserLeverageCurrencySettingValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<UnifiedLeverageSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserLeverageCurrencySettingAsync(String currency, final ApiCallback<UnifiedLeverageSetting> _callback) throws ApiException {
        okhttp3.Call localVarCall = getUserLeverageCurrencySettingValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<UnifiedLeverageSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserLeverageCurrencySettingRequest {
        private String currency;

        private APIgetUserLeverageCurrencySettingRequest() {
        }

        /**
         * Set currency
         * @param currency Currency (optional)
         * @return APIgetUserLeverageCurrencySettingRequest
         */
        public APIgetUserLeverageCurrencySettingRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Build call for getUserLeverageCurrencySetting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserLeverageCurrencySettingCall(currency, _callback);
        }

        /**
         * Execute getUserLeverageCurrencySetting request
         * @return UnifiedLeverageSetting
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public UnifiedLeverageSetting execute() throws ApiException {
            ApiResponse<UnifiedLeverageSetting> localVarResp = getUserLeverageCurrencySettingWithHttpInfo(currency);
            return localVarResp.getData();
        }

        /**
         * Execute getUserLeverageCurrencySetting request with HTTP info returned
         * @return ApiResponse&lt;UnifiedLeverageSetting&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UnifiedLeverageSetting> executeWithHttpInfo() throws ApiException {
            return getUserLeverageCurrencySettingWithHttpInfo(currency);
        }

        /**
         * Execute getUserLeverageCurrencySetting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UnifiedLeverageSetting> _callback) throws ApiException {
            return getUserLeverageCurrencySettingAsync(currency, _callback);
        }
    }

    /**
     * Get the leverage multiple of the user currency
     * Get the user&#39;s currency leverage. If currency is not passed, query all currencies.
     * @return APIgetUserLeverageCurrencySettingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserLeverageCurrencySettingRequest getUserLeverageCurrencySetting() {
        return new APIgetUserLeverageCurrencySettingRequest();
    }

    /**
     * Build call for setUserLeverageCurrencySetting
     * @param unifiedLeverageSetting  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserLeverageCurrencySettingCall(UnifiedLeverageSetting unifiedLeverageSetting, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = unifiedLeverageSetting;

        // create path and map variables
        String localVarPath = "/unified/leverage/user_currency_setting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUserLeverageCurrencySettingValidateBeforeCall(UnifiedLeverageSetting unifiedLeverageSetting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'unifiedLeverageSetting' is set
        if (unifiedLeverageSetting == null) {
            throw new ApiException("Missing the required parameter 'unifiedLeverageSetting' when calling setUserLeverageCurrencySetting(Async)");
        }

        okhttp3.Call localVarCall = setUserLeverageCurrencySettingCall(unifiedLeverageSetting, _callback);
        return localVarCall;
    }

    /**
     * Set the loan currency leverage
     * 
     * @param unifiedLeverageSetting  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void setUserLeverageCurrencySetting(UnifiedLeverageSetting unifiedLeverageSetting) throws ApiException {
        setUserLeverageCurrencySettingWithHttpInfo(unifiedLeverageSetting);
    }

    /**
     * Set the loan currency leverage
     * 
     * @param unifiedLeverageSetting  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setUserLeverageCurrencySettingWithHttpInfo(UnifiedLeverageSetting unifiedLeverageSetting) throws ApiException {
        okhttp3.Call localVarCall = setUserLeverageCurrencySettingValidateBeforeCall(unifiedLeverageSetting, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set the loan currency leverage (asynchronously)
     * 
     * @param unifiedLeverageSetting  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserLeverageCurrencySettingAsync(UnifiedLeverageSetting unifiedLeverageSetting, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = setUserLeverageCurrencySettingValidateBeforeCall(unifiedLeverageSetting, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call listUnifiedCurrenciesCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUnifiedCurrenciesValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedCurrenciesCall(currency, _callback);
        return localVarCall;
    }


    private ApiResponse<List<UnifiedCurrency>> listUnifiedCurrenciesWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedCurrenciesValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<List<UnifiedCurrency>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUnifiedCurrenciesAsync(String currency, final ApiCallback<List<UnifiedCurrency>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listUnifiedCurrenciesValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<List<UnifiedCurrency>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistUnifiedCurrenciesRequest {
        private String currency;

        private APIlistUnifiedCurrenciesRequest() {
        }

        /**
         * Set currency
         * @param currency Currency (optional)
         * @return APIlistUnifiedCurrenciesRequest
         */
        public APIlistUnifiedCurrenciesRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Build call for listUnifiedCurrencies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUnifiedCurrenciesCall(currency, _callback);
        }

        /**
         * Execute listUnifiedCurrencies request
         * @return List&lt;UnifiedCurrency&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<UnifiedCurrency> execute() throws ApiException {
            ApiResponse<List<UnifiedCurrency>> localVarResp = listUnifiedCurrenciesWithHttpInfo(currency);
            return localVarResp.getData();
        }

        /**
         * Execute listUnifiedCurrencies request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UnifiedCurrency&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UnifiedCurrency>> executeWithHttpInfo() throws ApiException {
            return listUnifiedCurrenciesWithHttpInfo(currency);
        }

        /**
         * Execute listUnifiedCurrencies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UnifiedCurrency>> _callback) throws ApiException {
            return listUnifiedCurrenciesAsync(currency, _callback);
        }
    }

    /**
     * List of loan currencies supported by unified account
     * 
     * @return APIlistUnifiedCurrenciesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistUnifiedCurrenciesRequest listUnifiedCurrencies() {
        return new APIlistUnifiedCurrenciesRequest();
    }

    private okhttp3.Call getHistoryLoanRateCall(String currency, String tier, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unified/history_loan_rate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tier", tier));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryLoanRateValidateBeforeCall(String currency, String tier, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getHistoryLoanRate(Async)");
        }

        okhttp3.Call localVarCall = getHistoryLoanRateCall(currency, tier, page, limit, _callback);
        return localVarCall;
    }


    private ApiResponse<UnifiedHistoryLoanRate> getHistoryLoanRateWithHttpInfo(String currency, String tier, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getHistoryLoanRateValidateBeforeCall(currency, tier, page, limit, null);
        Type localVarReturnType = new TypeToken<UnifiedHistoryLoanRate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHistoryLoanRateAsync(String currency, String tier, Integer page, Integer limit, final ApiCallback<UnifiedHistoryLoanRate> _callback) throws ApiException {
        okhttp3.Call localVarCall = getHistoryLoanRateValidateBeforeCall(currency, tier, page, limit, _callback);
        Type localVarReturnType = new TypeToken<UnifiedHistoryLoanRate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetHistoryLoanRateRequest {
        private final String currency;
        private String tier;
        private Integer page;
        private Integer limit;

        private APIgetHistoryLoanRateRequest(String currency) {
            this.currency = currency;
        }

        /**
         * Set tier
         * @param tier The VIP level of the floating rate that needs to be queried (optional)
         * @return APIgetHistoryLoanRateRequest
         */
        public APIgetHistoryLoanRateRequest tier(String tier) {
            this.tier = tier;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIgetHistoryLoanRateRequest
         */
        public APIgetHistoryLoanRateRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)
         * @return APIgetHistoryLoanRateRequest
         */
        public APIgetHistoryLoanRateRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for getHistoryLoanRate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHistoryLoanRateCall(currency, tier, page, limit, _callback);
        }

        /**
         * Execute getHistoryLoanRate request
         * @return UnifiedHistoryLoanRate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public UnifiedHistoryLoanRate execute() throws ApiException {
            ApiResponse<UnifiedHistoryLoanRate> localVarResp = getHistoryLoanRateWithHttpInfo(currency, tier, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute getHistoryLoanRate request with HTTP info returned
         * @return ApiResponse&lt;UnifiedHistoryLoanRate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UnifiedHistoryLoanRate> executeWithHttpInfo() throws ApiException {
            return getHistoryLoanRateWithHttpInfo(currency, tier, page, limit);
        }

        /**
         * Execute getHistoryLoanRate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UnifiedHistoryLoanRate> _callback) throws ApiException {
            return getHistoryLoanRateAsync(currency, tier, page, limit, _callback);
        }
    }

    /**
     * get historical lending rates
     * 
     * @param currency Currency (required)
     * @return APIgetHistoryLoanRateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIgetHistoryLoanRateRequest getHistoryLoanRate(String currency) {
        return new APIgetHistoryLoanRateRequest(currency);
    }

}
