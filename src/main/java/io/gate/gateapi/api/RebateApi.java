/*
 * Gate API v4
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;

import com.google.gson.reflect.TypeToken;


import io.gate.gateapi.models.AgencyCommissionHistory;
import io.gate.gateapi.models.AgencyTransactionHistory;
import io.gate.gateapi.models.BrokerCommission;
import io.gate.gateapi.models.BrokerTransaction;
import io.gate.gateapi.models.PartnerCommissionHistory;
import io.gate.gateapi.models.PartnerSubList;
import io.gate.gateapi.models.PartnerTransactionHistory;
import io.gate.gateapi.models.RebateUserInfo;
import io.gate.gateapi.models.UserSubRelation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RebateApi {
    private ApiClient localVarApiClient;

    public RebateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RebateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call agencyTransactionHistoryCall(String currencyPair, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rebate/agency/transaction_history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyPair != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_pair", currencyPair));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agencyTransactionHistoryValidateBeforeCall(String currencyPair, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = agencyTransactionHistoryCall(currencyPair, userId, from, to, limit, offset, _callback);
        return localVarCall;
    }


    private ApiResponse<List<AgencyTransactionHistory>> agencyTransactionHistoryWithHttpInfo(String currencyPair, Long userId, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = agencyTransactionHistoryValidateBeforeCall(currencyPair, userId, from, to, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<AgencyTransactionHistory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call agencyTransactionHistoryAsync(String currencyPair, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback<List<AgencyTransactionHistory>> _callback) throws ApiException {
        okhttp3.Call localVarCall = agencyTransactionHistoryValidateBeforeCall(currencyPair, userId, from, to, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<AgencyTransactionHistory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIagencyTransactionHistoryRequest {
        private String currencyPair;
        private Long userId;
        private Long from;
        private Long to;
        private Integer limit;
        private Integer offset;

        private APIagencyTransactionHistoryRequest() {
        }

        /**
         * Set currencyPair
         * @param currencyPair Specify the currency pair, if not specified, return all currency pairs (optional)
         * @return APIagencyTransactionHistoryRequest
         */
        public APIagencyTransactionHistoryRequest currencyPair(String currencyPair) {
            this.currencyPair = currencyPair;
            return this;
        }

        /**
         * Set userId
         * @param userId User ID. If not specified, all user records will be returned (optional)
         * @return APIagencyTransactionHistoryRequest
         */
        public APIagencyTransactionHistoryRequest userId(Long userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set from
         * @param from Time range beginning, default to 7 days before current time (optional)
         * @return APIagencyTransactionHistoryRequest
         */
        public APIagencyTransactionHistoryRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIagencyTransactionHistoryRequest
         */
        public APIagencyTransactionHistoryRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIagencyTransactionHistoryRequest
         */
        public APIagencyTransactionHistoryRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset List offset, starting from 0 (optional, default to 0)
         * @return APIagencyTransactionHistoryRequest
         */
        public APIagencyTransactionHistoryRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for agencyTransactionHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return agencyTransactionHistoryCall(currencyPair, userId, from, to, limit, offset, _callback);
        }

        /**
         * Execute agencyTransactionHistory request
         * @return List&lt;AgencyTransactionHistory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<AgencyTransactionHistory> execute() throws ApiException {
            ApiResponse<List<AgencyTransactionHistory>> localVarResp = agencyTransactionHistoryWithHttpInfo(currencyPair, userId, from, to, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute agencyTransactionHistory request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AgencyTransactionHistory&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AgencyTransactionHistory>> executeWithHttpInfo() throws ApiException {
            return agencyTransactionHistoryWithHttpInfo(currencyPair, userId, from, to, limit, offset);
        }

        /**
         * Execute agencyTransactionHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AgencyTransactionHistory>> _callback) throws ApiException {
            return agencyTransactionHistoryAsync(currencyPair, userId, from, to, limit, offset, _callback);
        }
    }

    /**
     * The agency obtains the transaction history of the recommended user
     * Record time range cannot exceed 30 days
     * @return APIagencyTransactionHistoryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIagencyTransactionHistoryRequest agencyTransactionHistory() {
        return new APIagencyTransactionHistoryRequest();
    }

    private okhttp3.Call agencyCommissionsHistoryCall(String currency, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rebate/agency/commission_history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agencyCommissionsHistoryValidateBeforeCall(String currency, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = agencyCommissionsHistoryCall(currency, userId, from, to, limit, offset, _callback);
        return localVarCall;
    }


    private ApiResponse<List<AgencyCommissionHistory>> agencyCommissionsHistoryWithHttpInfo(String currency, Long userId, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = agencyCommissionsHistoryValidateBeforeCall(currency, userId, from, to, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<AgencyCommissionHistory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call agencyCommissionsHistoryAsync(String currency, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback<List<AgencyCommissionHistory>> _callback) throws ApiException {
        okhttp3.Call localVarCall = agencyCommissionsHistoryValidateBeforeCall(currency, userId, from, to, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<AgencyCommissionHistory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIagencyCommissionsHistoryRequest {
        private String currency;
        private Long userId;
        private Long from;
        private Long to;
        private Integer limit;
        private Integer offset;

        private APIagencyCommissionsHistoryRequest() {
        }

        /**
         * Set currency
         * @param currency Filter by currency. Return all currency records if not specified (optional)
         * @return APIagencyCommissionsHistoryRequest
         */
        public APIagencyCommissionsHistoryRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set userId
         * @param userId User ID. If not specified, all user records will be returned (optional)
         * @return APIagencyCommissionsHistoryRequest
         */
        public APIagencyCommissionsHistoryRequest userId(Long userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set from
         * @param from Time range beginning, default to 7 days before current time (optional)
         * @return APIagencyCommissionsHistoryRequest
         */
        public APIagencyCommissionsHistoryRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIagencyCommissionsHistoryRequest
         */
        public APIagencyCommissionsHistoryRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIagencyCommissionsHistoryRequest
         */
        public APIagencyCommissionsHistoryRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset List offset, starting from 0 (optional, default to 0)
         * @return APIagencyCommissionsHistoryRequest
         */
        public APIagencyCommissionsHistoryRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for agencyCommissionsHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return agencyCommissionsHistoryCall(currency, userId, from, to, limit, offset, _callback);
        }

        /**
         * Execute agencyCommissionsHistory request
         * @return List&lt;AgencyCommissionHistory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<AgencyCommissionHistory> execute() throws ApiException {
            ApiResponse<List<AgencyCommissionHistory>> localVarResp = agencyCommissionsHistoryWithHttpInfo(currency, userId, from, to, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute agencyCommissionsHistory request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AgencyCommissionHistory&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AgencyCommissionHistory>> executeWithHttpInfo() throws ApiException {
            return agencyCommissionsHistoryWithHttpInfo(currency, userId, from, to, limit, offset);
        }

        /**
         * Execute agencyCommissionsHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AgencyCommissionHistory>> _callback) throws ApiException {
            return agencyCommissionsHistoryAsync(currency, userId, from, to, limit, offset, _callback);
        }
    }

    /**
     * The agency obtains the commission history of the recommended user
     * Record time range cannot exceed 30 days
     * @return APIagencyCommissionsHistoryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIagencyCommissionsHistoryRequest agencyCommissionsHistory() {
        return new APIagencyCommissionsHistoryRequest();
    }

    private okhttp3.Call partnerTransactionHistoryCall(String currencyPair, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rebate/partner/transaction_history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyPair != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_pair", currencyPair));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerTransactionHistoryValidateBeforeCall(String currencyPair, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = partnerTransactionHistoryCall(currencyPair, userId, from, to, limit, offset, _callback);
        return localVarCall;
    }


    private ApiResponse<PartnerTransactionHistory> partnerTransactionHistoryWithHttpInfo(String currencyPair, Long userId, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = partnerTransactionHistoryValidateBeforeCall(currencyPair, userId, from, to, limit, offset, null);
        Type localVarReturnType = new TypeToken<PartnerTransactionHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partnerTransactionHistoryAsync(String currencyPair, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback<PartnerTransactionHistory> _callback) throws ApiException {
        okhttp3.Call localVarCall = partnerTransactionHistoryValidateBeforeCall(currencyPair, userId, from, to, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PartnerTransactionHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpartnerTransactionHistoryRequest {
        private String currencyPair;
        private Long userId;
        private Long from;
        private Long to;
        private Integer limit;
        private Integer offset;

        private APIpartnerTransactionHistoryRequest() {
        }

        /**
         * Set currencyPair
         * @param currencyPair Specify the currency pair, if not specified, return all currency pairs (optional)
         * @return APIpartnerTransactionHistoryRequest
         */
        public APIpartnerTransactionHistoryRequest currencyPair(String currencyPair) {
            this.currencyPair = currencyPair;
            return this;
        }

        /**
         * Set userId
         * @param userId User ID. If not specified, all user records will be returned (optional)
         * @return APIpartnerTransactionHistoryRequest
         */
        public APIpartnerTransactionHistoryRequest userId(Long userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set from
         * @param from Time range beginning, default to 7 days before current time (optional)
         * @return APIpartnerTransactionHistoryRequest
         */
        public APIpartnerTransactionHistoryRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIpartnerTransactionHistoryRequest
         */
        public APIpartnerTransactionHistoryRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIpartnerTransactionHistoryRequest
         */
        public APIpartnerTransactionHistoryRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset List offset, starting from 0 (optional, default to 0)
         * @return APIpartnerTransactionHistoryRequest
         */
        public APIpartnerTransactionHistoryRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for partnerTransactionHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return partnerTransactionHistoryCall(currencyPair, userId, from, to, limit, offset, _callback);
        }

        /**
         * Execute partnerTransactionHistory request
         * @return PartnerTransactionHistory
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public PartnerTransactionHistory execute() throws ApiException {
            ApiResponse<PartnerTransactionHistory> localVarResp = partnerTransactionHistoryWithHttpInfo(currencyPair, userId, from, to, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute partnerTransactionHistory request with HTTP info returned
         * @return ApiResponse&lt;PartnerTransactionHistory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartnerTransactionHistory> executeWithHttpInfo() throws ApiException {
            return partnerTransactionHistoryWithHttpInfo(currencyPair, userId, from, to, limit, offset);
        }

        /**
         * Execute partnerTransactionHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartnerTransactionHistory> _callback) throws ApiException {
            return partnerTransactionHistoryAsync(currencyPair, userId, from, to, limit, offset, _callback);
        }
    }

    /**
     * Partner obtains transaction records of recommended users
     * Record time range cannot exceed 30 days
     * @return APIpartnerTransactionHistoryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIpartnerTransactionHistoryRequest partnerTransactionHistory() {
        return new APIpartnerTransactionHistoryRequest();
    }

    private okhttp3.Call partnerCommissionsHistoryCall(String currency, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rebate/partner/commission_history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerCommissionsHistoryValidateBeforeCall(String currency, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = partnerCommissionsHistoryCall(currency, userId, from, to, limit, offset, _callback);
        return localVarCall;
    }


    private ApiResponse<PartnerCommissionHistory> partnerCommissionsHistoryWithHttpInfo(String currency, Long userId, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = partnerCommissionsHistoryValidateBeforeCall(currency, userId, from, to, limit, offset, null);
        Type localVarReturnType = new TypeToken<PartnerCommissionHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partnerCommissionsHistoryAsync(String currency, Long userId, Long from, Long to, Integer limit, Integer offset, final ApiCallback<PartnerCommissionHistory> _callback) throws ApiException {
        okhttp3.Call localVarCall = partnerCommissionsHistoryValidateBeforeCall(currency, userId, from, to, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PartnerCommissionHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpartnerCommissionsHistoryRequest {
        private String currency;
        private Long userId;
        private Long from;
        private Long to;
        private Integer limit;
        private Integer offset;

        private APIpartnerCommissionsHistoryRequest() {
        }

        /**
         * Set currency
         * @param currency Filter by currency. Return all currency records if not specified (optional)
         * @return APIpartnerCommissionsHistoryRequest
         */
        public APIpartnerCommissionsHistoryRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set userId
         * @param userId User ID. If not specified, all user records will be returned (optional)
         * @return APIpartnerCommissionsHistoryRequest
         */
        public APIpartnerCommissionsHistoryRequest userId(Long userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set from
         * @param from Time range beginning, default to 7 days before current time (optional)
         * @return APIpartnerCommissionsHistoryRequest
         */
        public APIpartnerCommissionsHistoryRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIpartnerCommissionsHistoryRequest
         */
        public APIpartnerCommissionsHistoryRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIpartnerCommissionsHistoryRequest
         */
        public APIpartnerCommissionsHistoryRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset List offset, starting from 0 (optional, default to 0)
         * @return APIpartnerCommissionsHistoryRequest
         */
        public APIpartnerCommissionsHistoryRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for partnerCommissionsHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return partnerCommissionsHistoryCall(currency, userId, from, to, limit, offset, _callback);
        }

        /**
         * Execute partnerCommissionsHistory request
         * @return PartnerCommissionHistory
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public PartnerCommissionHistory execute() throws ApiException {
            ApiResponse<PartnerCommissionHistory> localVarResp = partnerCommissionsHistoryWithHttpInfo(currency, userId, from, to, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute partnerCommissionsHistory request with HTTP info returned
         * @return ApiResponse&lt;PartnerCommissionHistory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartnerCommissionHistory> executeWithHttpInfo() throws ApiException {
            return partnerCommissionsHistoryWithHttpInfo(currency, userId, from, to, limit, offset);
        }

        /**
         * Execute partnerCommissionsHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartnerCommissionHistory> _callback) throws ApiException {
            return partnerCommissionsHistoryAsync(currency, userId, from, to, limit, offset, _callback);
        }
    }

    /**
     * Partner obtains commission records of recommended users
     * Record time range cannot exceed 30 days
     * @return APIpartnerCommissionsHistoryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIpartnerCommissionsHistoryRequest partnerCommissionsHistory() {
        return new APIpartnerCommissionsHistoryRequest();
    }

    private okhttp3.Call partnerSubListCall(Long userId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rebate/partner/sub_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerSubListValidateBeforeCall(Long userId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = partnerSubListCall(userId, limit, offset, _callback);
        return localVarCall;
    }


    private ApiResponse<PartnerSubList> partnerSubListWithHttpInfo(Long userId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = partnerSubListValidateBeforeCall(userId, limit, offset, null);
        Type localVarReturnType = new TypeToken<PartnerSubList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partnerSubListAsync(Long userId, Integer limit, Integer offset, final ApiCallback<PartnerSubList> _callback) throws ApiException {
        okhttp3.Call localVarCall = partnerSubListValidateBeforeCall(userId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PartnerSubList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpartnerSubListRequest {
        private Long userId;
        private Integer limit;
        private Integer offset;

        private APIpartnerSubListRequest() {
        }

        /**
         * Set userId
         * @param userId User ID. If not specified, all user records will be returned (optional)
         * @return APIpartnerSubListRequest
         */
        public APIpartnerSubListRequest userId(Long userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIpartnerSubListRequest
         */
        public APIpartnerSubListRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset List offset, starting from 0 (optional, default to 0)
         * @return APIpartnerSubListRequest
         */
        public APIpartnerSubListRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for partnerSubList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return partnerSubListCall(userId, limit, offset, _callback);
        }

        /**
         * Execute partnerSubList request
         * @return PartnerSubList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public PartnerSubList execute() throws ApiException {
            ApiResponse<PartnerSubList> localVarResp = partnerSubListWithHttpInfo(userId, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute partnerSubList request with HTTP info returned
         * @return ApiResponse&lt;PartnerSubList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartnerSubList> executeWithHttpInfo() throws ApiException {
            return partnerSubListWithHttpInfo(userId, limit, offset);
        }

        /**
         * Execute partnerSubList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartnerSubList> _callback) throws ApiException {
            return partnerSubListAsync(userId, limit, offset, _callback);
        }
    }

    /**
     * Partner subordinate list
     * Including sub-agents, direct customers, indirect customers
     * @return APIpartnerSubListRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIpartnerSubListRequest partnerSubList() {
        return new APIpartnerSubListRequest();
    }

    private okhttp3.Call rebateBrokerCommissionHistoryCall(Integer limit, Integer offset, Long userId, Long from, Long to, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rebate/broker/commission_history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rebateBrokerCommissionHistoryValidateBeforeCall(Integer limit, Integer offset, Long userId, Long from, Long to, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = rebateBrokerCommissionHistoryCall(limit, offset, userId, from, to, _callback);
        return localVarCall;
    }


    private ApiResponse<List<BrokerCommission>> rebateBrokerCommissionHistoryWithHttpInfo(Integer limit, Integer offset, Long userId, Long from, Long to) throws ApiException {
        okhttp3.Call localVarCall = rebateBrokerCommissionHistoryValidateBeforeCall(limit, offset, userId, from, to, null);
        Type localVarReturnType = new TypeToken<List<BrokerCommission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rebateBrokerCommissionHistoryAsync(Integer limit, Integer offset, Long userId, Long from, Long to, final ApiCallback<List<BrokerCommission>> _callback) throws ApiException {
        okhttp3.Call localVarCall = rebateBrokerCommissionHistoryValidateBeforeCall(limit, offset, userId, from, to, _callback);
        Type localVarReturnType = new TypeToken<List<BrokerCommission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrebateBrokerCommissionHistoryRequest {
        private Integer limit;
        private Integer offset;
        private Long userId;
        private Long from;
        private Long to;

        private APIrebateBrokerCommissionHistoryRequest() {
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIrebateBrokerCommissionHistoryRequest
         */
        public APIrebateBrokerCommissionHistoryRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset List offset, starting from 0 (optional, default to 0)
         * @return APIrebateBrokerCommissionHistoryRequest
         */
        public APIrebateBrokerCommissionHistoryRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set userId
         * @param userId User ID. If not specified, all user records will be returned (optional)
         * @return APIrebateBrokerCommissionHistoryRequest
         */
        public APIrebateBrokerCommissionHistoryRequest userId(Long userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set from
         * @param from The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)
         * @return APIrebateBrokerCommissionHistoryRequest
         */
        public APIrebateBrokerCommissionHistoryRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIrebateBrokerCommissionHistoryRequest
         */
        public APIrebateBrokerCommissionHistoryRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Build call for rebateBrokerCommissionHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return rebateBrokerCommissionHistoryCall(limit, offset, userId, from, to, _callback);
        }

        /**
         * Execute rebateBrokerCommissionHistory request
         * @return List&lt;BrokerCommission&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<BrokerCommission> execute() throws ApiException {
            ApiResponse<List<BrokerCommission>> localVarResp = rebateBrokerCommissionHistoryWithHttpInfo(limit, offset, userId, from, to);
            return localVarResp.getData();
        }

        /**
         * Execute rebateBrokerCommissionHistory request with HTTP info returned
         * @return ApiResponse&lt;List&lt;BrokerCommission&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<BrokerCommission>> executeWithHttpInfo() throws ApiException {
            return rebateBrokerCommissionHistoryWithHttpInfo(limit, offset, userId, from, to);
        }

        /**
         * Execute rebateBrokerCommissionHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<BrokerCommission>> _callback) throws ApiException {
            return rebateBrokerCommissionHistoryAsync(limit, offset, userId, from, to, _callback);
        }
    }

    /**
     * The broker obtains the user&#39;s commission rebate records
     * Record time range cannot exceed 30 days
     * @return APIrebateBrokerCommissionHistoryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIrebateBrokerCommissionHistoryRequest rebateBrokerCommissionHistory() {
        return new APIrebateBrokerCommissionHistoryRequest();
    }

    private okhttp3.Call rebateBrokerTransactionHistoryCall(Integer limit, Integer offset, Long userId, Long from, Long to, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rebate/broker/transaction_history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rebateBrokerTransactionHistoryValidateBeforeCall(Integer limit, Integer offset, Long userId, Long from, Long to, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = rebateBrokerTransactionHistoryCall(limit, offset, userId, from, to, _callback);
        return localVarCall;
    }


    private ApiResponse<List<BrokerTransaction>> rebateBrokerTransactionHistoryWithHttpInfo(Integer limit, Integer offset, Long userId, Long from, Long to) throws ApiException {
        okhttp3.Call localVarCall = rebateBrokerTransactionHistoryValidateBeforeCall(limit, offset, userId, from, to, null);
        Type localVarReturnType = new TypeToken<List<BrokerTransaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rebateBrokerTransactionHistoryAsync(Integer limit, Integer offset, Long userId, Long from, Long to, final ApiCallback<List<BrokerTransaction>> _callback) throws ApiException {
        okhttp3.Call localVarCall = rebateBrokerTransactionHistoryValidateBeforeCall(limit, offset, userId, from, to, _callback);
        Type localVarReturnType = new TypeToken<List<BrokerTransaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrebateBrokerTransactionHistoryRequest {
        private Integer limit;
        private Integer offset;
        private Long userId;
        private Long from;
        private Long to;

        private APIrebateBrokerTransactionHistoryRequest() {
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIrebateBrokerTransactionHistoryRequest
         */
        public APIrebateBrokerTransactionHistoryRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset List offset, starting from 0 (optional, default to 0)
         * @return APIrebateBrokerTransactionHistoryRequest
         */
        public APIrebateBrokerTransactionHistoryRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set userId
         * @param userId User ID. If not specified, all user records will be returned (optional)
         * @return APIrebateBrokerTransactionHistoryRequest
         */
        public APIrebateBrokerTransactionHistoryRequest userId(Long userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set from
         * @param from The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)
         * @return APIrebateBrokerTransactionHistoryRequest
         */
        public APIrebateBrokerTransactionHistoryRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIrebateBrokerTransactionHistoryRequest
         */
        public APIrebateBrokerTransactionHistoryRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Build call for rebateBrokerTransactionHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return rebateBrokerTransactionHistoryCall(limit, offset, userId, from, to, _callback);
        }

        /**
         * Execute rebateBrokerTransactionHistory request
         * @return List&lt;BrokerTransaction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<BrokerTransaction> execute() throws ApiException {
            ApiResponse<List<BrokerTransaction>> localVarResp = rebateBrokerTransactionHistoryWithHttpInfo(limit, offset, userId, from, to);
            return localVarResp.getData();
        }

        /**
         * Execute rebateBrokerTransactionHistory request with HTTP info returned
         * @return ApiResponse&lt;List&lt;BrokerTransaction&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<BrokerTransaction>> executeWithHttpInfo() throws ApiException {
            return rebateBrokerTransactionHistoryWithHttpInfo(limit, offset, userId, from, to);
        }

        /**
         * Execute rebateBrokerTransactionHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<BrokerTransaction>> _callback) throws ApiException {
            return rebateBrokerTransactionHistoryAsync(limit, offset, userId, from, to, _callback);
        }
    }

    /**
     * The broker obtains the user&#39;s trading history
     * Record time range cannot exceed 30 days
     * @return APIrebateBrokerTransactionHistoryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIrebateBrokerTransactionHistoryRequest rebateBrokerTransactionHistory() {
        return new APIrebateBrokerTransactionHistoryRequest();
    }

    /**
     * Build call for rebateUserInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rebateUserInfoCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rebate/user/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rebateUserInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = rebateUserInfoCall(_callback);
        return localVarCall;
    }

    /**
     * User retrieves rebate information
     * 
     * @return List&lt;RebateUserInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public List<RebateUserInfo> rebateUserInfo() throws ApiException {
        ApiResponse<List<RebateUserInfo>> localVarResp = rebateUserInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * User retrieves rebate information
     * 
     * @return ApiResponse&lt;List&lt;RebateUserInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RebateUserInfo>> rebateUserInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = rebateUserInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RebateUserInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User retrieves rebate information (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rebateUserInfoAsync(final ApiCallback<List<RebateUserInfo>> _callback) throws ApiException {
        okhttp3.Call localVarCall = rebateUserInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RebateUserInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for userSubRelation
     * @param userIdList Query the user&#39;s ID list, split by,, if there are more than 100, take 100 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSubRelationCall(String userIdList, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rebate/user/sub_relation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userIdList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id_list", userIdList));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSubRelationValidateBeforeCall(String userIdList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userIdList' is set
        if (userIdList == null) {
            throw new ApiException("Missing the required parameter 'userIdList' when calling userSubRelation(Async)");
        }

        okhttp3.Call localVarCall = userSubRelationCall(userIdList, _callback);
        return localVarCall;
    }

    /**
     * User-subordinate relationship
     * Query whether the specified user is in the system
     * @param userIdList Query the user&#39;s ID list, split by,, if there are more than 100, take 100 (required)
     * @return UserSubRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public UserSubRelation userSubRelation(String userIdList) throws ApiException {
        ApiResponse<UserSubRelation> localVarResp = userSubRelationWithHttpInfo(userIdList);
        return localVarResp.getData();
    }

    /**
     * User-subordinate relationship
     * Query whether the specified user is in the system
     * @param userIdList Query the user&#39;s ID list, split by,, if there are more than 100, take 100 (required)
     * @return ApiResponse&lt;UserSubRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserSubRelation> userSubRelationWithHttpInfo(String userIdList) throws ApiException {
        okhttp3.Call localVarCall = userSubRelationValidateBeforeCall(userIdList, null);
        Type localVarReturnType = new TypeToken<UserSubRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User-subordinate relationship (asynchronously)
     * Query whether the specified user is in the system
     * @param userIdList Query the user&#39;s ID list, split by,, if there are more than 100, take 100 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSubRelationAsync(String userIdList, final ApiCallback<UserSubRelation> _callback) throws ApiException {
        okhttp3.Call localVarCall = userSubRelationValidateBeforeCall(userIdList, _callback);
        Type localVarReturnType = new TypeToken<UserSubRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

}
