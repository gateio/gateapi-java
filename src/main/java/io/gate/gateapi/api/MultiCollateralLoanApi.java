/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;

import com.google.gson.reflect.TypeToken;


import io.gate.gateapi.models.CollateralAdjust;
import io.gate.gateapi.models.CollateralAdjustRes;
import io.gate.gateapi.models.CollateralFixRate;
import io.gate.gateapi.models.CollateralLtv;
import io.gate.gateapi.models.CreateMultiCollateralOrder;
import io.gate.gateapi.models.CurrencyQuota;
import io.gate.gateapi.models.MultiCollateralCurrency;
import io.gate.gateapi.models.MultiCollateralOrder;
import io.gate.gateapi.models.MultiCollateralRecord;
import io.gate.gateapi.models.MultiRepayRecord;
import io.gate.gateapi.models.MultiRepayResp;
import io.gate.gateapi.models.OrderResp;
import io.gate.gateapi.models.RepayMultiLoan;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MultiCollateralLoanApi {
    private ApiClient localVarApiClient;

    public MultiCollateralLoanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MultiCollateralLoanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call listMultiCollateralOrdersCall(Integer page, Integer limit, String sort, String orderType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/multi_collateral/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (orderType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_type", orderType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultiCollateralOrdersValidateBeforeCall(Integer page, Integer limit, String sort, String orderType, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listMultiCollateralOrdersCall(page, limit, sort, orderType, _callback);
        return localVarCall;
    }


    private ApiResponse<List<MultiCollateralOrder>> listMultiCollateralOrdersWithHttpInfo(Integer page, Integer limit, String sort, String orderType) throws ApiException {
        okhttp3.Call localVarCall = listMultiCollateralOrdersValidateBeforeCall(page, limit, sort, orderType, null);
        Type localVarReturnType = new TypeToken<List<MultiCollateralOrder>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMultiCollateralOrdersAsync(Integer page, Integer limit, String sort, String orderType, final ApiCallback<List<MultiCollateralOrder>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listMultiCollateralOrdersValidateBeforeCall(page, limit, sort, orderType, _callback);
        Type localVarReturnType = new TypeToken<List<MultiCollateralOrder>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistMultiCollateralOrdersRequest {
        private Integer page;
        private Integer limit;
        private String sort;
        private String orderType;

        private APIlistMultiCollateralOrdersRequest() {
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistMultiCollateralOrdersRequest
         */
        public APIlistMultiCollateralOrdersRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 10)
         * @return APIlistMultiCollateralOrdersRequest
         */
        public APIlistMultiCollateralOrdersRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set sort
         * @param sort Sort types: time_desc - default sorting by creation time in descending order, ltv_asc - ascending order of ltv, ltv_desc - descending order of ltv. (optional)
         * @return APIlistMultiCollateralOrdersRequest
         */
        public APIlistMultiCollateralOrdersRequest sort(String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set orderType
         * @param orderType Order type, current - query current orders, fixed - query fixed orders. If not specified, default to querying current orders (optional)
         * @return APIlistMultiCollateralOrdersRequest
         */
        public APIlistMultiCollateralOrdersRequest orderType(String orderType) {
            this.orderType = orderType;
            return this;
        }

        /**
         * Build call for listMultiCollateralOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMultiCollateralOrdersCall(page, limit, sort, orderType, _callback);
        }

        /**
         * Execute listMultiCollateralOrders request
         * @return List&lt;MultiCollateralOrder&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<MultiCollateralOrder> execute() throws ApiException {
            ApiResponse<List<MultiCollateralOrder>> localVarResp = listMultiCollateralOrdersWithHttpInfo(page, limit, sort, orderType);
            return localVarResp.getData();
        }

        /**
         * Execute listMultiCollateralOrders request with HTTP info returned
         * @return ApiResponse&lt;List&lt;MultiCollateralOrder&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<MultiCollateralOrder>> executeWithHttpInfo() throws ApiException {
            return listMultiCollateralOrdersWithHttpInfo(page, limit, sort, orderType);
        }

        /**
         * Execute listMultiCollateralOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<MultiCollateralOrder>> _callback) throws ApiException {
            return listMultiCollateralOrdersAsync(page, limit, sort, orderType, _callback);
        }
    }

    /**
     * List Multi-Collateral Orders
     * 
     * @return APIlistMultiCollateralOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistMultiCollateralOrdersRequest listMultiCollateralOrders() {
        return new APIlistMultiCollateralOrdersRequest();
    }

    /**
     * Build call for createMultiCollateral
     * @param createMultiCollateralOrder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMultiCollateralCall(CreateMultiCollateralOrder createMultiCollateralOrder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createMultiCollateralOrder;

        // create path and map variables
        String localVarPath = "/loan/multi_collateral/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMultiCollateralValidateBeforeCall(CreateMultiCollateralOrder createMultiCollateralOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createMultiCollateralOrder' is set
        if (createMultiCollateralOrder == null) {
            throw new ApiException("Missing the required parameter 'createMultiCollateralOrder' when calling createMultiCollateral(Async)");
        }

        okhttp3.Call localVarCall = createMultiCollateralCall(createMultiCollateralOrder, _callback);
        return localVarCall;
    }

    /**
     * Create Multi-Collateral Order
     * 
     * @param createMultiCollateralOrder  (required)
     * @return OrderResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderResp createMultiCollateral(CreateMultiCollateralOrder createMultiCollateralOrder) throws ApiException {
        ApiResponse<OrderResp> localVarResp = createMultiCollateralWithHttpInfo(createMultiCollateralOrder);
        return localVarResp.getData();
    }

    /**
     * Create Multi-Collateral Order
     * 
     * @param createMultiCollateralOrder  (required)
     * @return ApiResponse&lt;OrderResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderResp> createMultiCollateralWithHttpInfo(CreateMultiCollateralOrder createMultiCollateralOrder) throws ApiException {
        okhttp3.Call localVarCall = createMultiCollateralValidateBeforeCall(createMultiCollateralOrder, null);
        Type localVarReturnType = new TypeToken<OrderResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Multi-Collateral Order (asynchronously)
     * 
     * @param createMultiCollateralOrder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMultiCollateralAsync(CreateMultiCollateralOrder createMultiCollateralOrder, final ApiCallback<OrderResp> _callback) throws ApiException {
        okhttp3.Call localVarCall = createMultiCollateralValidateBeforeCall(createMultiCollateralOrder, _callback);
        Type localVarReturnType = new TypeToken<OrderResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMultiCollateralOrderDetail
     * @param orderId Order ID returned on successful order creation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiCollateralOrderDetailCall(String orderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/multi_collateral/orders/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", localVarApiClient.escapeString(orderId));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultiCollateralOrderDetailValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getMultiCollateralOrderDetail(Async)");
        }

        okhttp3.Call localVarCall = getMultiCollateralOrderDetailCall(orderId, _callback);
        return localVarCall;
    }

    /**
     * Get Multi-Collateral Order Detail
     * 
     * @param orderId Order ID returned on successful order creation (required)
     * @return MultiCollateralOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public MultiCollateralOrder getMultiCollateralOrderDetail(String orderId) throws ApiException {
        ApiResponse<MultiCollateralOrder> localVarResp = getMultiCollateralOrderDetailWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Get Multi-Collateral Order Detail
     * 
     * @param orderId Order ID returned on successful order creation (required)
     * @return ApiResponse&lt;MultiCollateralOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiCollateralOrder> getMultiCollateralOrderDetailWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getMultiCollateralOrderDetailValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<MultiCollateralOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Multi-Collateral Order Detail (asynchronously)
     * 
     * @param orderId Order ID returned on successful order creation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiCollateralOrderDetailAsync(String orderId, final ApiCallback<MultiCollateralOrder> _callback) throws ApiException {
        okhttp3.Call localVarCall = getMultiCollateralOrderDetailValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<MultiCollateralOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listMultiRepayRecordsCall(String type, String borrowCurrency, Integer page, Integer limit, Long from, Long to, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/multi_collateral/repay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (borrowCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("borrow_currency", borrowCurrency));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultiRepayRecordsValidateBeforeCall(String type, String borrowCurrency, Integer page, Integer limit, Long from, Long to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling listMultiRepayRecords(Async)");
        }

        okhttp3.Call localVarCall = listMultiRepayRecordsCall(type, borrowCurrency, page, limit, from, to, _callback);
        return localVarCall;
    }


    private ApiResponse<List<MultiRepayRecord>> listMultiRepayRecordsWithHttpInfo(String type, String borrowCurrency, Integer page, Integer limit, Long from, Long to) throws ApiException {
        okhttp3.Call localVarCall = listMultiRepayRecordsValidateBeforeCall(type, borrowCurrency, page, limit, from, to, null);
        Type localVarReturnType = new TypeToken<List<MultiRepayRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMultiRepayRecordsAsync(String type, String borrowCurrency, Integer page, Integer limit, Long from, Long to, final ApiCallback<List<MultiRepayRecord>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listMultiRepayRecordsValidateBeforeCall(type, borrowCurrency, page, limit, from, to, _callback);
        Type localVarReturnType = new TypeToken<List<MultiRepayRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistMultiRepayRecordsRequest {
        private final String type;
        private String borrowCurrency;
        private Integer page;
        private Integer limit;
        private Long from;
        private Long to;

        private APIlistMultiRepayRecordsRequest(String type) {
            this.type = type;
        }

        /**
         * Set borrowCurrency
         * @param borrowCurrency Borrowed currency (optional)
         * @return APIlistMultiRepayRecordsRequest
         */
        public APIlistMultiRepayRecordsRequest borrowCurrency(String borrowCurrency) {
            this.borrowCurrency = borrowCurrency;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistMultiRepayRecordsRequest
         */
        public APIlistMultiRepayRecordsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 10)
         * @return APIlistMultiRepayRecordsRequest
         */
        public APIlistMultiRepayRecordsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set from
         * @param from Start timestamp of the query (optional)
         * @return APIlistMultiRepayRecordsRequest
         */
        public APIlistMultiRepayRecordsRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIlistMultiRepayRecordsRequest
         */
        public APIlistMultiRepayRecordsRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Build call for listMultiRepayRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMultiRepayRecordsCall(type, borrowCurrency, page, limit, from, to, _callback);
        }

        /**
         * Execute listMultiRepayRecords request
         * @return List&lt;MultiRepayRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<MultiRepayRecord> execute() throws ApiException {
            ApiResponse<List<MultiRepayRecord>> localVarResp = listMultiRepayRecordsWithHttpInfo(type, borrowCurrency, page, limit, from, to);
            return localVarResp.getData();
        }

        /**
         * Execute listMultiRepayRecords request with HTTP info returned
         * @return ApiResponse&lt;List&lt;MultiRepayRecord&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<MultiRepayRecord>> executeWithHttpInfo() throws ApiException {
            return listMultiRepayRecordsWithHttpInfo(type, borrowCurrency, page, limit, from, to);
        }

        /**
         * Execute listMultiRepayRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<MultiRepayRecord>> _callback) throws ApiException {
            return listMultiRepayRecordsAsync(type, borrowCurrency, page, limit, from, to, _callback);
        }
    }

    /**
     * List Multi-Collateral Repay Records
     * 
     * @param type Operation type: repay - Regular repayment, liquidate - Liquidation (required)
     * @return APIlistMultiRepayRecordsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistMultiRepayRecordsRequest listMultiRepayRecords(String type) {
        return new APIlistMultiRepayRecordsRequest(type);
    }

    /**
     * Build call for repayMultiCollateralLoan
     * @param repayMultiLoan  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repayMultiCollateralLoanCall(RepayMultiLoan repayMultiLoan, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = repayMultiLoan;

        // create path and map variables
        String localVarPath = "/loan/multi_collateral/repay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repayMultiCollateralLoanValidateBeforeCall(RepayMultiLoan repayMultiLoan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repayMultiLoan' is set
        if (repayMultiLoan == null) {
            throw new ApiException("Missing the required parameter 'repayMultiLoan' when calling repayMultiCollateralLoan(Async)");
        }

        okhttp3.Call localVarCall = repayMultiCollateralLoanCall(repayMultiLoan, _callback);
        return localVarCall;
    }

    /**
     * Repay Multi-Collateral Loan
     * 
     * @param repayMultiLoan  (required)
     * @return MultiRepayResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public MultiRepayResp repayMultiCollateralLoan(RepayMultiLoan repayMultiLoan) throws ApiException {
        ApiResponse<MultiRepayResp> localVarResp = repayMultiCollateralLoanWithHttpInfo(repayMultiLoan);
        return localVarResp.getData();
    }

    /**
     * Repay Multi-Collateral Loan
     * 
     * @param repayMultiLoan  (required)
     * @return ApiResponse&lt;MultiRepayResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiRepayResp> repayMultiCollateralLoanWithHttpInfo(RepayMultiLoan repayMultiLoan) throws ApiException {
        okhttp3.Call localVarCall = repayMultiCollateralLoanValidateBeforeCall(repayMultiLoan, null);
        Type localVarReturnType = new TypeToken<MultiRepayResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Repay Multi-Collateral Loan (asynchronously)
     * 
     * @param repayMultiLoan  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repayMultiCollateralLoanAsync(RepayMultiLoan repayMultiLoan, final ApiCallback<MultiRepayResp> _callback) throws ApiException {
        okhttp3.Call localVarCall = repayMultiCollateralLoanValidateBeforeCall(repayMultiLoan, _callback);
        Type localVarReturnType = new TypeToken<MultiRepayResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listMultiCollateralRecordsCall(Integer page, Integer limit, Long from, Long to, String collateralCurrency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/multi_collateral/mortgage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (collateralCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collateral_currency", collateralCurrency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultiCollateralRecordsValidateBeforeCall(Integer page, Integer limit, Long from, Long to, String collateralCurrency, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listMultiCollateralRecordsCall(page, limit, from, to, collateralCurrency, _callback);
        return localVarCall;
    }


    private ApiResponse<List<MultiCollateralRecord>> listMultiCollateralRecordsWithHttpInfo(Integer page, Integer limit, Long from, Long to, String collateralCurrency) throws ApiException {
        okhttp3.Call localVarCall = listMultiCollateralRecordsValidateBeforeCall(page, limit, from, to, collateralCurrency, null);
        Type localVarReturnType = new TypeToken<List<MultiCollateralRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMultiCollateralRecordsAsync(Integer page, Integer limit, Long from, Long to, String collateralCurrency, final ApiCallback<List<MultiCollateralRecord>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listMultiCollateralRecordsValidateBeforeCall(page, limit, from, to, collateralCurrency, _callback);
        Type localVarReturnType = new TypeToken<List<MultiCollateralRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistMultiCollateralRecordsRequest {
        private Integer page;
        private Integer limit;
        private Long from;
        private Long to;
        private String collateralCurrency;

        private APIlistMultiCollateralRecordsRequest() {
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistMultiCollateralRecordsRequest
         */
        public APIlistMultiCollateralRecordsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 10)
         * @return APIlistMultiCollateralRecordsRequest
         */
        public APIlistMultiCollateralRecordsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set from
         * @param from Start timestamp of the query (optional)
         * @return APIlistMultiCollateralRecordsRequest
         */
        public APIlistMultiCollateralRecordsRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIlistMultiCollateralRecordsRequest
         */
        public APIlistMultiCollateralRecordsRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set collateralCurrency
         * @param collateralCurrency Collateral (optional)
         * @return APIlistMultiCollateralRecordsRequest
         */
        public APIlistMultiCollateralRecordsRequest collateralCurrency(String collateralCurrency) {
            this.collateralCurrency = collateralCurrency;
            return this;
        }

        /**
         * Build call for listMultiCollateralRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMultiCollateralRecordsCall(page, limit, from, to, collateralCurrency, _callback);
        }

        /**
         * Execute listMultiCollateralRecords request
         * @return List&lt;MultiCollateralRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<MultiCollateralRecord> execute() throws ApiException {
            ApiResponse<List<MultiCollateralRecord>> localVarResp = listMultiCollateralRecordsWithHttpInfo(page, limit, from, to, collateralCurrency);
            return localVarResp.getData();
        }

        /**
         * Execute listMultiCollateralRecords request with HTTP info returned
         * @return ApiResponse&lt;List&lt;MultiCollateralRecord&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<MultiCollateralRecord>> executeWithHttpInfo() throws ApiException {
            return listMultiCollateralRecordsWithHttpInfo(page, limit, from, to, collateralCurrency);
        }

        /**
         * Execute listMultiCollateralRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<MultiCollateralRecord>> _callback) throws ApiException {
            return listMultiCollateralRecordsAsync(page, limit, from, to, collateralCurrency, _callback);
        }
    }

    /**
     * Query collateral adjustment records
     * 
     * @return APIlistMultiCollateralRecordsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistMultiCollateralRecordsRequest listMultiCollateralRecords() {
        return new APIlistMultiCollateralRecordsRequest();
    }

    /**
     * Build call for operateMultiCollateral
     * @param collateralAdjust  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operateMultiCollateralCall(CollateralAdjust collateralAdjust, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collateralAdjust;

        // create path and map variables
        String localVarPath = "/loan/multi_collateral/mortgage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operateMultiCollateralValidateBeforeCall(CollateralAdjust collateralAdjust, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collateralAdjust' is set
        if (collateralAdjust == null) {
            throw new ApiException("Missing the required parameter 'collateralAdjust' when calling operateMultiCollateral(Async)");
        }

        okhttp3.Call localVarCall = operateMultiCollateralCall(collateralAdjust, _callback);
        return localVarCall;
    }

    /**
     * Operate Multi-Collateral
     * 
     * @param collateralAdjust  (required)
     * @return CollateralAdjustRes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public CollateralAdjustRes operateMultiCollateral(CollateralAdjust collateralAdjust) throws ApiException {
        ApiResponse<CollateralAdjustRes> localVarResp = operateMultiCollateralWithHttpInfo(collateralAdjust);
        return localVarResp.getData();
    }

    /**
     * Operate Multi-Collateral
     * 
     * @param collateralAdjust  (required)
     * @return ApiResponse&lt;CollateralAdjustRes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollateralAdjustRes> operateMultiCollateralWithHttpInfo(CollateralAdjust collateralAdjust) throws ApiException {
        okhttp3.Call localVarCall = operateMultiCollateralValidateBeforeCall(collateralAdjust, null);
        Type localVarReturnType = new TypeToken<CollateralAdjustRes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Operate Multi-Collateral (asynchronously)
     * 
     * @param collateralAdjust  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operateMultiCollateralAsync(CollateralAdjust collateralAdjust, final ApiCallback<CollateralAdjustRes> _callback) throws ApiException {
        okhttp3.Call localVarCall = operateMultiCollateralValidateBeforeCall(collateralAdjust, _callback);
        Type localVarReturnType = new TypeToken<CollateralAdjustRes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listUserCurrencyQuota
     * @param type Currency types: collateral - collateral currency, borrow - borrowing currency. (required)
     * @param currency When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserCurrencyQuotaCall(String type, String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/multi_collateral/currency_quota";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserCurrencyQuotaValidateBeforeCall(String type, String currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling listUserCurrencyQuota(Async)");
        }

        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling listUserCurrencyQuota(Async)");
        }

        okhttp3.Call localVarCall = listUserCurrencyQuotaCall(type, currency, _callback);
        return localVarCall;
    }

    /**
     * List User Currency Quota
     * 
     * @param type Currency types: collateral - collateral currency, borrow - borrowing currency. (required)
     * @param currency When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided. (required)
     * @return List&lt;CurrencyQuota&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public List<CurrencyQuota> listUserCurrencyQuota(String type, String currency) throws ApiException {
        ApiResponse<List<CurrencyQuota>> localVarResp = listUserCurrencyQuotaWithHttpInfo(type, currency);
        return localVarResp.getData();
    }

    /**
     * List User Currency Quota
     * 
     * @param type Currency types: collateral - collateral currency, borrow - borrowing currency. (required)
     * @param currency When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided. (required)
     * @return ApiResponse&lt;List&lt;CurrencyQuota&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CurrencyQuota>> listUserCurrencyQuotaWithHttpInfo(String type, String currency) throws ApiException {
        okhttp3.Call localVarCall = listUserCurrencyQuotaValidateBeforeCall(type, currency, null);
        Type localVarReturnType = new TypeToken<List<CurrencyQuota>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List User Currency Quota (asynchronously)
     * 
     * @param type Currency types: collateral - collateral currency, borrow - borrowing currency. (required)
     * @param currency When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserCurrencyQuotaAsync(String type, String currency, final ApiCallback<List<CurrencyQuota>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listUserCurrencyQuotaValidateBeforeCall(type, currency, _callback);
        Type localVarReturnType = new TypeToken<List<CurrencyQuota>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listMultiCollateralCurrencies
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMultiCollateralCurrenciesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/multi_collateral/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultiCollateralCurrenciesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listMultiCollateralCurrenciesCall(_callback);
        return localVarCall;
    }

    /**
     * Query supported borrowing and collateral currencies in Multi-Collateral 
     * 
     * @return MultiCollateralCurrency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public MultiCollateralCurrency listMultiCollateralCurrencies() throws ApiException {
        ApiResponse<MultiCollateralCurrency> localVarResp = listMultiCollateralCurrenciesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Query supported borrowing and collateral currencies in Multi-Collateral 
     * 
     * @return ApiResponse&lt;MultiCollateralCurrency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiCollateralCurrency> listMultiCollateralCurrenciesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listMultiCollateralCurrenciesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MultiCollateralCurrency>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query supported borrowing and collateral currencies in Multi-Collateral  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMultiCollateralCurrenciesAsync(final ApiCallback<MultiCollateralCurrency> _callback) throws ApiException {
        okhttp3.Call localVarCall = listMultiCollateralCurrenciesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MultiCollateralCurrency>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMultiCollateralLtv
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiCollateralLtvCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/multi_collateral/ltv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultiCollateralLtvValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getMultiCollateralLtvCall(_callback);
        return localVarCall;
    }

    /**
     * Get Multi-Collateral ratio
     * The Multi-Collateral ratio is fixed, irrespective of the currency.
     * @return CollateralLtv
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public CollateralLtv getMultiCollateralLtv() throws ApiException {
        ApiResponse<CollateralLtv> localVarResp = getMultiCollateralLtvWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Multi-Collateral ratio
     * The Multi-Collateral ratio is fixed, irrespective of the currency.
     * @return ApiResponse&lt;CollateralLtv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollateralLtv> getMultiCollateralLtvWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMultiCollateralLtvValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CollateralLtv>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Multi-Collateral ratio (asynchronously)
     * The Multi-Collateral ratio is fixed, irrespective of the currency.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiCollateralLtvAsync(final ApiCallback<CollateralLtv> _callback) throws ApiException {
        okhttp3.Call localVarCall = getMultiCollateralLtvValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CollateralLtv>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMultiCollateralFixRate
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiCollateralFixRateCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/multi_collateral/fixed_rate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultiCollateralFixRateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getMultiCollateralFixRateCall(_callback);
        return localVarCall;
    }

    /**
     * Query fixed interest rates for the currency for 7 days and 30 days
     * 
     * @return List&lt;CollateralFixRate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public List<CollateralFixRate> getMultiCollateralFixRate() throws ApiException {
        ApiResponse<List<CollateralFixRate>> localVarResp = getMultiCollateralFixRateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Query fixed interest rates for the currency for 7 days and 30 days
     * 
     * @return ApiResponse&lt;List&lt;CollateralFixRate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CollateralFixRate>> getMultiCollateralFixRateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMultiCollateralFixRateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CollateralFixRate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query fixed interest rates for the currency for 7 days and 30 days (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiCollateralFixRateAsync(final ApiCallback<List<CollateralFixRate>> _callback) throws ApiException {
        okhttp3.Call localVarCall = getMultiCollateralFixRateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CollateralFixRate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

}
