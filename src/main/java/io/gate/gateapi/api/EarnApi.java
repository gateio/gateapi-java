/*
 * Gate API v4
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;

import com.google.gson.reflect.TypeToken;


import io.gate.gateapi.models.DualGetOrders;
import io.gate.gateapi.models.DualGetPlans;
import io.gate.gateapi.models.Eth2RateList;
import io.gate.gateapi.models.Eth2Swap;
import io.gate.gateapi.models.FindCoin;
import io.gate.gateapi.models.PlaceDualInvestmentOrder;
import io.gate.gateapi.models.StructuredBuy;
import io.gate.gateapi.models.StructuredGetProjectList;
import io.gate.gateapi.models.StructuredOrderList;
import io.gate.gateapi.models.SwapCoin;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EarnApi {
    private ApiClient localVarApiClient;

    public EarnApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EarnApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for swapETH2
     * @param eth2Swap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapETH2Call(Eth2Swap eth2Swap, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = eth2Swap;

        // create path and map variables
        String localVarPath = "/earn/staking/eth2/swap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swapETH2ValidateBeforeCall(Eth2Swap eth2Swap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eth2Swap' is set
        if (eth2Swap == null) {
            throw new ApiException("Missing the required parameter 'eth2Swap' when calling swapETH2(Async)");
        }

        okhttp3.Call localVarCall = swapETH2Call(eth2Swap, _callback);
        return localVarCall;
    }

    /**
     * ETH2 swap
     * 
     * @param eth2Swap  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public void swapETH2(Eth2Swap eth2Swap) throws ApiException {
        swapETH2WithHttpInfo(eth2Swap);
    }

    /**
     * ETH2 swap
     * 
     * @param eth2Swap  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> swapETH2WithHttpInfo(Eth2Swap eth2Swap) throws ApiException {
        okhttp3.Call localVarCall = swapETH2ValidateBeforeCall(eth2Swap, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * ETH2 swap (asynchronously)
     * 
     * @param eth2Swap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapETH2Async(Eth2Swap eth2Swap, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = swapETH2ValidateBeforeCall(eth2Swap, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for rateListETH2
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rateListETH2Call(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/earn/staking/eth2/rate_records";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rateListETH2ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = rateListETH2Call(_callback);
        return localVarCall;
    }

    /**
     * ETH2 historical rate of return query
     * Check the ETH earnings rate record for the last 31 days
     * @return List&lt;Eth2RateList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public List<Eth2RateList> rateListETH2() throws ApiException {
        ApiResponse<List<Eth2RateList>> localVarResp = rateListETH2WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * ETH2 historical rate of return query
     * Check the ETH earnings rate record for the last 31 days
     * @return ApiResponse&lt;List&lt;Eth2RateList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Eth2RateList>> rateListETH2WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = rateListETH2ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Eth2RateList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ETH2 historical rate of return query (asynchronously)
     * Check the ETH earnings rate record for the last 31 days
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rateListETH2Async(final ApiCallback<List<Eth2RateList>> _callback) throws ApiException {
        okhttp3.Call localVarCall = rateListETH2ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Eth2RateList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listDualInvestmentPlansCall(Long planId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/earn/dual/investment_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plan_id", planId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDualInvestmentPlansValidateBeforeCall(Long planId, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listDualInvestmentPlansCall(planId, _callback);
        return localVarCall;
    }


    private ApiResponse<List<DualGetPlans>> listDualInvestmentPlansWithHttpInfo(Long planId) throws ApiException {
        okhttp3.Call localVarCall = listDualInvestmentPlansValidateBeforeCall(planId, null);
        Type localVarReturnType = new TypeToken<List<DualGetPlans>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDualInvestmentPlansAsync(Long planId, final ApiCallback<List<DualGetPlans>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listDualInvestmentPlansValidateBeforeCall(planId, _callback);
        Type localVarReturnType = new TypeToken<List<DualGetPlans>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistDualInvestmentPlansRequest {
        private Long planId;

        private APIlistDualInvestmentPlansRequest() {
        }

        /**
         * Set planId
         * @param planId Financial project id (optional)
         * @return APIlistDualInvestmentPlansRequest
         */
        public APIlistDualInvestmentPlansRequest planId(Long planId) {
            this.planId = planId;
            return this;
        }

        /**
         * Build call for listDualInvestmentPlans
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDualInvestmentPlansCall(planId, _callback);
        }

        /**
         * Execute listDualInvestmentPlans request
         * @return List&lt;DualGetPlans&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public List<DualGetPlans> execute() throws ApiException {
            ApiResponse<List<DualGetPlans>> localVarResp = listDualInvestmentPlansWithHttpInfo(planId);
            return localVarResp.getData();
        }

        /**
         * Execute listDualInvestmentPlans request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DualGetPlans&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DualGetPlans>> executeWithHttpInfo() throws ApiException {
            return listDualInvestmentPlansWithHttpInfo(planId);
        }

        /**
         * Execute listDualInvestmentPlans request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DualGetPlans>> _callback) throws ApiException {
            return listDualInvestmentPlansAsync(planId, _callback);
        }
    }

    /**
     * Dual Investment product list
     * 
     * @return APIlistDualInvestmentPlansRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public APIlistDualInvestmentPlansRequest listDualInvestmentPlans() {
        return new APIlistDualInvestmentPlansRequest();
    }

    private okhttp3.Call listDualOrdersCall(Long from, Long to, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/earn/dual/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDualOrdersValidateBeforeCall(Long from, Long to, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listDualOrdersCall(from, to, page, limit, _callback);
        return localVarCall;
    }


    private ApiResponse<List<DualGetOrders>> listDualOrdersWithHttpInfo(Long from, Long to, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listDualOrdersValidateBeforeCall(from, to, page, limit, null);
        Type localVarReturnType = new TypeToken<List<DualGetOrders>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDualOrdersAsync(Long from, Long to, Integer page, Integer limit, final ApiCallback<List<DualGetOrders>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listDualOrdersValidateBeforeCall(from, to, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<DualGetOrders>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistDualOrdersRequest {
        private Long from;
        private Long to;
        private Integer page;
        private Integer limit;

        private APIlistDualOrdersRequest() {
        }

        /**
         * Set from
         * @param from Start checkout time (optional)
         * @return APIlistDualOrdersRequest
         */
        public APIlistDualOrdersRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to End settlement time (optional)
         * @return APIlistDualOrdersRequest
         */
        public APIlistDualOrdersRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistDualOrdersRequest
         */
        public APIlistDualOrdersRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIlistDualOrdersRequest
         */
        public APIlistDualOrdersRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for listDualOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDualOrdersCall(from, to, page, limit, _callback);
        }

        /**
         * Execute listDualOrders request
         * @return List&lt;DualGetOrders&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public List<DualGetOrders> execute() throws ApiException {
            ApiResponse<List<DualGetOrders>> localVarResp = listDualOrdersWithHttpInfo(from, to, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute listDualOrders request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DualGetOrders&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DualGetOrders>> executeWithHttpInfo() throws ApiException {
            return listDualOrdersWithHttpInfo(from, to, page, limit);
        }

        /**
         * Execute listDualOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DualGetOrders>> _callback) throws ApiException {
            return listDualOrdersAsync(from, to, page, limit, _callback);
        }
    }

    /**
     * Dual Investment order list
     * 
     * @return APIlistDualOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public APIlistDualOrdersRequest listDualOrders() {
        return new APIlistDualOrdersRequest();
    }

    /**
     * Build call for placeDualOrder
     * @param placeDualInvestmentOrder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeDualOrderCall(PlaceDualInvestmentOrder placeDualInvestmentOrder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = placeDualInvestmentOrder;

        // create path and map variables
        String localVarPath = "/earn/dual/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeDualOrderValidateBeforeCall(PlaceDualInvestmentOrder placeDualInvestmentOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeDualInvestmentOrder' is set
        if (placeDualInvestmentOrder == null) {
            throw new ApiException("Missing the required parameter 'placeDualInvestmentOrder' when calling placeDualOrder(Async)");
        }

        okhttp3.Call localVarCall = placeDualOrderCall(placeDualInvestmentOrder, _callback);
        return localVarCall;
    }

    /**
     * Place Dual Investment order
     * 
     * @param placeDualInvestmentOrder  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void placeDualOrder(PlaceDualInvestmentOrder placeDualInvestmentOrder) throws ApiException {
        placeDualOrderWithHttpInfo(placeDualInvestmentOrder);
    }

    /**
     * Place Dual Investment order
     * 
     * @param placeDualInvestmentOrder  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> placeDualOrderWithHttpInfo(PlaceDualInvestmentOrder placeDualInvestmentOrder) throws ApiException {
        okhttp3.Call localVarCall = placeDualOrderValidateBeforeCall(placeDualInvestmentOrder, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Place Dual Investment order (asynchronously)
     * 
     * @param placeDualInvestmentOrder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeDualOrderAsync(PlaceDualInvestmentOrder placeDualInvestmentOrder, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = placeDualOrderValidateBeforeCall(placeDualInvestmentOrder, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call listStructuredProductsCall(String status, String type, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/earn/structured/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStructuredProductsValidateBeforeCall(String status, String type, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling listStructuredProducts(Async)");
        }

        okhttp3.Call localVarCall = listStructuredProductsCall(status, type, page, limit, _callback);
        return localVarCall;
    }


    private ApiResponse<List<StructuredGetProjectList>> listStructuredProductsWithHttpInfo(String status, String type, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listStructuredProductsValidateBeforeCall(status, type, page, limit, null);
        Type localVarReturnType = new TypeToken<List<StructuredGetProjectList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listStructuredProductsAsync(String status, String type, Integer page, Integer limit, final ApiCallback<List<StructuredGetProjectList>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listStructuredProductsValidateBeforeCall(status, type, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<StructuredGetProjectList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistStructuredProductsRequest {
        private final String status;
        private String type;
        private Integer page;
        private Integer limit;

        private APIlistStructuredProductsRequest(String status) {
            this.status = status;
        }

        /**
         * Set type
         * @param type Product Type (default all)  &#x60;SharkFin2.0&#x60;-SharkFin  &#x60;BullishSharkFin&#x60;-BullishSharkFin  &#x60;BearishSharkFin&#x60;-BearishSharkFin &#x60;DoubleNoTouch&#x60;-DoubleNoTouch &#x60;RangeAccrual&#x60;-RangeAccrual &#x60;SnowBall&#x60;-SnowBall (optional)
         * @return APIlistStructuredProductsRequest
         */
        public APIlistStructuredProductsRequest type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistStructuredProductsRequest
         */
        public APIlistStructuredProductsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIlistStructuredProductsRequest
         */
        public APIlistStructuredProductsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for listStructuredProducts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listStructuredProductsCall(status, type, page, limit, _callback);
        }

        /**
         * Execute listStructuredProducts request
         * @return List&lt;StructuredGetProjectList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public List<StructuredGetProjectList> execute() throws ApiException {
            ApiResponse<List<StructuredGetProjectList>> localVarResp = listStructuredProductsWithHttpInfo(status, type, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute listStructuredProducts request with HTTP info returned
         * @return ApiResponse&lt;List&lt;StructuredGetProjectList&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<StructuredGetProjectList>> executeWithHttpInfo() throws ApiException {
            return listStructuredProductsWithHttpInfo(status, type, page, limit);
        }

        /**
         * Execute listStructuredProducts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<StructuredGetProjectList>> _callback) throws ApiException {
            return listStructuredProductsAsync(status, type, page, limit, _callback);
        }
    }

    /**
     * Structured Product List
     * 
     * @param status Status (default: all)  &#x60;in_process&#x60;-processing  &#x60;will_begin&#x60;-unstarted  &#x60;wait_settlement&#x60;-unsettled  &#x60;done&#x60;-finish (required)
     * @return APIlistStructuredProductsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public APIlistStructuredProductsRequest listStructuredProducts(String status) {
        return new APIlistStructuredProductsRequest(status);
    }

    private okhttp3.Call listStructuredOrdersCall(Long from, Long to, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/earn/structured/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStructuredOrdersValidateBeforeCall(Long from, Long to, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listStructuredOrdersCall(from, to, page, limit, _callback);
        return localVarCall;
    }


    private ApiResponse<List<StructuredOrderList>> listStructuredOrdersWithHttpInfo(Long from, Long to, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listStructuredOrdersValidateBeforeCall(from, to, page, limit, null);
        Type localVarReturnType = new TypeToken<List<StructuredOrderList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listStructuredOrdersAsync(Long from, Long to, Integer page, Integer limit, final ApiCallback<List<StructuredOrderList>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listStructuredOrdersValidateBeforeCall(from, to, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<StructuredOrderList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistStructuredOrdersRequest {
        private Long from;
        private Long to;
        private Integer page;
        private Integer limit;

        private APIlistStructuredOrdersRequest() {
        }

        /**
         * Set from
         * @param from Start timestamp (optional)
         * @return APIlistStructuredOrdersRequest
         */
        public APIlistStructuredOrdersRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to End timestamp (optional)
         * @return APIlistStructuredOrdersRequest
         */
        public APIlistStructuredOrdersRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistStructuredOrdersRequest
         */
        public APIlistStructuredOrdersRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIlistStructuredOrdersRequest
         */
        public APIlistStructuredOrdersRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for listStructuredOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listStructuredOrdersCall(from, to, page, limit, _callback);
        }

        /**
         * Execute listStructuredOrders request
         * @return List&lt;StructuredOrderList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public List<StructuredOrderList> execute() throws ApiException {
            ApiResponse<List<StructuredOrderList>> localVarResp = listStructuredOrdersWithHttpInfo(from, to, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute listStructuredOrders request with HTTP info returned
         * @return ApiResponse&lt;List&lt;StructuredOrderList&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<StructuredOrderList>> executeWithHttpInfo() throws ApiException {
            return listStructuredOrdersWithHttpInfo(from, to, page, limit);
        }

        /**
         * Execute listStructuredOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<StructuredOrderList>> _callback) throws ApiException {
            return listStructuredOrdersAsync(from, to, page, limit, _callback);
        }
    }

    /**
     * Structured Product Order List
     * 
     * @return APIlistStructuredOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public APIlistStructuredOrdersRequest listStructuredOrders() {
        return new APIlistStructuredOrdersRequest();
    }

    /**
     * Build call for placeStructuredOrder
     * @param structuredBuy  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeStructuredOrderCall(StructuredBuy structuredBuy, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = structuredBuy;

        // create path and map variables
        String localVarPath = "/earn/structured/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeStructuredOrderValidateBeforeCall(StructuredBuy structuredBuy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'structuredBuy' is set
        if (structuredBuy == null) {
            throw new ApiException("Missing the required parameter 'structuredBuy' when calling placeStructuredOrder(Async)");
        }

        okhttp3.Call localVarCall = placeStructuredOrderCall(structuredBuy, _callback);
        return localVarCall;
    }

    /**
     * Place Structured Product Order
     * 
     * @param structuredBuy  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void placeStructuredOrder(StructuredBuy structuredBuy) throws ApiException {
        placeStructuredOrderWithHttpInfo(structuredBuy);
    }

    /**
     * Place Structured Product Order
     * 
     * @param structuredBuy  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> placeStructuredOrderWithHttpInfo(StructuredBuy structuredBuy) throws ApiException {
        okhttp3.Call localVarCall = placeStructuredOrderValidateBeforeCall(structuredBuy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Place Structured Product Order (asynchronously)
     * 
     * @param structuredBuy  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeStructuredOrderAsync(StructuredBuy structuredBuy, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = placeStructuredOrderValidateBeforeCall(structuredBuy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for findCoin
     * @param findCoin  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCoinCall(FindCoin findCoin, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = findCoin;

        // create path and map variables
        String localVarPath = "/earn/staking/coins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCoinValidateBeforeCall(FindCoin findCoin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'findCoin' is set
        if (findCoin == null) {
            throw new ApiException("Missing the required parameter 'findCoin' when calling findCoin(Async)");
        }

        okhttp3.Call localVarCall = findCoinCall(findCoin, _callback);
        return localVarCall;
    }

    /**
     * 链上赚币币种
     * 
     * @param findCoin  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public List<String> findCoin(FindCoin findCoin) throws ApiException {
        ApiResponse<List<String>> localVarResp = findCoinWithHttpInfo(findCoin);
        return localVarResp.getData();
    }

    /**
     * 链上赚币币种
     * 
     * @param findCoin  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> findCoinWithHttpInfo(FindCoin findCoin) throws ApiException {
        okhttp3.Call localVarCall = findCoinValidateBeforeCall(findCoin, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 链上赚币币种 (asynchronously)
     * 
     * @param findCoin  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCoinAsync(FindCoin findCoin, final ApiCallback<List<String>> _callback) throws ApiException {
        okhttp3.Call localVarCall = findCoinValidateBeforeCall(findCoin, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for swapStakingCoin
     * @param swapCoin  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapStakingCoinCall(SwapCoin swapCoin, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = swapCoin;

        // create path and map variables
        String localVarPath = "/earn/staking/swap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swapStakingCoinValidateBeforeCall(SwapCoin swapCoin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'swapCoin' is set
        if (swapCoin == null) {
            throw new ApiException("Missing the required parameter 'swapCoin' when calling swapStakingCoin(Async)");
        }

        okhttp3.Call localVarCall = swapStakingCoinCall(swapCoin, _callback);
        return localVarCall;
    }

    /**
     * On-chain Token Swap for Earned Coins
     * 
     * @param swapCoin  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public void swapStakingCoin(SwapCoin swapCoin) throws ApiException {
        swapStakingCoinWithHttpInfo(swapCoin);
    }

    /**
     * On-chain Token Swap for Earned Coins
     * 
     * @param swapCoin  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> swapStakingCoinWithHttpInfo(SwapCoin swapCoin) throws ApiException {
        okhttp3.Call localVarCall = swapStakingCoinValidateBeforeCall(swapCoin, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * On-chain Token Swap for Earned Coins (asynchronously)
     * 
     * @param swapCoin  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapStakingCoinAsync(SwapCoin swapCoin, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = swapStakingCoinValidateBeforeCall(swapCoin, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

}
