/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;

import com.google.gson.reflect.TypeToken;


import io.gate.gateapi.models.DualGetOrders;
import io.gate.gateapi.models.DualGetPlans;
import io.gate.gateapi.models.Eth2Swap;
import io.gate.gateapi.models.PlaceDualInvestmentOrder;
import io.gate.gateapi.models.StructuredBuy;
import io.gate.gateapi.models.StructuredGetProjectList;
import io.gate.gateapi.models.StructuredGetProjectListRequest;
import io.gate.gateapi.models.StructuredOrderList;
import io.gate.gateapi.models.StructuredOrderListRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EarnApi {
    private ApiClient localVarApiClient;

    public EarnApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EarnApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for swapETH2
     * @param eth2Swap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapETH2Call(Eth2Swap eth2Swap, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = eth2Swap;

        // create path and map variables
        String localVarPath = "/earn/staking/eth2/swap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swapETH2ValidateBeforeCall(Eth2Swap eth2Swap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eth2Swap' is set
        if (eth2Swap == null) {
            throw new ApiException("Missing the required parameter 'eth2Swap' when calling swapETH2(Async)");
        }

        okhttp3.Call localVarCall = swapETH2Call(eth2Swap, _callback);
        return localVarCall;
    }

    /**
     * ETH2 swap
     * 
     * @param eth2Swap  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public void swapETH2(Eth2Swap eth2Swap) throws ApiException {
        swapETH2WithHttpInfo(eth2Swap);
    }

    /**
     * ETH2 swap
     * 
     * @param eth2Swap  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> swapETH2WithHttpInfo(Eth2Swap eth2Swap) throws ApiException {
        okhttp3.Call localVarCall = swapETH2ValidateBeforeCall(eth2Swap, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * ETH2 swap (asynchronously)
     * 
     * @param eth2Swap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> swap success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapETH2Async(Eth2Swap eth2Swap, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = swapETH2ValidateBeforeCall(eth2Swap, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for listDualInvestmentPlans
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDualInvestmentPlansCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/earn/dual/investment_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDualInvestmentPlansValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listDualInvestmentPlansCall(_callback);
        return localVarCall;
    }

    /**
     * Dual Investment product list
     * 
     * @return List&lt;DualGetPlans&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public List<DualGetPlans> listDualInvestmentPlans() throws ApiException {
        ApiResponse<List<DualGetPlans>> localVarResp = listDualInvestmentPlansWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Dual Investment product list
     * 
     * @return ApiResponse&lt;List&lt;DualGetPlans&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DualGetPlans>> listDualInvestmentPlansWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listDualInvestmentPlansValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DualGetPlans>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dual Investment product list (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDualInvestmentPlansAsync(final ApiCallback<List<DualGetPlans>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listDualInvestmentPlansValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DualGetPlans>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listDualOrders
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDualOrdersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/earn/dual/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDualOrdersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listDualOrdersCall(_callback);
        return localVarCall;
    }

    /**
     * Dual Investment order list
     * 
     * @return List&lt;DualGetOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public List<DualGetOrders> listDualOrders() throws ApiException {
        ApiResponse<List<DualGetOrders>> localVarResp = listDualOrdersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Dual Investment order list
     * 
     * @return ApiResponse&lt;List&lt;DualGetOrders&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DualGetOrders>> listDualOrdersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listDualOrdersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DualGetOrders>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dual Investment order list (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDualOrdersAsync(final ApiCallback<List<DualGetOrders>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listDualOrdersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DualGetOrders>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for placeDualOrder
     * @param placeDualInvestmentOrder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeDualOrderCall(PlaceDualInvestmentOrder placeDualInvestmentOrder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = placeDualInvestmentOrder;

        // create path and map variables
        String localVarPath = "/earn/dual/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeDualOrderValidateBeforeCall(PlaceDualInvestmentOrder placeDualInvestmentOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeDualInvestmentOrder' is set
        if (placeDualInvestmentOrder == null) {
            throw new ApiException("Missing the required parameter 'placeDualInvestmentOrder' when calling placeDualOrder(Async)");
        }

        okhttp3.Call localVarCall = placeDualOrderCall(placeDualInvestmentOrder, _callback);
        return localVarCall;
    }

    /**
     * Place Dual Investment order
     * 
     * @param placeDualInvestmentOrder  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void placeDualOrder(PlaceDualInvestmentOrder placeDualInvestmentOrder) throws ApiException {
        placeDualOrderWithHttpInfo(placeDualInvestmentOrder);
    }

    /**
     * Place Dual Investment order
     * 
     * @param placeDualInvestmentOrder  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> placeDualOrderWithHttpInfo(PlaceDualInvestmentOrder placeDualInvestmentOrder) throws ApiException {
        okhttp3.Call localVarCall = placeDualOrderValidateBeforeCall(placeDualInvestmentOrder, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Place Dual Investment order (asynchronously)
     * 
     * @param placeDualInvestmentOrder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeDualOrderAsync(PlaceDualInvestmentOrder placeDualInvestmentOrder, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = placeDualOrderValidateBeforeCall(placeDualInvestmentOrder, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for cancelDualOrder
     * @param orderId Order ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancel success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDualOrderCall(Integer orderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/earn/dual/orders/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelDualOrderValidateBeforeCall(Integer orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelDualOrder(Async)");
        }

        okhttp3.Call localVarCall = cancelDualOrderCall(orderId, _callback);
        return localVarCall;
    }

    /**
     * Cancel Dual Investment order
     * 
     * @param orderId Order ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancel success </td><td>  -  </td></tr>
     </table>
     */
    public void cancelDualOrder(Integer orderId) throws ApiException {
        cancelDualOrderWithHttpInfo(orderId);
    }

    /**
     * Cancel Dual Investment order
     * 
     * @param orderId Order ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancel success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelDualOrderWithHttpInfo(Integer orderId) throws ApiException {
        okhttp3.Call localVarCall = cancelDualOrderValidateBeforeCall(orderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Dual Investment order (asynchronously)
     * 
     * @param orderId Order ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancel success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDualOrderAsync(Integer orderId, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = cancelDualOrderValidateBeforeCall(orderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for listStructuredProducts
     * @param structuredGetProjectListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStructuredProductsCall(StructuredGetProjectListRequest structuredGetProjectListRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = structuredGetProjectListRequest;

        // create path and map variables
        String localVarPath = "/earn/structured/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStructuredProductsValidateBeforeCall(StructuredGetProjectListRequest structuredGetProjectListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'structuredGetProjectListRequest' is set
        if (structuredGetProjectListRequest == null) {
            throw new ApiException("Missing the required parameter 'structuredGetProjectListRequest' when calling listStructuredProducts(Async)");
        }

        okhttp3.Call localVarCall = listStructuredProductsCall(structuredGetProjectListRequest, _callback);
        return localVarCall;
    }

    /**
     * Structured Product List
     * 
     * @param structuredGetProjectListRequest  (required)
     * @return List&lt;StructuredGetProjectList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public List<StructuredGetProjectList> listStructuredProducts(StructuredGetProjectListRequest structuredGetProjectListRequest) throws ApiException {
        ApiResponse<List<StructuredGetProjectList>> localVarResp = listStructuredProductsWithHttpInfo(structuredGetProjectListRequest);
        return localVarResp.getData();
    }

    /**
     * Structured Product List
     * 
     * @param structuredGetProjectListRequest  (required)
     * @return ApiResponse&lt;List&lt;StructuredGetProjectList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StructuredGetProjectList>> listStructuredProductsWithHttpInfo(StructuredGetProjectListRequest structuredGetProjectListRequest) throws ApiException {
        okhttp3.Call localVarCall = listStructuredProductsValidateBeforeCall(structuredGetProjectListRequest, null);
        Type localVarReturnType = new TypeToken<List<StructuredGetProjectList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Structured Product List (asynchronously)
     * 
     * @param structuredGetProjectListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStructuredProductsAsync(StructuredGetProjectListRequest structuredGetProjectListRequest, final ApiCallback<List<StructuredGetProjectList>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listStructuredProductsValidateBeforeCall(structuredGetProjectListRequest, _callback);
        Type localVarReturnType = new TypeToken<List<StructuredGetProjectList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listStructuredOrders
     * @param structuredOrderListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStructuredOrdersCall(StructuredOrderListRequest structuredOrderListRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = structuredOrderListRequest;

        // create path and map variables
        String localVarPath = "/earn/structured/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStructuredOrdersValidateBeforeCall(StructuredOrderListRequest structuredOrderListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'structuredOrderListRequest' is set
        if (structuredOrderListRequest == null) {
            throw new ApiException("Missing the required parameter 'structuredOrderListRequest' when calling listStructuredOrders(Async)");
        }

        okhttp3.Call localVarCall = listStructuredOrdersCall(structuredOrderListRequest, _callback);
        return localVarCall;
    }

    /**
     * Structured Product Order List
     * 
     * @param structuredOrderListRequest  (required)
     * @return List&lt;StructuredOrderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public List<StructuredOrderList> listStructuredOrders(StructuredOrderListRequest structuredOrderListRequest) throws ApiException {
        ApiResponse<List<StructuredOrderList>> localVarResp = listStructuredOrdersWithHttpInfo(structuredOrderListRequest);
        return localVarResp.getData();
    }

    /**
     * Structured Product Order List
     * 
     * @param structuredOrderListRequest  (required)
     * @return ApiResponse&lt;List&lt;StructuredOrderList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StructuredOrderList>> listStructuredOrdersWithHttpInfo(StructuredOrderListRequest structuredOrderListRequest) throws ApiException {
        okhttp3.Call localVarCall = listStructuredOrdersValidateBeforeCall(structuredOrderListRequest, null);
        Type localVarReturnType = new TypeToken<List<StructuredOrderList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Structured Product Order List (asynchronously)
     * 
     * @param structuredOrderListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStructuredOrdersAsync(StructuredOrderListRequest structuredOrderListRequest, final ApiCallback<List<StructuredOrderList>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listStructuredOrdersValidateBeforeCall(structuredOrderListRequest, _callback);
        Type localVarReturnType = new TypeToken<List<StructuredOrderList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for placeStructuredOrder
     * @param structuredBuy  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeStructuredOrderCall(StructuredBuy structuredBuy, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = structuredBuy;

        // create path and map variables
        String localVarPath = "/earn/structured/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeStructuredOrderValidateBeforeCall(StructuredBuy structuredBuy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'structuredBuy' is set
        if (structuredBuy == null) {
            throw new ApiException("Missing the required parameter 'structuredBuy' when calling placeStructuredOrder(Async)");
        }

        okhttp3.Call localVarCall = placeStructuredOrderCall(structuredBuy, _callback);
        return localVarCall;
    }

    /**
     * Place Structured Product Order
     * 
     * @param structuredBuy  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void placeStructuredOrder(StructuredBuy structuredBuy) throws ApiException {
        placeStructuredOrderWithHttpInfo(structuredBuy);
    }

    /**
     * Place Structured Product Order
     * 
     * @param structuredBuy  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> placeStructuredOrderWithHttpInfo(StructuredBuy structuredBuy) throws ApiException {
        okhttp3.Call localVarCall = placeStructuredOrderValidateBeforeCall(structuredBuy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Place Structured Product Order (asynchronously)
     * 
     * @param structuredBuy  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeStructuredOrderAsync(StructuredBuy structuredBuy, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = placeStructuredOrderValidateBeforeCall(structuredBuy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

}
