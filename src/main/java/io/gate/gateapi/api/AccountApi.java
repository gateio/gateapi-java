/*
 * Gate API
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;

import com.google.gson.reflect.TypeToken;


import io.gate.gateapi.models.AccountDetail;
import io.gate.gateapi.models.AccountRateLimit;
import io.gate.gateapi.models.DebitFee;
import io.gate.gateapi.models.StpGroup;
import io.gate.gateapi.models.StpGroupUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAccountDetail
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountDetailCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountDetailValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getAccountDetailCall(_callback);
        return localVarCall;
    }

    /**
     * Retrieve user account information
     * 
     * @return AccountDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public AccountDetail getAccountDetail() throws ApiException {
        ApiResponse<AccountDetail> localVarResp = getAccountDetailWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve user account information
     * 
     * @return ApiResponse&lt;AccountDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountDetail> getAccountDetailWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAccountDetailValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccountDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve user account information (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountDetailAsync(final ApiCallback<AccountDetail> _callback) throws ApiException {
        okhttp3.Call localVarCall = getAccountDetailValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccountDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getAccountRateLimit
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountRateLimitCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/rate_limit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountRateLimitValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getAccountRateLimitCall(_callback);
        return localVarCall;
    }

    /**
     * Get user transaction rate limit information
     * 
     * @return List&lt;AccountRateLimit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public List<AccountRateLimit> getAccountRateLimit() throws ApiException {
        ApiResponse<List<AccountRateLimit>> localVarResp = getAccountRateLimitWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get user transaction rate limit information
     * 
     * @return ApiResponse&lt;List&lt;AccountRateLimit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AccountRateLimit>> getAccountRateLimitWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAccountRateLimitValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<AccountRateLimit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user transaction rate limit information (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountRateLimitAsync(final ApiCallback<List<AccountRateLimit>> _callback) throws ApiException {
        okhttp3.Call localVarCall = getAccountRateLimitValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<AccountRateLimit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listSTPGroupsCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/stp_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSTPGroupsValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listSTPGroupsCall(name, _callback);
        return localVarCall;
    }


    private ApiResponse<List<StpGroup>> listSTPGroupsWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = listSTPGroupsValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<List<StpGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSTPGroupsAsync(String name, final ApiCallback<List<StpGroup>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listSTPGroupsValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<List<StpGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSTPGroupsRequest {
        private String name;

        private APIlistSTPGroupsRequest() {
        }

        /**
         * Set name
         * @param name Fuzzy search by name (optional)
         * @return APIlistSTPGroupsRequest
         */
        public APIlistSTPGroupsRequest name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Build call for listSTPGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSTPGroupsCall(name, _callback);
        }

        /**
         * Execute listSTPGroups request
         * @return List&lt;StpGroup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved successfully </td><td>  -  </td></tr>
         </table>
         */
        public List<StpGroup> execute() throws ApiException {
            ApiResponse<List<StpGroup>> localVarResp = listSTPGroupsWithHttpInfo(name);
            return localVarResp.getData();
        }

        /**
         * Execute listSTPGroups request with HTTP info returned
         * @return ApiResponse&lt;List&lt;StpGroup&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<StpGroup>> executeWithHttpInfo() throws ApiException {
            return listSTPGroupsWithHttpInfo(name);
        }

        /**
         * Execute listSTPGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<StpGroup>> _callback) throws ApiException {
            return listSTPGroupsAsync(name, _callback);
        }
    }

    /**
     * Query STP user groups created by the user
     * Only query STP user groups created by the current main account
     * @return APIlistSTPGroupsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSTPGroupsRequest listSTPGroups() {
        return new APIlistSTPGroupsRequest();
    }

    /**
     * Build call for createSTPGroup
     * @param stpGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully, returning current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSTPGroupCall(StpGroup stpGroup, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stpGroup;

        // create path and map variables
        String localVarPath = "/account/stp_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSTPGroupValidateBeforeCall(StpGroup stpGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stpGroup' is set
        if (stpGroup == null) {
            throw new ApiException("Missing the required parameter 'stpGroup' when calling createSTPGroup(Async)");
        }

        okhttp3.Call localVarCall = createSTPGroupCall(stpGroup, _callback);
        return localVarCall;
    }

    /**
     * Create STP user group
     * Only the main account is allowed to create a new STP user group
     * @param stpGroup  (required)
     * @return StpGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully, returning current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public StpGroup createSTPGroup(StpGroup stpGroup) throws ApiException {
        ApiResponse<StpGroup> localVarResp = createSTPGroupWithHttpInfo(stpGroup);
        return localVarResp.getData();
    }

    /**
     * Create STP user group
     * Only the main account is allowed to create a new STP user group
     * @param stpGroup  (required)
     * @return ApiResponse&lt;StpGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully, returning current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StpGroup> createSTPGroupWithHttpInfo(StpGroup stpGroup) throws ApiException {
        okhttp3.Call localVarCall = createSTPGroupValidateBeforeCall(stpGroup, null);
        Type localVarReturnType = new TypeToken<StpGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create STP user group (asynchronously)
     * Only the main account is allowed to create a new STP user group
     * @param stpGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully, returning current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSTPGroupAsync(StpGroup stpGroup, final ApiCallback<StpGroup> _callback) throws ApiException {
        okhttp3.Call localVarCall = createSTPGroupValidateBeforeCall(stpGroup, _callback);
        Type localVarReturnType = new TypeToken<StpGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listSTPGroupsUsers
     * @param stpId STP Group ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSTPGroupsUsersCall(Long stpId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/stp_groups/{stp_id}/users"
            .replaceAll("\\{" + "stp_id" + "\\}", localVarApiClient.escapeString(stpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSTPGroupsUsersValidateBeforeCall(Long stpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stpId' is set
        if (stpId == null) {
            throw new ApiException("Missing the required parameter 'stpId' when calling listSTPGroupsUsers(Async)");
        }

        okhttp3.Call localVarCall = listSTPGroupsUsersCall(stpId, _callback);
        return localVarCall;
    }

    /**
     * Query users in the STP user group
     * Only the main account that created this STP group can query the account ID list in the current STP group
     * @param stpId STP Group ID (required)
     * @return List&lt;StpGroupUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public List<StpGroupUser> listSTPGroupsUsers(Long stpId) throws ApiException {
        ApiResponse<List<StpGroupUser>> localVarResp = listSTPGroupsUsersWithHttpInfo(stpId);
        return localVarResp.getData();
    }

    /**
     * Query users in the STP user group
     * Only the main account that created this STP group can query the account ID list in the current STP group
     * @param stpId STP Group ID (required)
     * @return ApiResponse&lt;List&lt;StpGroupUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StpGroupUser>> listSTPGroupsUsersWithHttpInfo(Long stpId) throws ApiException {
        okhttp3.Call localVarCall = listSTPGroupsUsersValidateBeforeCall(stpId, null);
        Type localVarReturnType = new TypeToken<List<StpGroupUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query users in the STP user group (asynchronously)
     * Only the main account that created this STP group can query the account ID list in the current STP group
     * @param stpId STP Group ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSTPGroupsUsersAsync(Long stpId, final ApiCallback<List<StpGroupUser>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listSTPGroupsUsersValidateBeforeCall(stpId, _callback);
        Type localVarReturnType = new TypeToken<List<StpGroupUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for addSTPGroupUsers
     * @param stpId STP Group ID (required)
     * @param requestBody User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully, returning current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSTPGroupUsersCall(Long stpId, List<Long> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/account/stp_groups/{stp_id}/users"
            .replaceAll("\\{" + "stp_id" + "\\}", localVarApiClient.escapeString(stpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSTPGroupUsersValidateBeforeCall(Long stpId, List<Long> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stpId' is set
        if (stpId == null) {
            throw new ApiException("Missing the required parameter 'stpId' when calling addSTPGroupUsers(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling addSTPGroupUsers(Async)");
        }

        okhttp3.Call localVarCall = addSTPGroupUsersCall(stpId, requestBody, _callback);
        return localVarCall;
    }

    /**
     * Add users to the STP user group
     * - Only the main account that created this STP group can add users to the STP user group - Only accounts under the current main account are allowed, cross-main account is not permitted
     * @param stpId STP Group ID (required)
     * @param requestBody User ID (required)
     * @return List&lt;StpGroupUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully, returning current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public List<StpGroupUser> addSTPGroupUsers(Long stpId, List<Long> requestBody) throws ApiException {
        ApiResponse<List<StpGroupUser>> localVarResp = addSTPGroupUsersWithHttpInfo(stpId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Add users to the STP user group
     * - Only the main account that created this STP group can add users to the STP user group - Only accounts under the current main account are allowed, cross-main account is not permitted
     * @param stpId STP Group ID (required)
     * @param requestBody User ID (required)
     * @return ApiResponse&lt;List&lt;StpGroupUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully, returning current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StpGroupUser>> addSTPGroupUsersWithHttpInfo(Long stpId, List<Long> requestBody) throws ApiException {
        okhttp3.Call localVarCall = addSTPGroupUsersValidateBeforeCall(stpId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<StpGroupUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add users to the STP user group (asynchronously)
     * - Only the main account that created this STP group can add users to the STP user group - Only accounts under the current main account are allowed, cross-main account is not permitted
     * @param stpId STP Group ID (required)
     * @param requestBody User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully, returning current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSTPGroupUsersAsync(Long stpId, List<Long> requestBody, final ApiCallback<List<StpGroupUser>> _callback) throws ApiException {
        okhttp3.Call localVarCall = addSTPGroupUsersValidateBeforeCall(stpId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<StpGroupUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteSTPGroupUsers
     * @param stpId STP Group ID (required)
     * @param userId STP user IDs, multiple IDs can be separated by commas (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users deleted successfully, returns current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSTPGroupUsersCall(Long stpId, Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/stp_groups/{stp_id}/users"
            .replaceAll("\\{" + "stp_id" + "\\}", localVarApiClient.escapeString(stpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSTPGroupUsersValidateBeforeCall(Long stpId, Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stpId' is set
        if (stpId == null) {
            throw new ApiException("Missing the required parameter 'stpId' when calling deleteSTPGroupUsers(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteSTPGroupUsers(Async)");
        }

        okhttp3.Call localVarCall = deleteSTPGroupUsersCall(stpId, userId, _callback);
        return localVarCall;
    }

    /**
     * Delete users from the STP user group
     * - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
     * @param stpId STP Group ID (required)
     * @param userId STP user IDs, multiple IDs can be separated by commas (required)
     * @return List&lt;StpGroupUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users deleted successfully, returns current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public List<StpGroupUser> deleteSTPGroupUsers(Long stpId, Long userId) throws ApiException {
        ApiResponse<List<StpGroupUser>> localVarResp = deleteSTPGroupUsersWithHttpInfo(stpId, userId);
        return localVarResp.getData();
    }

    /**
     * Delete users from the STP user group
     * - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
     * @param stpId STP Group ID (required)
     * @param userId STP user IDs, multiple IDs can be separated by commas (required)
     * @return ApiResponse&lt;List&lt;StpGroupUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users deleted successfully, returns current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StpGroupUser>> deleteSTPGroupUsersWithHttpInfo(Long stpId, Long userId) throws ApiException {
        okhttp3.Call localVarCall = deleteSTPGroupUsersValidateBeforeCall(stpId, userId, null);
        Type localVarReturnType = new TypeToken<List<StpGroupUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete users from the STP user group (asynchronously)
     * - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
     * @param stpId STP Group ID (required)
     * @param userId STP user IDs, multiple IDs can be separated by commas (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users deleted successfully, returns current users in the STP group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSTPGroupUsersAsync(Long stpId, Long userId, final ApiCallback<List<StpGroupUser>> _callback) throws ApiException {
        okhttp3.Call localVarCall = deleteSTPGroupUsersValidateBeforeCall(stpId, userId, _callback);
        Type localVarReturnType = new TypeToken<List<StpGroupUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getDebitFee
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDebitFeeCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/debit_fee";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDebitFeeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getDebitFeeCall(_callback);
        return localVarCall;
    }

    /**
     * Query GT fee deduction configuration
     * Query the GT fee deduction configuration for the current account
     * @return DebitFee
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DebitFee getDebitFee() throws ApiException {
        ApiResponse<DebitFee> localVarResp = getDebitFeeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Query GT fee deduction configuration
     * Query the GT fee deduction configuration for the current account
     * @return ApiResponse&lt;DebitFee&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DebitFee> getDebitFeeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDebitFeeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DebitFee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query GT fee deduction configuration (asynchronously)
     * Query the GT fee deduction configuration for the current account
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDebitFeeAsync(final ApiCallback<DebitFee> _callback) throws ApiException {
        okhttp3.Call localVarCall = getDebitFeeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DebitFee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for setDebitFee
     * @param debitFee  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDebitFeeCall(DebitFee debitFee, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = debitFee;

        // create path and map variables
        String localVarPath = "/account/debit_fee";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDebitFeeValidateBeforeCall(DebitFee debitFee, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'debitFee' is set
        if (debitFee == null) {
            throw new ApiException("Missing the required parameter 'debitFee' when calling setDebitFee(Async)");
        }

        okhttp3.Call localVarCall = setDebitFeeCall(debitFee, _callback);
        return localVarCall;
    }

    /**
     * Configure GT fee deduction
     * Enable or disable GT fee deduction for the current account
     * @param debitFee  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void setDebitFee(DebitFee debitFee) throws ApiException {
        setDebitFeeWithHttpInfo(debitFee);
    }

    /**
     * Configure GT fee deduction
     * Enable or disable GT fee deduction for the current account
     * @param debitFee  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setDebitFeeWithHttpInfo(DebitFee debitFee) throws ApiException {
        okhttp3.Call localVarCall = setDebitFeeValidateBeforeCall(debitFee, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Configure GT fee deduction (asynchronously)
     * Enable or disable GT fee deduction for the current account
     * @param debitFee  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDebitFeeAsync(DebitFee debitFee, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = setDebitFeeValidateBeforeCall(debitFee, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

}
