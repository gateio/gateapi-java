/*
 * Gate API v4
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;

import com.google.gson.reflect.TypeToken;


import io.gate.gateapi.models.AccountBookResponse;
import io.gate.gateapi.models.AccountsResponse;
import io.gate.gateapi.models.Currency2;
import io.gate.gateapi.models.OrderResponse;
import io.gate.gateapi.models.PlaceOrderRequest;
import io.gate.gateapi.models.PlaceOrderResponse;
import io.gate.gateapi.models.QuoteRequest;
import io.gate.gateapi.models.QuoteResponse;
import io.gate.gateapi.models.Ticker2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlphaApi {
    private ApiClient localVarApiClient;

    public AlphaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlphaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for listAlphaAccounts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 查询持仓成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAlphaAccountsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alpha/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAlphaAccountsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listAlphaAccountsCall(_callback);
        return localVarCall;
    }

    /**
     * API for Alpha Accounts
     * Query Position Assets
     * @return List&lt;AccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 查询持仓成功 </td><td>  -  </td></tr>
     </table>
     */
    public List<AccountsResponse> listAlphaAccounts() throws ApiException {
        ApiResponse<List<AccountsResponse>> localVarResp = listAlphaAccountsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * API for Alpha Accounts
     * Query Position Assets
     * @return ApiResponse&lt;List&lt;AccountsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 查询持仓成功 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AccountsResponse>> listAlphaAccountsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAlphaAccountsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<AccountsResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * API for Alpha Accounts (asynchronously)
     * Query Position Assets
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 查询持仓成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAlphaAccountsAsync(final ApiCallback<List<AccountsResponse>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listAlphaAccountsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<AccountsResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listAlphaAccountBookCall(Long from, Long to, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alpha/account_book";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAlphaAccountBookValidateBeforeCall(Long from, Long to, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling listAlphaAccountBook(Async)");
        }

        okhttp3.Call localVarCall = listAlphaAccountBookCall(from, to, page, limit, _callback);
        return localVarCall;
    }


    private ApiResponse<List<AccountBookResponse>> listAlphaAccountBookWithHttpInfo(Long from, Long to, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listAlphaAccountBookValidateBeforeCall(from, to, page, limit, null);
        Type localVarReturnType = new TypeToken<List<AccountBookResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAlphaAccountBookAsync(Long from, Long to, Integer page, Integer limit, final ApiCallback<List<AccountBookResponse>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listAlphaAccountBookValidateBeforeCall(from, to, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<AccountBookResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAlphaAccountBookRequest {
        private final Long from;
        private Long to;
        private Integer page;
        private Integer limit;

        private APIlistAlphaAccountBookRequest(Long from) {
            this.from = from;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIlistAlphaAccountBookRequest
         */
        public APIlistAlphaAccountBookRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional)
         * @return APIlistAlphaAccountBookRequest
         */
        public APIlistAlphaAccountBookRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit The maximum number of items per page is 100 (optional)
         * @return APIlistAlphaAccountBookRequest
         */
        public APIlistAlphaAccountBookRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for listAlphaAccountBook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 查询流水成功 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAlphaAccountBookCall(from, to, page, limit, _callback);
        }

        /**
         * Execute listAlphaAccountBook request
         * @return List&lt;AccountBookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 查询流水成功 </td><td>  -  </td></tr>
         </table>
         */
        public List<AccountBookResponse> execute() throws ApiException {
            ApiResponse<List<AccountBookResponse>> localVarResp = listAlphaAccountBookWithHttpInfo(from, to, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute listAlphaAccountBook request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AccountBookResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 查询流水成功 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AccountBookResponse>> executeWithHttpInfo() throws ApiException {
            return listAlphaAccountBookWithHttpInfo(from, to, page, limit);
        }

        /**
         * Execute listAlphaAccountBook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 查询流水成功 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AccountBookResponse>> _callback) throws ApiException {
            return listAlphaAccountBookAsync(from, to, page, limit, _callback);
        }
    }

    /**
     * Alpha Asset Transaction API
     * Query Asset Transactions
     * @param from Start timestamp of the query (required)
     * @return APIlistAlphaAccountBookRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 查询流水成功 </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAlphaAccountBookRequest listAlphaAccountBook(Long from) {
        return new APIlistAlphaAccountBookRequest(from);
    }

    /**
     * Build call for quoteAlphaOrder
     * @param quoteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 询价成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteAlphaOrderCall(QuoteRequest quoteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = quoteRequest;

        // create path and map variables
        String localVarPath = "/alpha/quote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteAlphaOrderValidateBeforeCall(QuoteRequest quoteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteRequest' is set
        if (quoteRequest == null) {
            throw new ApiException("Missing the required parameter 'quoteRequest' when calling quoteAlphaOrder(Async)");
        }

        okhttp3.Call localVarCall = quoteAlphaOrderCall(quoteRequest, _callback);
        return localVarCall;
    }

    /**
     * Alpha Quotation API
     * The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
     * @param quoteRequest  (required)
     * @return QuoteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 询价成功 </td><td>  -  </td></tr>
     </table>
     */
    public QuoteResponse quoteAlphaOrder(QuoteRequest quoteRequest) throws ApiException {
        ApiResponse<QuoteResponse> localVarResp = quoteAlphaOrderWithHttpInfo(quoteRequest);
        return localVarResp.getData();
    }

    /**
     * Alpha Quotation API
     * The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
     * @param quoteRequest  (required)
     * @return ApiResponse&lt;QuoteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 询价成功 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteResponse> quoteAlphaOrderWithHttpInfo(QuoteRequest quoteRequest) throws ApiException {
        okhttp3.Call localVarCall = quoteAlphaOrderValidateBeforeCall(quoteRequest, null);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alpha Quotation API (asynchronously)
     * The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
     * @param quoteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 询价成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteAlphaOrderAsync(QuoteRequest quoteRequest, final ApiCallback<QuoteResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = quoteAlphaOrderValidateBeforeCall(quoteRequest, _callback);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listAlphaOrderCall(String currency, String side, Integer status, Long from, Long to, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alpha/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (side != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("side", side));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAlphaOrderValidateBeforeCall(String currency, String side, Integer status, Long from, Long to, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling listAlphaOrder(Async)");
        }

        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling listAlphaOrder(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling listAlphaOrder(Async)");
        }

        okhttp3.Call localVarCall = listAlphaOrderCall(currency, side, status, from, to, limit, page, _callback);
        return localVarCall;
    }


    private ApiResponse<List<OrderResponse>> listAlphaOrderWithHttpInfo(String currency, String side, Integer status, Long from, Long to, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listAlphaOrderValidateBeforeCall(currency, side, status, from, to, limit, page, null);
        Type localVarReturnType = new TypeToken<List<OrderResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAlphaOrderAsync(String currency, String side, Integer status, Long from, Long to, Integer limit, Integer page, final ApiCallback<List<OrderResponse>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listAlphaOrderValidateBeforeCall(currency, side, status, from, to, limit, page, _callback);
        Type localVarReturnType = new TypeToken<List<OrderResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAlphaOrderRequest {
        private final String currency;
        private final String side;
        private final Integer status;
        private Long from;
        private Long to;
        private Integer limit;
        private Integer page;

        private APIlistAlphaOrderRequest(String currency, String side, Integer status) {
            this.currency = currency;
            this.side = side;
            this.status = status;
        }

        /**
         * Set from
         * @param from 查询订单的起始时间 (optional)
         * @return APIlistAlphaOrderRequest
         */
        public APIlistAlphaOrderRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to 查询订单的结束时间，不指定则默认为当前时间 (optional)
         * @return APIlistAlphaOrderRequest
         */
        public APIlistAlphaOrderRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)
         * @return APIlistAlphaOrderRequest
         */
        public APIlistAlphaOrderRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistAlphaOrderRequest
         */
        public APIlistAlphaOrderRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for listAlphaOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAlphaOrderCall(currency, side, status, from, to, limit, page, _callback);
        }

        /**
         * Execute listAlphaOrder request
         * @return List&lt;OrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<OrderResponse> execute() throws ApiException {
            ApiResponse<List<OrderResponse>> localVarResp = listAlphaOrderWithHttpInfo(currency, side, status, from, to, limit, page);
            return localVarResp.getData();
        }

        /**
         * Execute listAlphaOrder request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OrderResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OrderResponse>> executeWithHttpInfo() throws ApiException {
            return listAlphaOrderWithHttpInfo(currency, side, status, from, to, limit, page);
        }

        /**
         * Execute listAlphaOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OrderResponse>> _callback) throws ApiException {
            return listAlphaOrderAsync(currency, side, status, from, to, limit, page, _callback);
        }
    }

    /**
     * Alpha 查询订单列表接口
     * 
     * @param currency Trading Symbol (required)
     * @param side 买单或者卖单 - buy - sell (required)
     * @param status Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete (required)
     * @return APIlistAlphaOrderRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAlphaOrderRequest listAlphaOrder(String currency, String side, Integer status) {
        return new APIlistAlphaOrderRequest(currency, side, status);
    }

    /**
     * Build call for placeAlphaOrder
     * @param placeOrderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeAlphaOrderCall(PlaceOrderRequest placeOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = placeOrderRequest;

        // create path and map variables
        String localVarPath = "/alpha/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeAlphaOrderValidateBeforeCall(PlaceOrderRequest placeOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeOrderRequest' is set
        if (placeOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'placeOrderRequest' when calling placeAlphaOrder(Async)");
        }

        okhttp3.Call localVarCall = placeAlphaOrderCall(placeOrderRequest, _callback);
        return localVarCall;
    }

    /**
     * Alpha Order Placement API
     * 
     * @param placeOrderRequest  (required)
     * @return PlaceOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PlaceOrderResponse placeAlphaOrder(PlaceOrderRequest placeOrderRequest) throws ApiException {
        ApiResponse<PlaceOrderResponse> localVarResp = placeAlphaOrderWithHttpInfo(placeOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Alpha Order Placement API
     * 
     * @param placeOrderRequest  (required)
     * @return ApiResponse&lt;PlaceOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaceOrderResponse> placeAlphaOrderWithHttpInfo(PlaceOrderRequest placeOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = placeAlphaOrderValidateBeforeCall(placeOrderRequest, null);
        Type localVarReturnType = new TypeToken<PlaceOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alpha Order Placement API (asynchronously)
     * 
     * @param placeOrderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeAlphaOrderAsync(PlaceOrderRequest placeOrderRequest, final ApiCallback<PlaceOrderResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = placeAlphaOrderValidateBeforeCall(placeOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<PlaceOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getAlphaOrder
     * @param orderId Order ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 订单查询成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlphaOrderCall(String orderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alpha/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_id", orderId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlphaOrderValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getAlphaOrder(Async)");
        }

        okhttp3.Call localVarCall = getAlphaOrderCall(orderId, _callback);
        return localVarCall;
    }

    /**
     * Alpha 查询单个订单接口
     * 
     * @param orderId Order ID (required)
     * @return OrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 订单查询成功 </td><td>  -  </td></tr>
     </table>
     */
    public OrderResponse getAlphaOrder(String orderId) throws ApiException {
        ApiResponse<OrderResponse> localVarResp = getAlphaOrderWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Alpha 查询单个订单接口
     * 
     * @param orderId Order ID (required)
     * @return ApiResponse&lt;OrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 订单查询成功 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderResponse> getAlphaOrderWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getAlphaOrderValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alpha 查询单个订单接口 (asynchronously)
     * 
     * @param orderId Order ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 订单查询成功 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlphaOrderAsync(String orderId, final ApiCallback<OrderResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = getAlphaOrderValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listAlphaCurrenciesCall(String currency, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alpha/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAlphaCurrenciesValidateBeforeCall(String currency, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listAlphaCurrenciesCall(currency, limit, page, _callback);
        return localVarCall;
    }


    private ApiResponse<List<Currency2>> listAlphaCurrenciesWithHttpInfo(String currency, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listAlphaCurrenciesValidateBeforeCall(currency, limit, page, null);
        Type localVarReturnType = new TypeToken<List<Currency2>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAlphaCurrenciesAsync(String currency, Integer limit, Integer page, final ApiCallback<List<Currency2>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listAlphaCurrenciesValidateBeforeCall(currency, limit, page, _callback);
        Type localVarReturnType = new TypeToken<List<Currency2>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAlphaCurrenciesRequest {
        private String currency;
        private Integer limit;
        private Integer page;

        private APIlistAlphaCurrenciesRequest() {
        }

        /**
         * Set currency
         * @param currency 根据币种符号查询币种信息 (optional)
         * @return APIlistAlphaCurrenciesRequest
         */
        public APIlistAlphaCurrenciesRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIlistAlphaCurrenciesRequest
         */
        public APIlistAlphaCurrenciesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistAlphaCurrenciesRequest
         */
        public APIlistAlphaCurrenciesRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for listAlphaCurrencies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAlphaCurrenciesCall(currency, limit, page, _callback);
        }

        /**
         * Execute listAlphaCurrencies request
         * @return List&lt;Currency2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<Currency2> execute() throws ApiException {
            ApiResponse<List<Currency2>> localVarResp = listAlphaCurrenciesWithHttpInfo(currency, limit, page);
            return localVarResp.getData();
        }

        /**
         * Execute listAlphaCurrencies request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Currency2&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Currency2>> executeWithHttpInfo() throws ApiException {
            return listAlphaCurrenciesWithHttpInfo(currency, limit, page);
        }

        /**
         * Execute listAlphaCurrencies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Currency2>> _callback) throws ApiException {
            return listAlphaCurrenciesAsync(currency, limit, page, _callback);
        }
    }

    /**
     * 查询币种信息
     * When the currency parameter is provided, query and return information for the specified currency. When the currency parameter is not provided, return a paginated list of currencies.
     * @return APIlistAlphaCurrenciesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAlphaCurrenciesRequest listAlphaCurrencies() {
        return new APIlistAlphaCurrenciesRequest();
    }

    private okhttp3.Call listAlphaTickersCall(String currency, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alpha/tickers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAlphaTickersValidateBeforeCall(String currency, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listAlphaTickersCall(currency, limit, page, _callback);
        return localVarCall;
    }


    private ApiResponse<List<Ticker2>> listAlphaTickersWithHttpInfo(String currency, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listAlphaTickersValidateBeforeCall(currency, limit, page, null);
        Type localVarReturnType = new TypeToken<List<Ticker2>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAlphaTickersAsync(String currency, Integer limit, Integer page, final ApiCallback<List<Ticker2>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listAlphaTickersValidateBeforeCall(currency, limit, page, _callback);
        Type localVarReturnType = new TypeToken<List<Ticker2>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAlphaTickersRequest {
        private String currency;
        private Integer limit;
        private Integer page;

        private APIlistAlphaTickersRequest() {
        }

        /**
         * Set currency
         * @param currency Retrieve data of the specified currency (optional)
         * @return APIlistAlphaTickersRequest
         */
        public APIlistAlphaTickersRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIlistAlphaTickersRequest
         */
        public APIlistAlphaTickersRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistAlphaTickersRequest
         */
        public APIlistAlphaTickersRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for listAlphaTickers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAlphaTickersCall(currency, limit, page, _callback);
        }

        /**
         * Execute listAlphaTickers request
         * @return List&lt;Ticker2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<Ticker2> execute() throws ApiException {
            ApiResponse<List<Ticker2>> localVarResp = listAlphaTickersWithHttpInfo(currency, limit, page);
            return localVarResp.getData();
        }

        /**
         * Execute listAlphaTickers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Ticker2&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Ticker2>> executeWithHttpInfo() throws ApiException {
            return listAlphaTickersWithHttpInfo(currency, limit, page);
        }

        /**
         * Execute listAlphaTickers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Ticker2>> _callback) throws ApiException {
            return listAlphaTickersAsync(currency, limit, page, _callback);
        }
    }

    /**
     * 查询币种ticker
     * When the currency parameter is provided, query and return information for the specified ticker, When the currency parameter is not provided, return a paginated list of tickers.
     * @return APIlistAlphaTickersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAlphaTickersRequest listAlphaTickers() {
        return new APIlistAlphaTickersRequest();
    }

}
