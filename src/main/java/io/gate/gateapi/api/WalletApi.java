/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;

import com.google.gson.reflect.TypeToken;


import io.gate.gateapi.models.ConvertSmallBalance;
import io.gate.gateapi.models.CurrencyChain;
import io.gate.gateapi.models.DepositAddress;
import io.gate.gateapi.models.LedgerRecord;
import io.gate.gateapi.models.SavedAddress;
import io.gate.gateapi.models.SmallBalance;
import io.gate.gateapi.models.SmallBalanceHistory;
import io.gate.gateapi.models.SubAccountBalance;
import io.gate.gateapi.models.SubAccountCrossMarginBalance;
import io.gate.gateapi.models.SubAccountFuturesBalance;
import io.gate.gateapi.models.SubAccountMarginBalance;
import io.gate.gateapi.models.SubAccountToSubAccount;
import io.gate.gateapi.models.SubAccountTransfer;
import io.gate.gateapi.models.TotalBalance;
import io.gate.gateapi.models.TradeFee;
import io.gate.gateapi.models.TransactionID;
import io.gate.gateapi.models.Transfer;
import io.gate.gateapi.models.TransferOrderStatus;
import io.gate.gateapi.models.UidPushOrder;
import io.gate.gateapi.models.WithdrawStatus;
import io.gate.gateapi.models.WithdrawalRecord;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WalletApi {
    private ApiClient localVarApiClient;

    public WalletApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WalletApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for listCurrencyChains
     * @param currency Currency name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCurrencyChainsCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/currency_chains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCurrencyChainsValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling listCurrencyChains(Async)");
        }

        okhttp3.Call localVarCall = listCurrencyChainsCall(currency, _callback);
        return localVarCall;
    }

    /**
     * List chains supported for specified currency
     * 
     * @param currency Currency name (required)
     * @return List&lt;CurrencyChain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public List<CurrencyChain> listCurrencyChains(String currency) throws ApiException {
        ApiResponse<List<CurrencyChain>> localVarResp = listCurrencyChainsWithHttpInfo(currency);
        return localVarResp.getData();
    }

    /**
     * List chains supported for specified currency
     * 
     * @param currency Currency name (required)
     * @return ApiResponse&lt;List&lt;CurrencyChain&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CurrencyChain>> listCurrencyChainsWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = listCurrencyChainsValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<List<CurrencyChain>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List chains supported for specified currency (asynchronously)
     * 
     * @param currency Currency name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCurrencyChainsAsync(String currency, final ApiCallback<List<CurrencyChain>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listCurrencyChainsValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<List<CurrencyChain>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getDepositAddress
     * @param currency Currency name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address successfully generated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDepositAddressCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/deposit_address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDepositAddressValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getDepositAddress(Async)");
        }

        okhttp3.Call localVarCall = getDepositAddressCall(currency, _callback);
        return localVarCall;
    }

    /**
     * Generate currency deposit address
     * 
     * @param currency Currency name (required)
     * @return DepositAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address successfully generated </td><td>  -  </td></tr>
     </table>
     */
    public DepositAddress getDepositAddress(String currency) throws ApiException {
        ApiResponse<DepositAddress> localVarResp = getDepositAddressWithHttpInfo(currency);
        return localVarResp.getData();
    }

    /**
     * Generate currency deposit address
     * 
     * @param currency Currency name (required)
     * @return ApiResponse&lt;DepositAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address successfully generated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DepositAddress> getDepositAddressWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = getDepositAddressValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<DepositAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate currency deposit address (asynchronously)
     * 
     * @param currency Currency name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address successfully generated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDepositAddressAsync(String currency, final ApiCallback<DepositAddress> _callback) throws ApiException {
        okhttp3.Call localVarCall = getDepositAddressValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<DepositAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listWithdrawalsCall(String currency, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/withdrawals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWithdrawalsValidateBeforeCall(String currency, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listWithdrawalsCall(currency, from, to, limit, offset, _callback);
        return localVarCall;
    }


    private ApiResponse<List<WithdrawalRecord>> listWithdrawalsWithHttpInfo(String currency, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listWithdrawalsValidateBeforeCall(currency, from, to, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<WithdrawalRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWithdrawalsAsync(String currency, Long from, Long to, Integer limit, Integer offset, final ApiCallback<List<WithdrawalRecord>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listWithdrawalsValidateBeforeCall(currency, from, to, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<WithdrawalRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistWithdrawalsRequest {
        private String currency;
        private Long from;
        private Long to;
        private Integer limit;
        private Integer offset;

        private APIlistWithdrawalsRequest() {
        }

        /**
         * Set currency
         * @param currency Filter by currency. Return all currency records if not specified (optional)
         * @return APIlistWithdrawalsRequest
         */
        public APIlistWithdrawalsRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set from
         * @param from Time range beginning, default to 7 days before current time (optional)
         * @return APIlistWithdrawalsRequest
         */
        public APIlistWithdrawalsRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIlistWithdrawalsRequest
         */
        public APIlistWithdrawalsRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIlistWithdrawalsRequest
         */
        public APIlistWithdrawalsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset List offset, starting from 0 (optional, default to 0)
         * @return APIlistWithdrawalsRequest
         */
        public APIlistWithdrawalsRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for listWithdrawals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWithdrawalsCall(currency, from, to, limit, offset, _callback);
        }

        /**
         * Execute listWithdrawals request
         * @return List&lt;WithdrawalRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<WithdrawalRecord> execute() throws ApiException {
            ApiResponse<List<WithdrawalRecord>> localVarResp = listWithdrawalsWithHttpInfo(currency, from, to, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute listWithdrawals request with HTTP info returned
         * @return ApiResponse&lt;List&lt;WithdrawalRecord&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<WithdrawalRecord>> executeWithHttpInfo() throws ApiException {
            return listWithdrawalsWithHttpInfo(currency, from, to, limit, offset);
        }

        /**
         * Execute listWithdrawals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<WithdrawalRecord>> _callback) throws ApiException {
            return listWithdrawalsAsync(currency, from, to, limit, offset, _callback);
        }
    }

    /**
     * Retrieve withdrawal records
     * Record time range cannot exceed 30 days
     * @return APIlistWithdrawalsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistWithdrawalsRequest listWithdrawals() {
        return new APIlistWithdrawalsRequest();
    }

    private okhttp3.Call listDepositsCall(String currency, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/deposits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDepositsValidateBeforeCall(String currency, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listDepositsCall(currency, from, to, limit, offset, _callback);
        return localVarCall;
    }


    private ApiResponse<List<LedgerRecord>> listDepositsWithHttpInfo(String currency, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listDepositsValidateBeforeCall(currency, from, to, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<LedgerRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDepositsAsync(String currency, Long from, Long to, Integer limit, Integer offset, final ApiCallback<List<LedgerRecord>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listDepositsValidateBeforeCall(currency, from, to, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<LedgerRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistDepositsRequest {
        private String currency;
        private Long from;
        private Long to;
        private Integer limit;
        private Integer offset;

        private APIlistDepositsRequest() {
        }

        /**
         * Set currency
         * @param currency Filter by currency. Return all currency records if not specified (optional)
         * @return APIlistDepositsRequest
         */
        public APIlistDepositsRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set from
         * @param from Time range beginning, default to 7 days before current time (optional)
         * @return APIlistDepositsRequest
         */
        public APIlistDepositsRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIlistDepositsRequest
         */
        public APIlistDepositsRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set limit
         * @param limit The maximum number of entries returned in the list is limited to 500 transactions. (optional, default to 100)
         * @return APIlistDepositsRequest
         */
        public APIlistDepositsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset List offset, starting from 0 (optional, default to 0)
         * @return APIlistDepositsRequest
         */
        public APIlistDepositsRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for listDeposits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDepositsCall(currency, from, to, limit, offset, _callback);
        }

        /**
         * Execute listDeposits request
         * @return List&lt;LedgerRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<LedgerRecord> execute() throws ApiException {
            ApiResponse<List<LedgerRecord>> localVarResp = listDepositsWithHttpInfo(currency, from, to, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute listDeposits request with HTTP info returned
         * @return ApiResponse&lt;List&lt;LedgerRecord&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<LedgerRecord>> executeWithHttpInfo() throws ApiException {
            return listDepositsWithHttpInfo(currency, from, to, limit, offset);
        }

        /**
         * Execute listDeposits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<LedgerRecord>> _callback) throws ApiException {
            return listDepositsAsync(currency, from, to, limit, offset, _callback);
        }
    }

    /**
     * Retrieve deposit records
     * Record time range cannot exceed 30 days
     * @return APIlistDepositsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistDepositsRequest listDeposits() {
        return new APIlistDepositsRequest();
    }

    /**
     * Build call for transfer
     * @param transfer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferCall(Transfer transfer, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transfer;

        // create path and map variables
        String localVarPath = "/wallet/transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferValidateBeforeCall(Transfer transfer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transfer' is set
        if (transfer == null) {
            throw new ApiException("Missing the required parameter 'transfer' when calling transfer(Async)");
        }

        okhttp3.Call localVarCall = transferCall(transfer, _callback);
        return localVarCall;
    }

    /**
     * Transfer between trading accounts
     * Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - options
     * @param transfer  (required)
     * @return TransactionID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public TransactionID transfer(Transfer transfer) throws ApiException {
        ApiResponse<TransactionID> localVarResp = transferWithHttpInfo(transfer);
        return localVarResp.getData();
    }

    /**
     * Transfer between trading accounts
     * Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - options
     * @param transfer  (required)
     * @return ApiResponse&lt;TransactionID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionID> transferWithHttpInfo(Transfer transfer) throws ApiException {
        okhttp3.Call localVarCall = transferValidateBeforeCall(transfer, null);
        Type localVarReturnType = new TypeToken<TransactionID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer between trading accounts (asynchronously)
     * Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - options
     * @param transfer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferAsync(Transfer transfer, final ApiCallback<TransactionID> _callback) throws ApiException {
        okhttp3.Call localVarCall = transferValidateBeforeCall(transfer, _callback);
        Type localVarReturnType = new TypeToken<TransactionID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listSubAccountTransfersCall(String subUid, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/sub_account_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (subUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub_uid", subUid));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubAccountTransfersValidateBeforeCall(String subUid, Long from, Long to, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountTransfersCall(subUid, from, to, limit, offset, _callback);
        return localVarCall;
    }


    private ApiResponse<List<SubAccountTransfer>> listSubAccountTransfersWithHttpInfo(String subUid, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountTransfersValidateBeforeCall(subUid, from, to, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<SubAccountTransfer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSubAccountTransfersAsync(String subUid, Long from, Long to, Integer limit, Integer offset, final ApiCallback<List<SubAccountTransfer>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountTransfersValidateBeforeCall(subUid, from, to, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<SubAccountTransfer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSubAccountTransfersRequest {
        private String subUid;
        private Long from;
        private Long to;
        private Integer limit;
        private Integer offset;

        private APIlistSubAccountTransfersRequest() {
        }

        /**
         * Set subUid
         * @param subUid User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)
         * @return APIlistSubAccountTransfersRequest
         */
        public APIlistSubAccountTransfersRequest subUid(String subUid) {
            this.subUid = subUid;
            return this;
        }

        /**
         * Set from
         * @param from Time range beginning, default to 7 days before current time (optional)
         * @return APIlistSubAccountTransfersRequest
         */
        public APIlistSubAccountTransfersRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIlistSubAccountTransfersRequest
         */
        public APIlistSubAccountTransfersRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIlistSubAccountTransfersRequest
         */
        public APIlistSubAccountTransfersRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset List offset, starting from 0 (optional, default to 0)
         * @return APIlistSubAccountTransfersRequest
         */
        public APIlistSubAccountTransfersRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for listSubAccountTransfers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSubAccountTransfersCall(subUid, from, to, limit, offset, _callback);
        }

        /**
         * Execute listSubAccountTransfers request
         * @return List&lt;SubAccountTransfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<SubAccountTransfer> execute() throws ApiException {
            ApiResponse<List<SubAccountTransfer>> localVarResp = listSubAccountTransfersWithHttpInfo(subUid, from, to, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute listSubAccountTransfers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SubAccountTransfer&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SubAccountTransfer>> executeWithHttpInfo() throws ApiException {
            return listSubAccountTransfersWithHttpInfo(subUid, from, to, limit, offset);
        }

        /**
         * Execute listSubAccountTransfers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SubAccountTransfer>> _callback) throws ApiException {
            return listSubAccountTransfersAsync(subUid, from, to, limit, offset, _callback);
        }
    }

    /**
     * Retrieve transfer records between main and sub accounts
     * Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
     * @return APIlistSubAccountTransfersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSubAccountTransfersRequest listSubAccountTransfers() {
        return new APIlistSubAccountTransfersRequest();
    }

    /**
     * Build call for transferWithSubAccount
     * @param subAccountTransfer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferWithSubAccountCall(SubAccountTransfer subAccountTransfer, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = subAccountTransfer;

        // create path and map variables
        String localVarPath = "/wallet/sub_account_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferWithSubAccountValidateBeforeCall(SubAccountTransfer subAccountTransfer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subAccountTransfer' is set
        if (subAccountTransfer == null) {
            throw new ApiException("Missing the required parameter 'subAccountTransfer' when calling transferWithSubAccount(Async)");
        }

        okhttp3.Call localVarCall = transferWithSubAccountCall(subAccountTransfer, _callback);
        return localVarCall;
    }

    /**
     * Transfer between main and sub accounts
     * Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
     * @param subAccountTransfer  (required)
     * @return TransactionID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public TransactionID transferWithSubAccount(SubAccountTransfer subAccountTransfer) throws ApiException {
        ApiResponse<TransactionID> localVarResp = transferWithSubAccountWithHttpInfo(subAccountTransfer);
        return localVarResp.getData();
    }

    /**
     * Transfer between main and sub accounts
     * Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
     * @param subAccountTransfer  (required)
     * @return ApiResponse&lt;TransactionID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionID> transferWithSubAccountWithHttpInfo(SubAccountTransfer subAccountTransfer) throws ApiException {
        okhttp3.Call localVarCall = transferWithSubAccountValidateBeforeCall(subAccountTransfer, null);
        Type localVarReturnType = new TypeToken<TransactionID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer between main and sub accounts (asynchronously)
     * Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
     * @param subAccountTransfer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferWithSubAccountAsync(SubAccountTransfer subAccountTransfer, final ApiCallback<TransactionID> _callback) throws ApiException {
        okhttp3.Call localVarCall = transferWithSubAccountValidateBeforeCall(subAccountTransfer, _callback);
        Type localVarReturnType = new TypeToken<TransactionID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for subAccountToSubAccount
     * @param subAccountToSubAccount  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subAccountToSubAccountCall(SubAccountToSubAccount subAccountToSubAccount, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = subAccountToSubAccount;

        // create path and map variables
        String localVarPath = "/wallet/sub_account_to_sub_account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subAccountToSubAccountValidateBeforeCall(SubAccountToSubAccount subAccountToSubAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subAccountToSubAccount' is set
        if (subAccountToSubAccount == null) {
            throw new ApiException("Missing the required parameter 'subAccountToSubAccount' when calling subAccountToSubAccount(Async)");
        }

        okhttp3.Call localVarCall = subAccountToSubAccountCall(subAccountToSubAccount, _callback);
        return localVarCall;
    }

    /**
     * Sub-account transfers to sub-account
     * It is possible to perform balance transfers between two sub-accounts under the same main account. You can use either the API Key of the main account or the API Key of the sub-account to initiate the transfer.
     * @param subAccountToSubAccount  (required)
     * @return TransactionID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public TransactionID subAccountToSubAccount(SubAccountToSubAccount subAccountToSubAccount) throws ApiException {
        ApiResponse<TransactionID> localVarResp = subAccountToSubAccountWithHttpInfo(subAccountToSubAccount);
        return localVarResp.getData();
    }

    /**
     * Sub-account transfers to sub-account
     * It is possible to perform balance transfers between two sub-accounts under the same main account. You can use either the API Key of the main account or the API Key of the sub-account to initiate the transfer.
     * @param subAccountToSubAccount  (required)
     * @return ApiResponse&lt;TransactionID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionID> subAccountToSubAccountWithHttpInfo(SubAccountToSubAccount subAccountToSubAccount) throws ApiException {
        okhttp3.Call localVarCall = subAccountToSubAccountValidateBeforeCall(subAccountToSubAccount, null);
        Type localVarReturnType = new TypeToken<TransactionID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sub-account transfers to sub-account (asynchronously)
     * It is possible to perform balance transfers between two sub-accounts under the same main account. You can use either the API Key of the main account or the API Key of the sub-account to initiate the transfer.
     * @param subAccountToSubAccount  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance transferred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subAccountToSubAccountAsync(SubAccountToSubAccount subAccountToSubAccount, final ApiCallback<TransactionID> _callback) throws ApiException {
        okhttp3.Call localVarCall = subAccountToSubAccountValidateBeforeCall(subAccountToSubAccount, _callback);
        Type localVarReturnType = new TypeToken<TransactionID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getTransferOrderStatusCall(String clientOrderId, String txId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/order_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_order_id", clientOrderId));
        }

        if (txId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_id", txId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransferOrderStatusValidateBeforeCall(String clientOrderId, String txId, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getTransferOrderStatusCall(clientOrderId, txId, _callback);
        return localVarCall;
    }


    private ApiResponse<TransferOrderStatus> getTransferOrderStatusWithHttpInfo(String clientOrderId, String txId) throws ApiException {
        okhttp3.Call localVarCall = getTransferOrderStatusValidateBeforeCall(clientOrderId, txId, null);
        Type localVarReturnType = new TypeToken<TransferOrderStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransferOrderStatusAsync(String clientOrderId, String txId, final ApiCallback<TransferOrderStatus> _callback) throws ApiException {
        okhttp3.Call localVarCall = getTransferOrderStatusValidateBeforeCall(clientOrderId, txId, _callback);
        Type localVarReturnType = new TypeToken<TransferOrderStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransferOrderStatusRequest {
        private String clientOrderId;
        private String txId;

        private APIgetTransferOrderStatusRequest() {
        }

        /**
         * Set clientOrderId
         * @param clientOrderId The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters. (optional)
         * @return APIgetTransferOrderStatusRequest
         */
        public APIgetTransferOrderStatusRequest clientOrderId(String clientOrderId) {
            this.clientOrderId = clientOrderId;
            return this;
        }

        /**
         * Set txId
         * @param txId The transfer operation number and client_order_id cannot be empty at the same time (optional)
         * @return APIgetTransferOrderStatusRequest
         */
        public APIgetTransferOrderStatusRequest txId(String txId) {
            this.txId = txId;
            return this;
        }

        /**
         * Build call for getTransferOrderStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transfer status obtained successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransferOrderStatusCall(clientOrderId, txId, _callback);
        }

        /**
         * Execute getTransferOrderStatus request
         * @return TransferOrderStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transfer status obtained successfully </td><td>  -  </td></tr>
         </table>
         */
        public TransferOrderStatus execute() throws ApiException {
            ApiResponse<TransferOrderStatus> localVarResp = getTransferOrderStatusWithHttpInfo(clientOrderId, txId);
            return localVarResp.getData();
        }

        /**
         * Execute getTransferOrderStatus request with HTTP info returned
         * @return ApiResponse&lt;TransferOrderStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transfer status obtained successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransferOrderStatus> executeWithHttpInfo() throws ApiException {
            return getTransferOrderStatusWithHttpInfo(clientOrderId, txId);
        }

        /**
         * Execute getTransferOrderStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transfer status obtained successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransferOrderStatus> _callback) throws ApiException {
            return getTransferOrderStatusAsync(clientOrderId, txId, _callback);
        }
    }

    /**
     * Transfer status query
     * Support querying transfer status based on user-defined client_order_id or tx_id returned by the transfer interface
     * @return APIgetTransferOrderStatusRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transfer status obtained successfully </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransferOrderStatusRequest getTransferOrderStatus() {
        return new APIgetTransferOrderStatusRequest();
    }

    private okhttp3.Call listWithdrawStatusCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/withdraw_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWithdrawStatusValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listWithdrawStatusCall(currency, _callback);
        return localVarCall;
    }


    private ApiResponse<List<WithdrawStatus>> listWithdrawStatusWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = listWithdrawStatusValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<List<WithdrawStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWithdrawStatusAsync(String currency, final ApiCallback<List<WithdrawStatus>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listWithdrawStatusValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<List<WithdrawStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistWithdrawStatusRequest {
        private String currency;

        private APIlistWithdrawStatusRequest() {
        }

        /**
         * Set currency
         * @param currency Retrieve data of the specified currency (optional)
         * @return APIlistWithdrawStatusRequest
         */
        public APIlistWithdrawStatusRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Build call for listWithdrawStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWithdrawStatusCall(currency, _callback);
        }

        /**
         * Execute listWithdrawStatus request
         * @return List&lt;WithdrawStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<WithdrawStatus> execute() throws ApiException {
            ApiResponse<List<WithdrawStatus>> localVarResp = listWithdrawStatusWithHttpInfo(currency);
            return localVarResp.getData();
        }

        /**
         * Execute listWithdrawStatus request with HTTP info returned
         * @return ApiResponse&lt;List&lt;WithdrawStatus&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<WithdrawStatus>> executeWithHttpInfo() throws ApiException {
            return listWithdrawStatusWithHttpInfo(currency);
        }

        /**
         * Execute listWithdrawStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<WithdrawStatus>> _callback) throws ApiException {
            return listWithdrawStatusAsync(currency, _callback);
        }
    }

    /**
     * Retrieve withdrawal status
     * 
     * @return APIlistWithdrawStatusRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistWithdrawStatusRequest listWithdrawStatus() {
        return new APIlistWithdrawStatusRequest();
    }

    private okhttp3.Call listSubAccountBalancesCall(String subUid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/sub_account_balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (subUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub_uid", subUid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubAccountBalancesValidateBeforeCall(String subUid, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountBalancesCall(subUid, _callback);
        return localVarCall;
    }


    private ApiResponse<List<SubAccountBalance>> listSubAccountBalancesWithHttpInfo(String subUid) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountBalancesValidateBeforeCall(subUid, null);
        Type localVarReturnType = new TypeToken<List<SubAccountBalance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSubAccountBalancesAsync(String subUid, final ApiCallback<List<SubAccountBalance>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountBalancesValidateBeforeCall(subUid, _callback);
        Type localVarReturnType = new TypeToken<List<SubAccountBalance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSubAccountBalancesRequest {
        private String subUid;

        private APIlistSubAccountBalancesRequest() {
        }

        /**
         * Set subUid
         * @param subUid User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)
         * @return APIlistSubAccountBalancesRequest
         */
        public APIlistSubAccountBalancesRequest subUid(String subUid) {
            this.subUid = subUid;
            return this;
        }

        /**
         * Build call for listSubAccountBalances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSubAccountBalancesCall(subUid, _callback);
        }

        /**
         * Execute listSubAccountBalances request
         * @return List&lt;SubAccountBalance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<SubAccountBalance> execute() throws ApiException {
            ApiResponse<List<SubAccountBalance>> localVarResp = listSubAccountBalancesWithHttpInfo(subUid);
            return localVarResp.getData();
        }

        /**
         * Execute listSubAccountBalances request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SubAccountBalance&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SubAccountBalance>> executeWithHttpInfo() throws ApiException {
            return listSubAccountBalancesWithHttpInfo(subUid);
        }

        /**
         * Execute listSubAccountBalances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SubAccountBalance>> _callback) throws ApiException {
            return listSubAccountBalancesAsync(subUid, _callback);
        }
    }

    /**
     * Retrieve sub account balances
     * 
     * @return APIlistSubAccountBalancesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSubAccountBalancesRequest listSubAccountBalances() {
        return new APIlistSubAccountBalancesRequest();
    }

    private okhttp3.Call listSubAccountMarginBalancesCall(String subUid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/sub_account_margin_balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (subUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub_uid", subUid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubAccountMarginBalancesValidateBeforeCall(String subUid, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountMarginBalancesCall(subUid, _callback);
        return localVarCall;
    }


    private ApiResponse<List<SubAccountMarginBalance>> listSubAccountMarginBalancesWithHttpInfo(String subUid) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountMarginBalancesValidateBeforeCall(subUid, null);
        Type localVarReturnType = new TypeToken<List<SubAccountMarginBalance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSubAccountMarginBalancesAsync(String subUid, final ApiCallback<List<SubAccountMarginBalance>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountMarginBalancesValidateBeforeCall(subUid, _callback);
        Type localVarReturnType = new TypeToken<List<SubAccountMarginBalance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSubAccountMarginBalancesRequest {
        private String subUid;

        private APIlistSubAccountMarginBalancesRequest() {
        }

        /**
         * Set subUid
         * @param subUid User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)
         * @return APIlistSubAccountMarginBalancesRequest
         */
        public APIlistSubAccountMarginBalancesRequest subUid(String subUid) {
            this.subUid = subUid;
            return this;
        }

        /**
         * Build call for listSubAccountMarginBalances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSubAccountMarginBalancesCall(subUid, _callback);
        }

        /**
         * Execute listSubAccountMarginBalances request
         * @return List&lt;SubAccountMarginBalance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<SubAccountMarginBalance> execute() throws ApiException {
            ApiResponse<List<SubAccountMarginBalance>> localVarResp = listSubAccountMarginBalancesWithHttpInfo(subUid);
            return localVarResp.getData();
        }

        /**
         * Execute listSubAccountMarginBalances request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SubAccountMarginBalance&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SubAccountMarginBalance>> executeWithHttpInfo() throws ApiException {
            return listSubAccountMarginBalancesWithHttpInfo(subUid);
        }

        /**
         * Execute listSubAccountMarginBalances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SubAccountMarginBalance>> _callback) throws ApiException {
            return listSubAccountMarginBalancesAsync(subUid, _callback);
        }
    }

    /**
     * Query sub accounts&#39; margin balances
     * 
     * @return APIlistSubAccountMarginBalancesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSubAccountMarginBalancesRequest listSubAccountMarginBalances() {
        return new APIlistSubAccountMarginBalancesRequest();
    }

    private okhttp3.Call listSubAccountFuturesBalancesCall(String subUid, String settle, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/sub_account_futures_balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (subUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub_uid", subUid));
        }

        if (settle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("settle", settle));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubAccountFuturesBalancesValidateBeforeCall(String subUid, String settle, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountFuturesBalancesCall(subUid, settle, _callback);
        return localVarCall;
    }


    private ApiResponse<List<SubAccountFuturesBalance>> listSubAccountFuturesBalancesWithHttpInfo(String subUid, String settle) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountFuturesBalancesValidateBeforeCall(subUid, settle, null);
        Type localVarReturnType = new TypeToken<List<SubAccountFuturesBalance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSubAccountFuturesBalancesAsync(String subUid, String settle, final ApiCallback<List<SubAccountFuturesBalance>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountFuturesBalancesValidateBeforeCall(subUid, settle, _callback);
        Type localVarReturnType = new TypeToken<List<SubAccountFuturesBalance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSubAccountFuturesBalancesRequest {
        private String subUid;
        private String settle;

        private APIlistSubAccountFuturesBalancesRequest() {
        }

        /**
         * Set subUid
         * @param subUid User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)
         * @return APIlistSubAccountFuturesBalancesRequest
         */
        public APIlistSubAccountFuturesBalancesRequest subUid(String subUid) {
            this.subUid = subUid;
            return this;
        }

        /**
         * Set settle
         * @param settle Query only balances of specified settle currency (optional)
         * @return APIlistSubAccountFuturesBalancesRequest
         */
        public APIlistSubAccountFuturesBalancesRequest settle(String settle) {
            this.settle = settle;
            return this;
        }

        /**
         * Build call for listSubAccountFuturesBalances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSubAccountFuturesBalancesCall(subUid, settle, _callback);
        }

        /**
         * Execute listSubAccountFuturesBalances request
         * @return List&lt;SubAccountFuturesBalance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<SubAccountFuturesBalance> execute() throws ApiException {
            ApiResponse<List<SubAccountFuturesBalance>> localVarResp = listSubAccountFuturesBalancesWithHttpInfo(subUid, settle);
            return localVarResp.getData();
        }

        /**
         * Execute listSubAccountFuturesBalances request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SubAccountFuturesBalance&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SubAccountFuturesBalance>> executeWithHttpInfo() throws ApiException {
            return listSubAccountFuturesBalancesWithHttpInfo(subUid, settle);
        }

        /**
         * Execute listSubAccountFuturesBalances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SubAccountFuturesBalance>> _callback) throws ApiException {
            return listSubAccountFuturesBalancesAsync(subUid, settle, _callback);
        }
    }

    /**
     * Query sub accounts&#39; futures account balances
     * 
     * @return APIlistSubAccountFuturesBalancesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSubAccountFuturesBalancesRequest listSubAccountFuturesBalances() {
        return new APIlistSubAccountFuturesBalancesRequest();
    }

    private okhttp3.Call listSubAccountCrossMarginBalancesCall(String subUid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/sub_account_cross_margin_balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (subUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub_uid", subUid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubAccountCrossMarginBalancesValidateBeforeCall(String subUid, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountCrossMarginBalancesCall(subUid, _callback);
        return localVarCall;
    }


    private ApiResponse<List<SubAccountCrossMarginBalance>> listSubAccountCrossMarginBalancesWithHttpInfo(String subUid) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountCrossMarginBalancesValidateBeforeCall(subUid, null);
        Type localVarReturnType = new TypeToken<List<SubAccountCrossMarginBalance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSubAccountCrossMarginBalancesAsync(String subUid, final ApiCallback<List<SubAccountCrossMarginBalance>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listSubAccountCrossMarginBalancesValidateBeforeCall(subUid, _callback);
        Type localVarReturnType = new TypeToken<List<SubAccountCrossMarginBalance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSubAccountCrossMarginBalancesRequest {
        private String subUid;

        private APIlistSubAccountCrossMarginBalancesRequest() {
        }

        /**
         * Set subUid
         * @param subUid User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)
         * @return APIlistSubAccountCrossMarginBalancesRequest
         */
        public APIlistSubAccountCrossMarginBalancesRequest subUid(String subUid) {
            this.subUid = subUid;
            return this;
        }

        /**
         * Build call for listSubAccountCrossMarginBalances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSubAccountCrossMarginBalancesCall(subUid, _callback);
        }

        /**
         * Execute listSubAccountCrossMarginBalances request
         * @return List&lt;SubAccountCrossMarginBalance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<SubAccountCrossMarginBalance> execute() throws ApiException {
            ApiResponse<List<SubAccountCrossMarginBalance>> localVarResp = listSubAccountCrossMarginBalancesWithHttpInfo(subUid);
            return localVarResp.getData();
        }

        /**
         * Execute listSubAccountCrossMarginBalances request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SubAccountCrossMarginBalance&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SubAccountCrossMarginBalance>> executeWithHttpInfo() throws ApiException {
            return listSubAccountCrossMarginBalancesWithHttpInfo(subUid);
        }

        /**
         * Execute listSubAccountCrossMarginBalances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SubAccountCrossMarginBalance>> _callback) throws ApiException {
            return listSubAccountCrossMarginBalancesAsync(subUid, _callback);
        }
    }

    /**
     * Query subaccount&#39;s cross_margin account info
     * 
     * @return APIlistSubAccountCrossMarginBalancesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSubAccountCrossMarginBalancesRequest listSubAccountCrossMarginBalances() {
        return new APIlistSubAccountCrossMarginBalancesRequest();
    }

    private okhttp3.Call listSavedAddressCall(String currency, String chain, String limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/saved_address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (chain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chain", chain));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSavedAddressValidateBeforeCall(String currency, String chain, String limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling listSavedAddress(Async)");
        }

        okhttp3.Call localVarCall = listSavedAddressCall(currency, chain, limit, page, _callback);
        return localVarCall;
    }


    private ApiResponse<List<SavedAddress>> listSavedAddressWithHttpInfo(String currency, String chain, String limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listSavedAddressValidateBeforeCall(currency, chain, limit, page, null);
        Type localVarReturnType = new TypeToken<List<SavedAddress>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSavedAddressAsync(String currency, String chain, String limit, Integer page, final ApiCallback<List<SavedAddress>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listSavedAddressValidateBeforeCall(currency, chain, limit, page, _callback);
        Type localVarReturnType = new TypeToken<List<SavedAddress>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSavedAddressRequest {
        private final String currency;
        private String chain;
        private String limit;
        private Integer page;

        private APIlistSavedAddressRequest(String currency) {
            this.currency = currency;
        }

        /**
         * Set chain
         * @param chain Chain name (optional, default to &quot;&quot;)
         * @return APIlistSavedAddressRequest
         */
        public APIlistSavedAddressRequest chain(String chain) {
            this.chain = chain;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number returned, 100 at most (optional, default to &quot;50&quot;)
         * @return APIlistSavedAddressRequest
         */
        public APIlistSavedAddressRequest limit(String limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistSavedAddressRequest
         */
        public APIlistSavedAddressRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for listSavedAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSavedAddressCall(currency, chain, limit, page, _callback);
        }

        /**
         * Execute listSavedAddress request
         * @return List&lt;SavedAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<SavedAddress> execute() throws ApiException {
            ApiResponse<List<SavedAddress>> localVarResp = listSavedAddressWithHttpInfo(currency, chain, limit, page);
            return localVarResp.getData();
        }

        /**
         * Execute listSavedAddress request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SavedAddress&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SavedAddress>> executeWithHttpInfo() throws ApiException {
            return listSavedAddressWithHttpInfo(currency, chain, limit, page);
        }

        /**
         * Execute listSavedAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SavedAddress>> _callback) throws ApiException {
            return listSavedAddressAsync(currency, chain, limit, page, _callback);
        }
    }

    /**
     * Query saved address
     * 
     * @param currency Currency (required)
     * @return APIlistSavedAddressRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSavedAddressRequest listSavedAddress(String currency) {
        return new APIlistSavedAddressRequest(currency);
    }

    private okhttp3.Call getTradeFeeCall(String currencyPair, String settle, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/fee";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyPair != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_pair", currencyPair));
        }

        if (settle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("settle", settle));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTradeFeeValidateBeforeCall(String currencyPair, String settle, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getTradeFeeCall(currencyPair, settle, _callback);
        return localVarCall;
    }


    private ApiResponse<TradeFee> getTradeFeeWithHttpInfo(String currencyPair, String settle) throws ApiException {
        okhttp3.Call localVarCall = getTradeFeeValidateBeforeCall(currencyPair, settle, null);
        Type localVarReturnType = new TypeToken<TradeFee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTradeFeeAsync(String currencyPair, String settle, final ApiCallback<TradeFee> _callback) throws ApiException {
        okhttp3.Call localVarCall = getTradeFeeValidateBeforeCall(currencyPair, settle, _callback);
        Type localVarReturnType = new TypeToken<TradeFee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTradeFeeRequest {
        private String currencyPair;
        private String settle;

        private APIgetTradeFeeRequest() {
        }

        /**
         * Set currencyPair
         * @param currencyPair Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)
         * @return APIgetTradeFeeRequest
         */
        public APIgetTradeFeeRequest currencyPair(String currencyPair) {
            this.currencyPair = currencyPair;
            return this;
        }

        /**
         * Set settle
         * @param settle Specify the settlement currency of the contract to get more accurate rate settings  This field is optional. Generally, the rate settings for all settlement currencies are the same. (optional)
         * @return APIgetTradeFeeRequest
         */
        public APIgetTradeFeeRequest settle(String settle) {
            this.settle = settle;
            return this;
        }

        /**
         * Build call for getTradeFee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTradeFeeCall(currencyPair, settle, _callback);
        }

        /**
         * Execute getTradeFee request
         * @return TradeFee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public TradeFee execute() throws ApiException {
            ApiResponse<TradeFee> localVarResp = getTradeFeeWithHttpInfo(currencyPair, settle);
            return localVarResp.getData();
        }

        /**
         * Execute getTradeFee request with HTTP info returned
         * @return ApiResponse&lt;TradeFee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TradeFee> executeWithHttpInfo() throws ApiException {
            return getTradeFeeWithHttpInfo(currencyPair, settle);
        }

        /**
         * Execute getTradeFee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TradeFee> _callback) throws ApiException {
            return getTradeFeeAsync(currencyPair, settle, _callback);
        }
    }

    /**
     * Retrieve personal trading fee
     * 
     * @return APIgetTradeFeeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTradeFeeRequest getTradeFee() {
        return new APIgetTradeFeeRequest();
    }

    private okhttp3.Call getTotalBalanceCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/total_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTotalBalanceValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getTotalBalanceCall(currency, _callback);
        return localVarCall;
    }


    private ApiResponse<TotalBalance> getTotalBalanceWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = getTotalBalanceValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<TotalBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTotalBalanceAsync(String currency, final ApiCallback<TotalBalance> _callback) throws ApiException {
        okhttp3.Call localVarCall = getTotalBalanceValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<TotalBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTotalBalanceRequest {
        private String currency;

        private APIgetTotalBalanceRequest() {
        }

        /**
         * Set currency
         * @param currency Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)
         * @return APIgetTotalBalanceRequest
         */
        public APIgetTotalBalanceRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Build call for getTotalBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request is valid and is successfully responded </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTotalBalanceCall(currency, _callback);
        }

        /**
         * Execute getTotalBalance request
         * @return TotalBalance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request is valid and is successfully responded </td><td>  -  </td></tr>
         </table>
         */
        public TotalBalance execute() throws ApiException {
            ApiResponse<TotalBalance> localVarResp = getTotalBalanceWithHttpInfo(currency);
            return localVarResp.getData();
        }

        /**
         * Execute getTotalBalance request with HTTP info returned
         * @return ApiResponse&lt;TotalBalance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request is valid and is successfully responded </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TotalBalance> executeWithHttpInfo() throws ApiException {
            return getTotalBalanceWithHttpInfo(currency);
        }

        /**
         * Execute getTotalBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request is valid and is successfully responded </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TotalBalance> _callback) throws ApiException {
            return getTotalBalanceAsync(currency, _callback);
        }
    }

    /**
     * Retrieve user&#39;s total balances
     * This endpoint returns an approximate sum of exchanged amount from all currencies to input currency for each account.The exchange rate and account balance could have been cached for at most 1 minute. It is not recommended to use its result for any trading calculation.  For trading calculation, use the corresponding account query endpoint for each account type. For example:   - &#x60;GET /spot/accounts&#x60; to query spot account balance - &#x60;GET /margin/accounts&#x60; to query margin account balance - &#x60;GET /futures/{settle}/accounts&#x60; to query futures account balance
     * @return APIgetTotalBalanceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request is valid and is successfully responded </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTotalBalanceRequest getTotalBalance() {
        return new APIgetTotalBalanceRequest();
    }

    /**
     * Build call for listSmallBalance
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSmallBalanceCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/small_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSmallBalanceValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listSmallBalanceCall(_callback);
        return localVarCall;
    }

    /**
     * List small balance
     * 
     * @return List&lt;SmallBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<SmallBalance> listSmallBalance() throws ApiException {
        ApiResponse<List<SmallBalance>> localVarResp = listSmallBalanceWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List small balance
     * 
     * @return ApiResponse&lt;List&lt;SmallBalance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SmallBalance>> listSmallBalanceWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listSmallBalanceValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SmallBalance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List small balance (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSmallBalanceAsync(final ApiCallback<List<SmallBalance>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listSmallBalanceValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SmallBalance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for convertSmallBalance
     * @param convertSmallBalance  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertSmallBalanceCall(ConvertSmallBalance convertSmallBalance, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertSmallBalance;

        // create path and map variables
        String localVarPath = "/wallet/small_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertSmallBalanceValidateBeforeCall(ConvertSmallBalance convertSmallBalance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convertSmallBalance' is set
        if (convertSmallBalance == null) {
            throw new ApiException("Missing the required parameter 'convertSmallBalance' when calling convertSmallBalance(Async)");
        }

        okhttp3.Call localVarCall = convertSmallBalanceCall(convertSmallBalance, _callback);
        return localVarCall;
    }

    /**
     * Convert small balance
     * 
     * @param convertSmallBalance  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void convertSmallBalance(ConvertSmallBalance convertSmallBalance) throws ApiException {
        convertSmallBalanceWithHttpInfo(convertSmallBalance);
    }

    /**
     * Convert small balance
     * 
     * @param convertSmallBalance  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> convertSmallBalanceWithHttpInfo(ConvertSmallBalance convertSmallBalance) throws ApiException {
        okhttp3.Call localVarCall = convertSmallBalanceValidateBeforeCall(convertSmallBalance, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Convert small balance (asynchronously)
     * 
     * @param convertSmallBalance  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertSmallBalanceAsync(ConvertSmallBalance convertSmallBalance, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = convertSmallBalanceValidateBeforeCall(convertSmallBalance, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call listSmallBalanceHistoryCall(String currency, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/small_balance_history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSmallBalanceHistoryValidateBeforeCall(String currency, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listSmallBalanceHistoryCall(currency, page, limit, _callback);
        return localVarCall;
    }


    private ApiResponse<List<SmallBalanceHistory>> listSmallBalanceHistoryWithHttpInfo(String currency, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listSmallBalanceHistoryValidateBeforeCall(currency, page, limit, null);
        Type localVarReturnType = new TypeToken<List<SmallBalanceHistory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSmallBalanceHistoryAsync(String currency, Integer page, Integer limit, final ApiCallback<List<SmallBalanceHistory>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listSmallBalanceHistoryValidateBeforeCall(currency, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<SmallBalanceHistory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSmallBalanceHistoryRequest {
        private String currency;
        private Integer page;
        private Integer limit;

        private APIlistSmallBalanceHistoryRequest() {
        }

        /**
         * Set currency
         * @param currency Currency (optional)
         * @return APIlistSmallBalanceHistoryRequest
         */
        public APIlistSmallBalanceHistoryRequest currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistSmallBalanceHistoryRequest
         */
        public APIlistSmallBalanceHistoryRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)
         * @return APIlistSmallBalanceHistoryRequest
         */
        public APIlistSmallBalanceHistoryRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for listSmallBalanceHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSmallBalanceHistoryCall(currency, page, limit, _callback);
        }

        /**
         * Execute listSmallBalanceHistory request
         * @return List&lt;SmallBalanceHistory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<SmallBalanceHistory> execute() throws ApiException {
            ApiResponse<List<SmallBalanceHistory>> localVarResp = listSmallBalanceHistoryWithHttpInfo(currency, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute listSmallBalanceHistory request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SmallBalanceHistory&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SmallBalanceHistory>> executeWithHttpInfo() throws ApiException {
            return listSmallBalanceHistoryWithHttpInfo(currency, page, limit);
        }

        /**
         * Execute listSmallBalanceHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SmallBalanceHistory>> _callback) throws ApiException {
            return listSmallBalanceHistoryAsync(currency, page, limit, _callback);
        }
    }

    /**
     * List small balance history
     * 
     * @return APIlistSmallBalanceHistoryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSmallBalanceHistoryRequest listSmallBalanceHistory() {
        return new APIlistSmallBalanceHistoryRequest();
    }

    private okhttp3.Call listPushOrdersCall(Integer id, Integer from, Integer to, Integer limit, Integer offset, String transactionType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/push";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (transactionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction_type", transactionType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPushOrdersValidateBeforeCall(Integer id, Integer from, Integer to, Integer limit, Integer offset, String transactionType, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listPushOrdersCall(id, from, to, limit, offset, transactionType, _callback);
        return localVarCall;
    }


    private ApiResponse<List<UidPushOrder>> listPushOrdersWithHttpInfo(Integer id, Integer from, Integer to, Integer limit, Integer offset, String transactionType) throws ApiException {
        okhttp3.Call localVarCall = listPushOrdersValidateBeforeCall(id, from, to, limit, offset, transactionType, null);
        Type localVarReturnType = new TypeToken<List<UidPushOrder>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPushOrdersAsync(Integer id, Integer from, Integer to, Integer limit, Integer offset, String transactionType, final ApiCallback<List<UidPushOrder>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listPushOrdersValidateBeforeCall(id, from, to, limit, offset, transactionType, _callback);
        Type localVarReturnType = new TypeToken<List<UidPushOrder>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPushOrdersRequest {
        private Integer id;
        private Integer from;
        private Integer to;
        private Integer limit;
        private Integer offset;
        private String transactionType;

        private APIlistPushOrdersRequest() {
        }

        /**
         * Set id
         * @param id Order ID (optional)
         * @return APIlistPushOrdersRequest
         */
        public APIlistPushOrdersRequest id(Integer id) {
            this.id = id;
            return this;
        }

        /**
         * Set from
         * @param from The start time of the query record. If not specified, it defaults to 7 days forward from the current time, in seconds Unix timestamp (optional)
         * @return APIlistPushOrdersRequest
         */
        public APIlistPushOrdersRequest from(Integer from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to The end time of the query record. If not specified, the default is the current time, which is a Unix timestamp in seconds. (optional)
         * @return APIlistPushOrdersRequest
         */
        public APIlistPushOrdersRequest to(Integer to) {
            this.to = to;
            return this;
        }

        /**
         * Set limit
         * @param limit The maximum number of items returned in the list, the default value is 100 (optional, default to 100)
         * @return APIlistPushOrdersRequest
         */
        public APIlistPushOrdersRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset List offset, starting from 0 (optional, default to 0)
         * @return APIlistPushOrdersRequest
         */
        public APIlistPushOrdersRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set transactionType
         * @param transactionType The list returns the order type &#x60;withdraw&#x60;, &#x60;deposit&#x60;, the default is &#x60;withdraw&#x60;. (optional, default to &quot;withdraw&quot;)
         * @return APIlistPushOrdersRequest
         */
        public APIlistPushOrdersRequest transactionType(String transactionType) {
            this.transactionType = transactionType;
            return this;
        }

        /**
         * Build call for listPushOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPushOrdersCall(id, from, to, limit, offset, transactionType, _callback);
        }

        /**
         * Execute listPushOrders request
         * @return List&lt;UidPushOrder&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<UidPushOrder> execute() throws ApiException {
            ApiResponse<List<UidPushOrder>> localVarResp = listPushOrdersWithHttpInfo(id, from, to, limit, offset, transactionType);
            return localVarResp.getData();
        }

        /**
         * Execute listPushOrders request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UidPushOrder&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UidPushOrder>> executeWithHttpInfo() throws ApiException {
            return listPushOrdersWithHttpInfo(id, from, to, limit, offset, transactionType);
        }

        /**
         * Execute listPushOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UidPushOrder>> _callback) throws ApiException {
            return listPushOrdersAsync(id, from, to, limit, offset, transactionType, _callback);
        }
    }

    /**
     * Retrieve the UID transfer history
     * 
     * @return APIlistPushOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPushOrdersRequest listPushOrders() {
        return new APIlistPushOrdersRequest();
    }

}
