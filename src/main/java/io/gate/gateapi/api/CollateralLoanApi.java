/*
 * Gate API v4
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;

import com.google.gson.reflect.TypeToken;


import io.gate.gateapi.models.CollateralAlign;
import io.gate.gateapi.models.CollateralLoanCurrency;
import io.gate.gateapi.models.CollateralOrder;
import io.gate.gateapi.models.CollateralRecord;
import io.gate.gateapi.models.CreateCollateralOrder;
import io.gate.gateapi.models.OrderResp;
import io.gate.gateapi.models.RepayLoan;
import io.gate.gateapi.models.RepayRecord;
import io.gate.gateapi.models.RepayResp;
import io.gate.gateapi.models.UserLtvInfo;
import io.gate.gateapi.models.UserTotalAmount;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CollateralLoanApi {
    private ApiClient localVarApiClient;

    public CollateralLoanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CollateralLoanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call listCollateralLoanOrdersCall(Integer page, Integer limit, String collateralCurrency, String borrowCurrency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/collateral/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (collateralCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collateral_currency", collateralCurrency));
        }

        if (borrowCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("borrow_currency", borrowCurrency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCollateralLoanOrdersValidateBeforeCall(Integer page, Integer limit, String collateralCurrency, String borrowCurrency, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listCollateralLoanOrdersCall(page, limit, collateralCurrency, borrowCurrency, _callback);
        return localVarCall;
    }


    private ApiResponse<List<CollateralOrder>> listCollateralLoanOrdersWithHttpInfo(Integer page, Integer limit, String collateralCurrency, String borrowCurrency) throws ApiException {
        okhttp3.Call localVarCall = listCollateralLoanOrdersValidateBeforeCall(page, limit, collateralCurrency, borrowCurrency, null);
        Type localVarReturnType = new TypeToken<List<CollateralOrder>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCollateralLoanOrdersAsync(Integer page, Integer limit, String collateralCurrency, String borrowCurrency, final ApiCallback<List<CollateralOrder>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listCollateralLoanOrdersValidateBeforeCall(page, limit, collateralCurrency, borrowCurrency, _callback);
        Type localVarReturnType = new TypeToken<List<CollateralOrder>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistCollateralLoanOrdersRequest {
        private Integer page;
        private Integer limit;
        private String collateralCurrency;
        private String borrowCurrency;

        private APIlistCollateralLoanOrdersRequest() {
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistCollateralLoanOrdersRequest
         */
        public APIlistCollateralLoanOrdersRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIlistCollateralLoanOrdersRequest
         */
        public APIlistCollateralLoanOrdersRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set collateralCurrency
         * @param collateralCurrency Collateral (optional)
         * @return APIlistCollateralLoanOrdersRequest
         */
        public APIlistCollateralLoanOrdersRequest collateralCurrency(String collateralCurrency) {
            this.collateralCurrency = collateralCurrency;
            return this;
        }

        /**
         * Set borrowCurrency
         * @param borrowCurrency Borrowed currency (optional)
         * @return APIlistCollateralLoanOrdersRequest
         */
        public APIlistCollateralLoanOrdersRequest borrowCurrency(String borrowCurrency) {
            this.borrowCurrency = borrowCurrency;
            return this;
        }

        /**
         * Build call for listCollateralLoanOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCollateralLoanOrdersCall(page, limit, collateralCurrency, borrowCurrency, _callback);
        }

        /**
         * Execute listCollateralLoanOrders request
         * @return List&lt;CollateralOrder&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<CollateralOrder> execute() throws ApiException {
            ApiResponse<List<CollateralOrder>> localVarResp = listCollateralLoanOrdersWithHttpInfo(page, limit, collateralCurrency, borrowCurrency);
            return localVarResp.getData();
        }

        /**
         * Execute listCollateralLoanOrders request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CollateralOrder&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CollateralOrder>> executeWithHttpInfo() throws ApiException {
            return listCollateralLoanOrdersWithHttpInfo(page, limit, collateralCurrency, borrowCurrency);
        }

        /**
         * Execute listCollateralLoanOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CollateralOrder>> _callback) throws ApiException {
            return listCollateralLoanOrdersAsync(page, limit, collateralCurrency, borrowCurrency, _callback);
        }
    }

    /**
     * List Orders
     * 
     * @return APIlistCollateralLoanOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistCollateralLoanOrdersRequest listCollateralLoanOrders() {
        return new APIlistCollateralLoanOrdersRequest();
    }

    /**
     * Build call for createCollateralLoan
     * @param createCollateralOrder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollateralLoanCall(CreateCollateralOrder createCollateralOrder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createCollateralOrder;

        // create path and map variables
        String localVarPath = "/loan/collateral/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCollateralLoanValidateBeforeCall(CreateCollateralOrder createCollateralOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCollateralOrder' is set
        if (createCollateralOrder == null) {
            throw new ApiException("Missing the required parameter 'createCollateralOrder' when calling createCollateralLoan(Async)");
        }

        okhttp3.Call localVarCall = createCollateralLoanCall(createCollateralOrder, _callback);
        return localVarCall;
    }

    /**
     * Place order
     * 
     * @param createCollateralOrder  (required)
     * @return OrderResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderResp createCollateralLoan(CreateCollateralOrder createCollateralOrder) throws ApiException {
        ApiResponse<OrderResp> localVarResp = createCollateralLoanWithHttpInfo(createCollateralOrder);
        return localVarResp.getData();
    }

    /**
     * Place order
     * 
     * @param createCollateralOrder  (required)
     * @return ApiResponse&lt;OrderResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderResp> createCollateralLoanWithHttpInfo(CreateCollateralOrder createCollateralOrder) throws ApiException {
        okhttp3.Call localVarCall = createCollateralLoanValidateBeforeCall(createCollateralOrder, null);
        Type localVarReturnType = new TypeToken<OrderResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Place order (asynchronously)
     * 
     * @param createCollateralOrder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollateralLoanAsync(CreateCollateralOrder createCollateralOrder, final ApiCallback<OrderResp> _callback) throws ApiException {
        okhttp3.Call localVarCall = createCollateralLoanValidateBeforeCall(createCollateralOrder, _callback);
        Type localVarReturnType = new TypeToken<OrderResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getCollateralLoanOrderDetail
     * @param orderId Order ID returned on successful order creation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollateralLoanOrderDetailCall(Long orderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/collateral/orders/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollateralLoanOrderDetailValidateBeforeCall(Long orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getCollateralLoanOrderDetail(Async)");
        }

        okhttp3.Call localVarCall = getCollateralLoanOrderDetailCall(orderId, _callback);
        return localVarCall;
    }

    /**
     * Get a single order
     * 
     * @param orderId Order ID returned on successful order creation (required)
     * @return CollateralOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CollateralOrder getCollateralLoanOrderDetail(Long orderId) throws ApiException {
        ApiResponse<CollateralOrder> localVarResp = getCollateralLoanOrderDetailWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Get a single order
     * 
     * @param orderId Order ID returned on successful order creation (required)
     * @return ApiResponse&lt;CollateralOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollateralOrder> getCollateralLoanOrderDetailWithHttpInfo(Long orderId) throws ApiException {
        okhttp3.Call localVarCall = getCollateralLoanOrderDetailValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<CollateralOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single order (asynchronously)
     * 
     * @param orderId Order ID returned on successful order creation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollateralLoanOrderDetailAsync(Long orderId, final ApiCallback<CollateralOrder> _callback) throws ApiException {
        okhttp3.Call localVarCall = getCollateralLoanOrderDetailValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<CollateralOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for repayCollateralLoan
     * @param repayLoan  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repayCollateralLoanCall(RepayLoan repayLoan, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = repayLoan;

        // create path and map variables
        String localVarPath = "/loan/collateral/repay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repayCollateralLoanValidateBeforeCall(RepayLoan repayLoan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repayLoan' is set
        if (repayLoan == null) {
            throw new ApiException("Missing the required parameter 'repayLoan' when calling repayCollateralLoan(Async)");
        }

        okhttp3.Call localVarCall = repayCollateralLoanCall(repayLoan, _callback);
        return localVarCall;
    }

    /**
     * Repayment
     * 
     * @param repayLoan  (required)
     * @return RepayResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public RepayResp repayCollateralLoan(RepayLoan repayLoan) throws ApiException {
        ApiResponse<RepayResp> localVarResp = repayCollateralLoanWithHttpInfo(repayLoan);
        return localVarResp.getData();
    }

    /**
     * Repayment
     * 
     * @param repayLoan  (required)
     * @return ApiResponse&lt;RepayResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepayResp> repayCollateralLoanWithHttpInfo(RepayLoan repayLoan) throws ApiException {
        okhttp3.Call localVarCall = repayCollateralLoanValidateBeforeCall(repayLoan, null);
        Type localVarReturnType = new TypeToken<RepayResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Repayment (asynchronously)
     * 
     * @param repayLoan  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repayCollateralLoanAsync(RepayLoan repayLoan, final ApiCallback<RepayResp> _callback) throws ApiException {
        okhttp3.Call localVarCall = repayCollateralLoanValidateBeforeCall(repayLoan, _callback);
        Type localVarReturnType = new TypeToken<RepayResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listRepayRecordsCall(String source, String borrowCurrency, String collateralCurrency, Integer page, Integer limit, Long from, Long to, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/collateral/repay_records";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (borrowCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("borrow_currency", borrowCurrency));
        }

        if (collateralCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collateral_currency", collateralCurrency));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRepayRecordsValidateBeforeCall(String source, String borrowCurrency, String collateralCurrency, Integer page, Integer limit, Long from, Long to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling listRepayRecords(Async)");
        }

        okhttp3.Call localVarCall = listRepayRecordsCall(source, borrowCurrency, collateralCurrency, page, limit, from, to, _callback);
        return localVarCall;
    }


    private ApiResponse<List<RepayRecord>> listRepayRecordsWithHttpInfo(String source, String borrowCurrency, String collateralCurrency, Integer page, Integer limit, Long from, Long to) throws ApiException {
        okhttp3.Call localVarCall = listRepayRecordsValidateBeforeCall(source, borrowCurrency, collateralCurrency, page, limit, from, to, null);
        Type localVarReturnType = new TypeToken<List<RepayRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRepayRecordsAsync(String source, String borrowCurrency, String collateralCurrency, Integer page, Integer limit, Long from, Long to, final ApiCallback<List<RepayRecord>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listRepayRecordsValidateBeforeCall(source, borrowCurrency, collateralCurrency, page, limit, from, to, _callback);
        Type localVarReturnType = new TypeToken<List<RepayRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistRepayRecordsRequest {
        private final String source;
        private String borrowCurrency;
        private String collateralCurrency;
        private Integer page;
        private Integer limit;
        private Long from;
        private Long to;

        private APIlistRepayRecordsRequest(String source) {
            this.source = source;
        }

        /**
         * Set borrowCurrency
         * @param borrowCurrency Borrowed currency (optional)
         * @return APIlistRepayRecordsRequest
         */
        public APIlistRepayRecordsRequest borrowCurrency(String borrowCurrency) {
            this.borrowCurrency = borrowCurrency;
            return this;
        }

        /**
         * Set collateralCurrency
         * @param collateralCurrency Collateral (optional)
         * @return APIlistRepayRecordsRequest
         */
        public APIlistRepayRecordsRequest collateralCurrency(String collateralCurrency) {
            this.collateralCurrency = collateralCurrency;
            return this;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistRepayRecordsRequest
         */
        public APIlistRepayRecordsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIlistRepayRecordsRequest
         */
        public APIlistRepayRecordsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set from
         * @param from Start timestamp of the query (optional)
         * @return APIlistRepayRecordsRequest
         */
        public APIlistRepayRecordsRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIlistRepayRecordsRequest
         */
        public APIlistRepayRecordsRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Build call for listRepayRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRepayRecordsCall(source, borrowCurrency, collateralCurrency, page, limit, from, to, _callback);
        }

        /**
         * Execute listRepayRecords request
         * @return List&lt;RepayRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<RepayRecord> execute() throws ApiException {
            ApiResponse<List<RepayRecord>> localVarResp = listRepayRecordsWithHttpInfo(source, borrowCurrency, collateralCurrency, page, limit, from, to);
            return localVarResp.getData();
        }

        /**
         * Execute listRepayRecords request with HTTP info returned
         * @return ApiResponse&lt;List&lt;RepayRecord&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<RepayRecord>> executeWithHttpInfo() throws ApiException {
            return listRepayRecordsWithHttpInfo(source, borrowCurrency, collateralCurrency, page, limit, from, to);
        }

        /**
         * Execute listRepayRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<RepayRecord>> _callback) throws ApiException {
            return listRepayRecordsAsync(source, borrowCurrency, collateralCurrency, page, limit, from, to, _callback);
        }
    }

    /**
     * Repayment history
     * 
     * @param source Operation type: repay - Regular repayment, liquidate - Liquidation (required)
     * @return APIlistRepayRecordsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistRepayRecordsRequest listRepayRecords(String source) {
        return new APIlistRepayRecordsRequest(source);
    }

    private okhttp3.Call listCollateralRecordsCall(Integer page, Integer limit, Long from, Long to, String borrowCurrency, String collateralCurrency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/collateral/collaterals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (borrowCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("borrow_currency", borrowCurrency));
        }

        if (collateralCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collateral_currency", collateralCurrency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCollateralRecordsValidateBeforeCall(Integer page, Integer limit, Long from, Long to, String borrowCurrency, String collateralCurrency, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listCollateralRecordsCall(page, limit, from, to, borrowCurrency, collateralCurrency, _callback);
        return localVarCall;
    }


    private ApiResponse<List<CollateralRecord>> listCollateralRecordsWithHttpInfo(Integer page, Integer limit, Long from, Long to, String borrowCurrency, String collateralCurrency) throws ApiException {
        okhttp3.Call localVarCall = listCollateralRecordsValidateBeforeCall(page, limit, from, to, borrowCurrency, collateralCurrency, null);
        Type localVarReturnType = new TypeToken<List<CollateralRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCollateralRecordsAsync(Integer page, Integer limit, Long from, Long to, String borrowCurrency, String collateralCurrency, final ApiCallback<List<CollateralRecord>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listCollateralRecordsValidateBeforeCall(page, limit, from, to, borrowCurrency, collateralCurrency, _callback);
        Type localVarReturnType = new TypeToken<List<CollateralRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistCollateralRecordsRequest {
        private Integer page;
        private Integer limit;
        private Long from;
        private Long to;
        private String borrowCurrency;
        private String collateralCurrency;

        private APIlistCollateralRecordsRequest() {
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return APIlistCollateralRecordsRequest
         */
        public APIlistCollateralRecordsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Maximum number of records to be returned in a single list (optional, default to 100)
         * @return APIlistCollateralRecordsRequest
         */
        public APIlistCollateralRecordsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set from
         * @param from Start timestamp of the query (optional)
         * @return APIlistCollateralRecordsRequest
         */
        public APIlistCollateralRecordsRequest from(Long from) {
            this.from = from;
            return this;
        }

        /**
         * Set to
         * @param to Time range ending, default to current time (optional)
         * @return APIlistCollateralRecordsRequest
         */
        public APIlistCollateralRecordsRequest to(Long to) {
            this.to = to;
            return this;
        }

        /**
         * Set borrowCurrency
         * @param borrowCurrency Borrowed currency (optional)
         * @return APIlistCollateralRecordsRequest
         */
        public APIlistCollateralRecordsRequest borrowCurrency(String borrowCurrency) {
            this.borrowCurrency = borrowCurrency;
            return this;
        }

        /**
         * Set collateralCurrency
         * @param collateralCurrency Collateral (optional)
         * @return APIlistCollateralRecordsRequest
         */
        public APIlistCollateralRecordsRequest collateralCurrency(String collateralCurrency) {
            this.collateralCurrency = collateralCurrency;
            return this;
        }

        /**
         * Build call for listCollateralRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCollateralRecordsCall(page, limit, from, to, borrowCurrency, collateralCurrency, _callback);
        }

        /**
         * Execute listCollateralRecords request
         * @return List&lt;CollateralRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<CollateralRecord> execute() throws ApiException {
            ApiResponse<List<CollateralRecord>> localVarResp = listCollateralRecordsWithHttpInfo(page, limit, from, to, borrowCurrency, collateralCurrency);
            return localVarResp.getData();
        }

        /**
         * Execute listCollateralRecords request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CollateralRecord&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CollateralRecord>> executeWithHttpInfo() throws ApiException {
            return listCollateralRecordsWithHttpInfo(page, limit, from, to, borrowCurrency, collateralCurrency);
        }

        /**
         * Execute listCollateralRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CollateralRecord>> _callback) throws ApiException {
            return listCollateralRecordsAsync(page, limit, from, to, borrowCurrency, collateralCurrency, _callback);
        }
    }

    /**
     * Query collateral adjustment records
     * 
     * @return APIlistCollateralRecordsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistCollateralRecordsRequest listCollateralRecords() {
        return new APIlistCollateralRecordsRequest();
    }

    /**
     * Build call for operateCollateral
     * @param collateralAlign  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operateCollateralCall(CollateralAlign collateralAlign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collateralAlign;

        // create path and map variables
        String localVarPath = "/loan/collateral/collaterals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operateCollateralValidateBeforeCall(CollateralAlign collateralAlign, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collateralAlign' is set
        if (collateralAlign == null) {
            throw new ApiException("Missing the required parameter 'collateralAlign' when calling operateCollateral(Async)");
        }

        okhttp3.Call localVarCall = operateCollateralCall(collateralAlign, _callback);
        return localVarCall;
    }

    /**
     * Increase or redeem collateral
     * 
     * @param collateralAlign  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public void operateCollateral(CollateralAlign collateralAlign) throws ApiException {
        operateCollateralWithHttpInfo(collateralAlign);
    }

    /**
     * Increase or redeem collateral
     * 
     * @param collateralAlign  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> operateCollateralWithHttpInfo(CollateralAlign collateralAlign) throws ApiException {
        okhttp3.Call localVarCall = operateCollateralValidateBeforeCall(collateralAlign, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Increase or redeem collateral (asynchronously)
     * 
     * @param collateralAlign  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operateCollateralAsync(CollateralAlign collateralAlign, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = operateCollateralValidateBeforeCall(collateralAlign, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUserTotalAmount
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserTotalAmountCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/collateral/total_amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserTotalAmountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = getUserTotalAmountCall(_callback);
        return localVarCall;
    }

    /**
     * Query the total borrowing and collateral amount for the user
     * 
     * @return UserTotalAmount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public UserTotalAmount getUserTotalAmount() throws ApiException {
        ApiResponse<UserTotalAmount> localVarResp = getUserTotalAmountWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Query the total borrowing and collateral amount for the user
     * 
     * @return ApiResponse&lt;UserTotalAmount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserTotalAmount> getUserTotalAmountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserTotalAmountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserTotalAmount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query the total borrowing and collateral amount for the user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserTotalAmountAsync(final ApiCallback<UserTotalAmount> _callback) throws ApiException {
        okhttp3.Call localVarCall = getUserTotalAmountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserTotalAmount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUserLtvInfo
     * @param collateralCurrency Collateral (required)
     * @param borrowCurrency Borrowed currency (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserLtvInfoCall(String collateralCurrency, String borrowCurrency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/collateral/ltv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (collateralCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collateral_currency", collateralCurrency));
        }

        if (borrowCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("borrow_currency", borrowCurrency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiv4" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserLtvInfoValidateBeforeCall(String collateralCurrency, String borrowCurrency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collateralCurrency' is set
        if (collateralCurrency == null) {
            throw new ApiException("Missing the required parameter 'collateralCurrency' when calling getUserLtvInfo(Async)");
        }

        // verify the required parameter 'borrowCurrency' is set
        if (borrowCurrency == null) {
            throw new ApiException("Missing the required parameter 'borrowCurrency' when calling getUserLtvInfo(Async)");
        }

        okhttp3.Call localVarCall = getUserLtvInfoCall(collateralCurrency, borrowCurrency, _callback);
        return localVarCall;
    }

    /**
     * Query user&#39;s collateralization ratio
     * 
     * @param collateralCurrency Collateral (required)
     * @param borrowCurrency Borrowed currency (required)
     * @return UserLtvInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public UserLtvInfo getUserLtvInfo(String collateralCurrency, String borrowCurrency) throws ApiException {
        ApiResponse<UserLtvInfo> localVarResp = getUserLtvInfoWithHttpInfo(collateralCurrency, borrowCurrency);
        return localVarResp.getData();
    }

    /**
     * Query user&#39;s collateralization ratio
     * 
     * @param collateralCurrency Collateral (required)
     * @param borrowCurrency Borrowed currency (required)
     * @return ApiResponse&lt;UserLtvInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserLtvInfo> getUserLtvInfoWithHttpInfo(String collateralCurrency, String borrowCurrency) throws ApiException {
        okhttp3.Call localVarCall = getUserLtvInfoValidateBeforeCall(collateralCurrency, borrowCurrency, null);
        Type localVarReturnType = new TypeToken<UserLtvInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query user&#39;s collateralization ratio (asynchronously)
     * 
     * @param collateralCurrency Collateral (required)
     * @param borrowCurrency Borrowed currency (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserLtvInfoAsync(String collateralCurrency, String borrowCurrency, final ApiCallback<UserLtvInfo> _callback) throws ApiException {
        okhttp3.Call localVarCall = getUserLtvInfoValidateBeforeCall(collateralCurrency, borrowCurrency, _callback);
        Type localVarReturnType = new TypeToken<UserLtvInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listCollateralCurrenciesCall(String loanCurrency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loan/collateral/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (loanCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loan_currency", loanCurrency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCollateralCurrenciesValidateBeforeCall(String loanCurrency, final ApiCallback _callback) throws ApiException {
        okhttp3.Call localVarCall = listCollateralCurrenciesCall(loanCurrency, _callback);
        return localVarCall;
    }


    private ApiResponse<List<CollateralLoanCurrency>> listCollateralCurrenciesWithHttpInfo(String loanCurrency) throws ApiException {
        okhttp3.Call localVarCall = listCollateralCurrenciesValidateBeforeCall(loanCurrency, null);
        Type localVarReturnType = new TypeToken<List<CollateralLoanCurrency>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCollateralCurrenciesAsync(String loanCurrency, final ApiCallback<List<CollateralLoanCurrency>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listCollateralCurrenciesValidateBeforeCall(loanCurrency, _callback);
        Type localVarReturnType = new TypeToken<List<CollateralLoanCurrency>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistCollateralCurrenciesRequest {
        private String loanCurrency;

        private APIlistCollateralCurrenciesRequest() {
        }

        /**
         * Set loanCurrency
         * @param loanCurrency The parameter loan_currency is used to specify the borrowing currency. If loan_currency is not provided, the API will return all supported borrowing currencies. If loan_currency is provided, the API will return an array of collateral currencies supported for the specified borrowing currency. (optional)
         * @return APIlistCollateralCurrenciesRequest
         */
        public APIlistCollateralCurrenciesRequest loanCurrency(String loanCurrency) {
            this.loanCurrency = loanCurrency;
            return this;
        }

        /**
         * Build call for listCollateralCurrencies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCollateralCurrenciesCall(loanCurrency, _callback);
        }

        /**
         * Execute listCollateralCurrencies request
         * @return List&lt;CollateralLoanCurrency&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public List<CollateralLoanCurrency> execute() throws ApiException {
            ApiResponse<List<CollateralLoanCurrency>> localVarResp = listCollateralCurrenciesWithHttpInfo(loanCurrency);
            return localVarResp.getData();
        }

        /**
         * Execute listCollateralCurrencies request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CollateralLoanCurrency&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CollateralLoanCurrency>> executeWithHttpInfo() throws ApiException {
            return listCollateralCurrenciesWithHttpInfo(loanCurrency);
        }

        /**
         * Execute listCollateralCurrencies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CollateralLoanCurrency>> _callback) throws ApiException {
            return listCollateralCurrenciesAsync(loanCurrency, _callback);
        }
    }

    /**
     * Query supported borrowing and collateral currencies
     * 
     * @return APIlistCollateralCurrenciesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public APIlistCollateralCurrenciesRequest listCollateralCurrencies() {
        return new APIlistCollateralCurrenciesRequest();
    }

}
