/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * The version of the OpenAPI document: 4.86.0
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * Modify contract order parameters
 */
@ApiModel(description = "Modify contract order parameters")

public class BatchAmendOrderReq {
  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private Long orderId;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_AMEND_TEXT = "amend_text";
  @SerializedName(SERIALIZED_NAME_AMEND_TEXT)
  private String amendText;


  public BatchAmendOrderReq orderId(Long orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Order id, order_id and text must contain at least one
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order id, order_id and text must contain at least one")

  public Long getOrderId() {
    return orderId;
  }


  public void setOrderId(Long orderId) {
    this.orderId = orderId;
  }


  public BatchAmendOrderReq text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * User-defined order text, at least one of order_id and text must be passed
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User-defined order text, at least one of order_id and text must be passed")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public BatchAmendOrderReq size(Long size) {
    
    this.size = size;
    return this;
  }

   /**
   * The new order size, including the executed order size. - If it is less than or equal to the executed quantity, the order will be cancelled. - The new order direction must be consistent with the original one. - The size of the closing order cannot be modified. - For orders that only reduce positions, if the size is increased, other orders that only reduce positions may be kicked out. - If the price is not modified, reducing the size will not affect the depth of the queue, and increasing the size will place it at the end of the current price.
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The new order size, including the executed order size. - If it is less than or equal to the executed quantity, the order will be cancelled. - The new order direction must be consistent with the original one. - The size of the closing order cannot be modified. - For orders that only reduce positions, if the size is increased, other orders that only reduce positions may be kicked out. - If the price is not modified, reducing the size will not affect the depth of the queue, and increasing the size will place it at the end of the current price.")

  public Long getSize() {
    return size;
  }


  public void setSize(Long size) {
    this.size = size;
  }


  public BatchAmendOrderReq price(String price) {
    
    this.price = price;
    return this;
  }

   /**
   * New order price.
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "New order price.")

  public String getPrice() {
    return price;
  }


  public void setPrice(String price) {
    this.price = price;
  }


  public BatchAmendOrderReq amendText(String amendText) {
    
    this.amendText = amendText;
    return this;
  }

   /**
   * Custom info during amending order
   * @return amendText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom info during amending order")

  public String getAmendText() {
    return amendText;
  }


  public void setAmendText(String amendText) {
    this.amendText = amendText;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchAmendOrderReq batchAmendOrderReq = (BatchAmendOrderReq) o;
    return Objects.equals(this.orderId, batchAmendOrderReq.orderId) &&
        Objects.equals(this.text, batchAmendOrderReq.text) &&
        Objects.equals(this.size, batchAmendOrderReq.size) &&
        Objects.equals(this.price, batchAmendOrderReq.price) &&
        Objects.equals(this.amendText, batchAmendOrderReq.amendText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, text, size, price, amendText);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchAmendOrderReq {\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    amendText: ").append(toIndentedString(amendText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

