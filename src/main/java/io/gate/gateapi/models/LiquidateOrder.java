/*
 * Gate API
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * Spot liquidation order details
 */
public class LiquidateOrder {
    public static final String SERIALIZED_NAME_TEXT = "text";
    @SerializedName(SERIALIZED_NAME_TEXT)
    private String text;

    public static final String SERIALIZED_NAME_CURRENCY_PAIR = "currency_pair";
    @SerializedName(SERIALIZED_NAME_CURRENCY_PAIR)
    private String currencyPair;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";
    @SerializedName(SERIALIZED_NAME_AMOUNT)
    private String amount;

    public static final String SERIALIZED_NAME_PRICE = "price";
    @SerializedName(SERIALIZED_NAME_PRICE)
    private String price;

    public static final String SERIALIZED_NAME_ACTION_MODE = "action_mode";
    @SerializedName(SERIALIZED_NAME_ACTION_MODE)
    private String actionMode;


    public LiquidateOrder text(String text) {
        
        this.text = text;
        return this;
    }

     /**
     * Order custom information. Users can set custom ID with this field. Custom fields must meet the following conditions:  1. Must start with &#x60;t-&#x60; 2. Excluding &#x60;t-&#x60;, length cannot exceed 28 bytes 3. Can only contain numbers, letters, underscore(_), hyphen(-) or dot(.) 
     * @return text
    **/
    @javax.annotation.Nullable
    public String getText() {
        return text;
    }


    public void setText(String text) {
        this.text = text;
    }

    public LiquidateOrder currencyPair(String currencyPair) {
        
        this.currencyPair = currencyPair;
        return this;
    }

     /**
     * Currency pair
     * @return currencyPair
    **/
    public String getCurrencyPair() {
        return currencyPair;
    }


    public void setCurrencyPair(String currencyPair) {
        this.currencyPair = currencyPair;
    }

    public LiquidateOrder amount(String amount) {
        
        this.amount = amount;
        return this;
    }

     /**
     * Trade amount
     * @return amount
    **/
    public String getAmount() {
        return amount;
    }


    public void setAmount(String amount) {
        this.amount = amount;
    }

    public LiquidateOrder price(String price) {
        
        this.price = price;
        return this;
    }

     /**
     * Order price
     * @return price
    **/
    public String getPrice() {
        return price;
    }


    public void setPrice(String price) {
        this.price = price;
    }

    public LiquidateOrder actionMode(String actionMode) {
        
        this.actionMode = actionMode;
        return this;
    }

     /**
     * Processing mode:  Different fields are returned when placing an order based on action_mode. This field is only valid during the request and is not included in the response &#x60;ACK&#x60;: Asynchronous mode, only returns key order fields &#x60;RESULT&#x60;: No liquidation information &#x60;FULL&#x60;: Full mode (default)
     * @return actionMode
    **/
    @javax.annotation.Nullable
    public String getActionMode() {
        return actionMode;
    }


    public void setActionMode(String actionMode) {
        this.actionMode = actionMode;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LiquidateOrder liquidateOrder = (LiquidateOrder) o;
        return Objects.equals(this.text, liquidateOrder.text) &&
                Objects.equals(this.currencyPair, liquidateOrder.currencyPair) &&
                Objects.equals(this.amount, liquidateOrder.amount) &&
                Objects.equals(this.price, liquidateOrder.price) &&
                Objects.equals(this.actionMode, liquidateOrder.actionMode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(text, currencyPair, amount, price, actionMode);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class LiquidateOrder {\n");
        sb.append("      text: ").append(toIndentedString(text)).append("\n");
        sb.append("      currencyPair: ").append(toIndentedString(currencyPair)).append("\n");
        sb.append("      amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("      price: ").append(toIndentedString(price)).append("\n");
        sb.append("      actionMode: ").append(toIndentedString(actionMode)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

