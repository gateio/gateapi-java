/*
 * Gate API v4
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gate.gateapi.models.CollateralCurrency;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CollateralAdjust
 */
public class CollateralAdjust {
    public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    private Long orderId;

    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    private String type;

    public static final String SERIALIZED_NAME_COLLATERALS = "collaterals";
    @SerializedName(SERIALIZED_NAME_COLLATERALS)
    private List<CollateralCurrency> collaterals = null;


    public CollateralAdjust orderId(Long orderId) {
        
        this.orderId = orderId;
        return this;
    }

     /**
     * Order ID
     * @return orderId
    **/
    public Long getOrderId() {
        return orderId;
    }


    public void setOrderId(Long orderId) {
        this.orderId = orderId;
    }

    public CollateralAdjust type(String type) {
        
        this.type = type;
        return this;
    }

     /**
     * Operation types: append - for adding collateral, redeem - for withdrawing collateral
     * @return type
    **/
    public String getType() {
        return type;
    }


    public void setType(String type) {
        this.type = type;
    }

    public CollateralAdjust collaterals(List<CollateralCurrency> collaterals) {
        
        this.collaterals = collaterals;
        return this;
    }

    public CollateralAdjust addCollateralsItem(CollateralCurrency collateralsItem) {
        if (this.collaterals == null) {
            this.collaterals = new ArrayList<>();
        }
        this.collaterals.add(collateralsItem);
        return this;
    }

     /**
     * Collateral Currency List
     * @return collaterals
    **/
    @javax.annotation.Nullable
    public List<CollateralCurrency> getCollaterals() {
        return collaterals;
    }


    public void setCollaterals(List<CollateralCurrency> collaterals) {
        this.collaterals = collaterals;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CollateralAdjust collateralAdjust = (CollateralAdjust) o;
        return Objects.equals(this.orderId, collateralAdjust.orderId) &&
                Objects.equals(this.type, collateralAdjust.type) &&
                Objects.equals(this.collaterals, collateralAdjust.collaterals);
    }

    @Override
    public int hashCode() {
        return Objects.hash(orderId, type, collaterals);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CollateralAdjust {\n");
        sb.append("      orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("      type: ").append(toIndentedString(type)).append("\n");
        sb.append("      collaterals: ").append(toIndentedString(collaterals)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

