/*
 * Gate API v4
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * Retrieve risk limit configurations for different tiers under a specified contract.
 */
public class FuturesLimitRiskTiers {
    public static final String SERIALIZED_NAME_TIER = "tier";
    @SerializedName(SERIALIZED_NAME_TIER)
    private Integer tier;

    public static final String SERIALIZED_NAME_RISK_LIMIT = "risk_limit";
    @SerializedName(SERIALIZED_NAME_RISK_LIMIT)
    private String riskLimit;

    public static final String SERIALIZED_NAME_INITIAL_RATE = "initial_rate";
    @SerializedName(SERIALIZED_NAME_INITIAL_RATE)
    private String initialRate;

    public static final String SERIALIZED_NAME_MAINTENANCE_RATE = "maintenance_rate";
    @SerializedName(SERIALIZED_NAME_MAINTENANCE_RATE)
    private String maintenanceRate;

    public static final String SERIALIZED_NAME_LEVERAGE_MAX = "leverage_max";
    @SerializedName(SERIALIZED_NAME_LEVERAGE_MAX)
    private String leverageMax;

    public static final String SERIALIZED_NAME_CONTRACT = "contract";
    @SerializedName(SERIALIZED_NAME_CONTRACT)
    private String contract;


    public FuturesLimitRiskTiers tier(Integer tier) {
        
        this.tier = tier;
        return this;
    }

     /**
     * Tier
     * @return tier
    **/
    @javax.annotation.Nullable
    public Integer getTier() {
        return tier;
    }


    public void setTier(Integer tier) {
        this.tier = tier;
    }

    public FuturesLimitRiskTiers riskLimit(String riskLimit) {
        
        this.riskLimit = riskLimit;
        return this;
    }

     /**
     * Position risk limit
     * @return riskLimit
    **/
    @javax.annotation.Nullable
    public String getRiskLimit() {
        return riskLimit;
    }


    public void setRiskLimit(String riskLimit) {
        this.riskLimit = riskLimit;
    }

    public FuturesLimitRiskTiers initialRate(String initialRate) {
        
        this.initialRate = initialRate;
        return this;
    }

     /**
     * Initial margin rate
     * @return initialRate
    **/
    @javax.annotation.Nullable
    public String getInitialRate() {
        return initialRate;
    }


    public void setInitialRate(String initialRate) {
        this.initialRate = initialRate;
    }

    public FuturesLimitRiskTiers maintenanceRate(String maintenanceRate) {
        
        this.maintenanceRate = maintenanceRate;
        return this;
    }

     /**
     * Maintenance margin rate
     * @return maintenanceRate
    **/
    @javax.annotation.Nullable
    public String getMaintenanceRate() {
        return maintenanceRate;
    }


    public void setMaintenanceRate(String maintenanceRate) {
        this.maintenanceRate = maintenanceRate;
    }

    public FuturesLimitRiskTiers leverageMax(String leverageMax) {
        
        this.leverageMax = leverageMax;
        return this;
    }

     /**
     * Maximum leverage
     * @return leverageMax
    **/
    @javax.annotation.Nullable
    public String getLeverageMax() {
        return leverageMax;
    }


    public void setLeverageMax(String leverageMax) {
        this.leverageMax = leverageMax;
    }

    public FuturesLimitRiskTiers contract(String contract) {
        
        this.contract = contract;
        return this;
    }

     /**
     * Markets, visible only during market pagination requests
     * @return contract
    **/
    @javax.annotation.Nullable
    public String getContract() {
        return contract;
    }


    public void setContract(String contract) {
        this.contract = contract;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FuturesLimitRiskTiers futuresLimitRiskTiers = (FuturesLimitRiskTiers) o;
        return Objects.equals(this.tier, futuresLimitRiskTiers.tier) &&
                Objects.equals(this.riskLimit, futuresLimitRiskTiers.riskLimit) &&
                Objects.equals(this.initialRate, futuresLimitRiskTiers.initialRate) &&
                Objects.equals(this.maintenanceRate, futuresLimitRiskTiers.maintenanceRate) &&
                Objects.equals(this.leverageMax, futuresLimitRiskTiers.leverageMax) &&
                Objects.equals(this.contract, futuresLimitRiskTiers.contract);
    }

    @Override
    public int hashCode() {
        return Objects.hash(tier, riskLimit, initialRate, maintenanceRate, leverageMax, contract);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FuturesLimitRiskTiers {\n");
        sb.append("      tier: ").append(toIndentedString(tier)).append("\n");
        sb.append("      riskLimit: ").append(toIndentedString(riskLimit)).append("\n");
        sb.append("      initialRate: ").append(toIndentedString(initialRate)).append("\n");
        sb.append("      maintenanceRate: ").append(toIndentedString(maintenanceRate)).append("\n");
        sb.append("      leverageMax: ").append(toIndentedString(leverageMax)).append("\n");
        sb.append("      contract: ").append(toIndentedString(contract)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

