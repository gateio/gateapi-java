/*
 * Gate API
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * UnifiedCollateralReq
 */
public class UnifiedCollateralReq {
    /**
     * User-set collateral mode: 0(all)-All currencies as collateral, 1(custom)-Custom currencies as collateral. When collateral_type is 0(all), enable_list and disable_list parameters are invalid
     */
    @JsonAdapter(CollateralTypeEnum.Adapter.class)
    public enum CollateralTypeEnum {
        NUMBER_0(0),
        
        NUMBER_1(1);

        private Integer value;

        CollateralTypeEnum(Integer value) {
            this.value = value;
        }

        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static CollateralTypeEnum fromValue(Integer value) {
            for (CollateralTypeEnum b : CollateralTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<CollateralTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final CollateralTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public CollateralTypeEnum read(final JsonReader jsonReader) throws IOException {
                Integer value =  jsonReader.nextInt();
                return CollateralTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_COLLATERAL_TYPE = "collateral_type";
    @SerializedName(SERIALIZED_NAME_COLLATERAL_TYPE)
    private CollateralTypeEnum collateralType;

    public static final String SERIALIZED_NAME_ENABLE_LIST = "enable_list";
    @SerializedName(SERIALIZED_NAME_ENABLE_LIST)
    private List<String> enableList = null;

    public static final String SERIALIZED_NAME_DISABLE_LIST = "disable_list";
    @SerializedName(SERIALIZED_NAME_DISABLE_LIST)
    private List<String> disableList = null;


    public UnifiedCollateralReq collateralType(CollateralTypeEnum collateralType) {
        
        this.collateralType = collateralType;
        return this;
    }

     /**
     * User-set collateral mode: 0(all)-All currencies as collateral, 1(custom)-Custom currencies as collateral. When collateral_type is 0(all), enable_list and disable_list parameters are invalid
     * @return collateralType
    **/
    @javax.annotation.Nullable
    public CollateralTypeEnum getCollateralType() {
        return collateralType;
    }


    public void setCollateralType(CollateralTypeEnum collateralType) {
        this.collateralType = collateralType;
    }

    public UnifiedCollateralReq enableList(List<String> enableList) {
        
        this.enableList = enableList;
        return this;
    }

    public UnifiedCollateralReq addEnableListItem(String enableListItem) {
        if (this.enableList == null) {
            this.enableList = new ArrayList<>();
        }
        this.enableList.add(enableListItem);
        return this;
    }

     /**
     * Currency list, where collateral_type&#x3D;1(custom) indicates the addition logic
     * @return enableList
    **/
    @javax.annotation.Nullable
    public List<String> getEnableList() {
        return enableList;
    }


    public void setEnableList(List<String> enableList) {
        this.enableList = enableList;
    }

    public UnifiedCollateralReq disableList(List<String> disableList) {
        
        this.disableList = disableList;
        return this;
    }

    public UnifiedCollateralReq addDisableListItem(String disableListItem) {
        if (this.disableList == null) {
            this.disableList = new ArrayList<>();
        }
        this.disableList.add(disableListItem);
        return this;
    }

     /**
     * Disable list, indicating the disable logic
     * @return disableList
    **/
    @javax.annotation.Nullable
    public List<String> getDisableList() {
        return disableList;
    }


    public void setDisableList(List<String> disableList) {
        this.disableList = disableList;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnifiedCollateralReq unifiedCollateralReq = (UnifiedCollateralReq) o;
        return Objects.equals(this.collateralType, unifiedCollateralReq.collateralType) &&
                Objects.equals(this.enableList, unifiedCollateralReq.enableList) &&
                Objects.equals(this.disableList, unifiedCollateralReq.disableList);
    }

    @Override
    public int hashCode() {
        return Objects.hash(collateralType, enableList, disableList);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UnifiedCollateralReq {\n");
        sb.append("      collateralType: ").append(toIndentedString(collateralType)).append("\n");
        sb.append("      enableList: ").append(toIndentedString(enableList)).append("\n");
        sb.append("      disableList: ").append(toIndentedString(disableList)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

