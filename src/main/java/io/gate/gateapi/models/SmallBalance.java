/*
 * Gate API v4
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * Convert Small Balance
 */
public class SmallBalance {
    public static final String SERIALIZED_NAME_CURRENCY = "currency";
    @SerializedName(SERIALIZED_NAME_CURRENCY)
    private String currency;

    public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "available_balance";
    @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
    private String availableBalance;

    public static final String SERIALIZED_NAME_ESTIMATED_AS_BTC = "estimated_as_btc";
    @SerializedName(SERIALIZED_NAME_ESTIMATED_AS_BTC)
    private String estimatedAsBtc;

    public static final String SERIALIZED_NAME_CONVERTIBLE_TO_GT = "convertible_to_gt";
    @SerializedName(SERIALIZED_NAME_CONVERTIBLE_TO_GT)
    private String convertibleToGt;


    public SmallBalance currency(String currency) {
        
        this.currency = currency;
        return this;
    }

     /**
     * Currency
     * @return currency
    **/
    @javax.annotation.Nullable
    public String getCurrency() {
        return currency;
    }


    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public SmallBalance availableBalance(String availableBalance) {
        
        this.availableBalance = availableBalance;
        return this;
    }

     /**
     * Available balance
     * @return availableBalance
    **/
    @javax.annotation.Nullable
    public String getAvailableBalance() {
        return availableBalance;
    }


    public void setAvailableBalance(String availableBalance) {
        this.availableBalance = availableBalance;
    }

    public SmallBalance estimatedAsBtc(String estimatedAsBtc) {
        
        this.estimatedAsBtc = estimatedAsBtc;
        return this;
    }

     /**
     * Estimated as BTC
     * @return estimatedAsBtc
    **/
    @javax.annotation.Nullable
    public String getEstimatedAsBtc() {
        return estimatedAsBtc;
    }


    public void setEstimatedAsBtc(String estimatedAsBtc) {
        this.estimatedAsBtc = estimatedAsBtc;
    }

    public SmallBalance convertibleToGt(String convertibleToGt) {
        
        this.convertibleToGt = convertibleToGt;
        return this;
    }

     /**
     * Estimated conversion to GT
     * @return convertibleToGt
    **/
    @javax.annotation.Nullable
    public String getConvertibleToGt() {
        return convertibleToGt;
    }


    public void setConvertibleToGt(String convertibleToGt) {
        this.convertibleToGt = convertibleToGt;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SmallBalance smallBalance = (SmallBalance) o;
        return Objects.equals(this.currency, smallBalance.currency) &&
                Objects.equals(this.availableBalance, smallBalance.availableBalance) &&
                Objects.equals(this.estimatedAsBtc, smallBalance.estimatedAsBtc) &&
                Objects.equals(this.convertibleToGt, smallBalance.convertibleToGt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(currency, availableBalance, estimatedAsBtc, convertibleToGt);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SmallBalance {\n");
        sb.append("      currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("      availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
        sb.append("      estimatedAsBtc: ").append(toIndentedString(estimatedAsBtc)).append("\n");
        sb.append("      convertibleToGt: ").append(toIndentedString(convertibleToGt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

