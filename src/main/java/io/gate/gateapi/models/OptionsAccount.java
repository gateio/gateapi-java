/*
 * Gate API
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * OptionsAccount
 */
public class OptionsAccount {
    public static final String SERIALIZED_NAME_USER = "user";
    @SerializedName(SERIALIZED_NAME_USER)
    private Long user;

    public static final String SERIALIZED_NAME_TOTAL = "total";
    @SerializedName(SERIALIZED_NAME_TOTAL)
    private String total;

    public static final String SERIALIZED_NAME_POSITION_VALUE = "position_value";
    @SerializedName(SERIALIZED_NAME_POSITION_VALUE)
    private String positionValue;

    public static final String SERIALIZED_NAME_EQUITY = "equity";
    @SerializedName(SERIALIZED_NAME_EQUITY)
    private String equity;

    public static final String SERIALIZED_NAME_SHORT_ENABLED = "short_enabled";
    @SerializedName(SERIALIZED_NAME_SHORT_ENABLED)
    private Boolean shortEnabled;

    public static final String SERIALIZED_NAME_MMP_ENABLED = "mmp_enabled";
    @SerializedName(SERIALIZED_NAME_MMP_ENABLED)
    private Boolean mmpEnabled;

    public static final String SERIALIZED_NAME_LIQ_TRIGGERED = "liq_triggered";
    @SerializedName(SERIALIZED_NAME_LIQ_TRIGGERED)
    private Boolean liqTriggered;

    /**
     * ｜ 保证金模式： - 0：经典现货保证金模式 - 1：跨币种保证金模式 - 2：组合保证金模式
     */
    @JsonAdapter(MarginModeEnum.Adapter.class)
    public enum MarginModeEnum {
        NUMBER_0(0),
        
        NUMBER_1(1),
        
        NUMBER_2(2);

        private Integer value;

        MarginModeEnum(Integer value) {
            this.value = value;
        }

        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static MarginModeEnum fromValue(Integer value) {
            for (MarginModeEnum b : MarginModeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<MarginModeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final MarginModeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public MarginModeEnum read(final JsonReader jsonReader) throws IOException {
                Integer value =  jsonReader.nextInt();
                return MarginModeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_MARGIN_MODE = "margin_mode";
    @SerializedName(SERIALIZED_NAME_MARGIN_MODE)
    private MarginModeEnum marginMode;

    public static final String SERIALIZED_NAME_UNREALISED_PNL = "unrealised_pnl";
    @SerializedName(SERIALIZED_NAME_UNREALISED_PNL)
    private String unrealisedPnl;

    public static final String SERIALIZED_NAME_INIT_MARGIN = "init_margin";
    @SerializedName(SERIALIZED_NAME_INIT_MARGIN)
    private String initMargin;

    public static final String SERIALIZED_NAME_MAINT_MARGIN = "maint_margin";
    @SerializedName(SERIALIZED_NAME_MAINT_MARGIN)
    private String maintMargin;

    public static final String SERIALIZED_NAME_ORDER_MARGIN = "order_margin";
    @SerializedName(SERIALIZED_NAME_ORDER_MARGIN)
    private String orderMargin;

    public static final String SERIALIZED_NAME_ASK_ORDER_MARGIN = "ask_order_margin";
    @SerializedName(SERIALIZED_NAME_ASK_ORDER_MARGIN)
    private String askOrderMargin;

    public static final String SERIALIZED_NAME_BID_ORDER_MARGIN = "bid_order_margin";
    @SerializedName(SERIALIZED_NAME_BID_ORDER_MARGIN)
    private String bidOrderMargin;

    public static final String SERIALIZED_NAME_AVAILABLE = "available";
    @SerializedName(SERIALIZED_NAME_AVAILABLE)
    private String available;

    public static final String SERIALIZED_NAME_POINT = "point";
    @SerializedName(SERIALIZED_NAME_POINT)
    private String point;

    public static final String SERIALIZED_NAME_CURRENCY = "currency";
    @SerializedName(SERIALIZED_NAME_CURRENCY)
    private String currency;

    public static final String SERIALIZED_NAME_ORDERS_LIMIT = "orders_limit";
    @SerializedName(SERIALIZED_NAME_ORDERS_LIMIT)
    private Integer ordersLimit;

    public static final String SERIALIZED_NAME_POSITION_NOTIONAL_LIMIT = "position_notional_limit";
    @SerializedName(SERIALIZED_NAME_POSITION_NOTIONAL_LIMIT)
    private Long positionNotionalLimit;


    public OptionsAccount user(Long user) {
        
        this.user = user;
        return this;
    }

     /**
     * User ID.
     * @return user
    **/
    @javax.annotation.Nullable
    public Long getUser() {
        return user;
    }


    public void setUser(Long user) {
        this.user = user;
    }

    public OptionsAccount total(String total) {
        
        this.total = total;
        return this;
    }

     /**
     * Account balance.
     * @return total
    **/
    @javax.annotation.Nullable
    public String getTotal() {
        return total;
    }


    public void setTotal(String total) {
        this.total = total;
    }

    public OptionsAccount positionValue(String positionValue) {
        
        this.positionValue = positionValue;
        return this;
    }

     /**
     * Position value, long position value is positive, short position value is negative
     * @return positionValue
    **/
    @javax.annotation.Nullable
    public String getPositionValue() {
        return positionValue;
    }


    public void setPositionValue(String positionValue) {
        this.positionValue = positionValue;
    }

    public OptionsAccount equity(String equity) {
        
        this.equity = equity;
        return this;
    }

     /**
     * Account equity, the sum of account balance and position value.
     * @return equity
    **/
    @javax.annotation.Nullable
    public String getEquity() {
        return equity;
    }


    public void setEquity(String equity) {
        this.equity = equity;
    }

    public OptionsAccount shortEnabled(Boolean shortEnabled) {
        
        this.shortEnabled = shortEnabled;
        return this;
    }

     /**
     * If the account is allowed to short.
     * @return shortEnabled
    **/
    @javax.annotation.Nullable
    public Boolean getShortEnabled() {
        return shortEnabled;
    }


    public void setShortEnabled(Boolean shortEnabled) {
        this.shortEnabled = shortEnabled;
    }

    public OptionsAccount mmpEnabled(Boolean mmpEnabled) {
        
        this.mmpEnabled = mmpEnabled;
        return this;
    }

     /**
     * Whether to enable MMP.
     * @return mmpEnabled
    **/
    @javax.annotation.Nullable
    public Boolean getMmpEnabled() {
        return mmpEnabled;
    }


    public void setMmpEnabled(Boolean mmpEnabled) {
        this.mmpEnabled = mmpEnabled;
    }

    public OptionsAccount liqTriggered(Boolean liqTriggered) {
        
        this.liqTriggered = liqTriggered;
        return this;
    }

     /**
     * Whether to trigger position liquidation.
     * @return liqTriggered
    **/
    @javax.annotation.Nullable
    public Boolean getLiqTriggered() {
        return liqTriggered;
    }


    public void setLiqTriggered(Boolean liqTriggered) {
        this.liqTriggered = liqTriggered;
    }

    public OptionsAccount marginMode(MarginModeEnum marginMode) {
        
        this.marginMode = marginMode;
        return this;
    }

     /**
     * ｜ 保证金模式： - 0：经典现货保证金模式 - 1：跨币种保证金模式 - 2：组合保证金模式
     * @return marginMode
    **/
    @javax.annotation.Nullable
    public MarginModeEnum getMarginMode() {
        return marginMode;
    }


    public void setMarginMode(MarginModeEnum marginMode) {
        this.marginMode = marginMode;
    }

    public OptionsAccount unrealisedPnl(String unrealisedPnl) {
        
        this.unrealisedPnl = unrealisedPnl;
        return this;
    }

     /**
     * Unrealized PNL.
     * @return unrealisedPnl
    **/
    @javax.annotation.Nullable
    public String getUnrealisedPnl() {
        return unrealisedPnl;
    }


    public void setUnrealisedPnl(String unrealisedPnl) {
        this.unrealisedPnl = unrealisedPnl;
    }

    public OptionsAccount initMargin(String initMargin) {
        
        this.initMargin = initMargin;
        return this;
    }

     /**
     * Initial position margin.
     * @return initMargin
    **/
    @javax.annotation.Nullable
    public String getInitMargin() {
        return initMargin;
    }


    public void setInitMargin(String initMargin) {
        this.initMargin = initMargin;
    }

    public OptionsAccount maintMargin(String maintMargin) {
        
        this.maintMargin = maintMargin;
        return this;
    }

     /**
     * Position maintenance margin.
     * @return maintMargin
    **/
    @javax.annotation.Nullable
    public String getMaintMargin() {
        return maintMargin;
    }


    public void setMaintMargin(String maintMargin) {
        this.maintMargin = maintMargin;
    }

    public OptionsAccount orderMargin(String orderMargin) {
        
        this.orderMargin = orderMargin;
        return this;
    }

     /**
     * Order margin of unfinished orders.
     * @return orderMargin
    **/
    @javax.annotation.Nullable
    public String getOrderMargin() {
        return orderMargin;
    }


    public void setOrderMargin(String orderMargin) {
        this.orderMargin = orderMargin;
    }

    public OptionsAccount askOrderMargin(String askOrderMargin) {
        
        this.askOrderMargin = askOrderMargin;
        return this;
    }

     /**
     * Margin for outstanding sell orders.
     * @return askOrderMargin
    **/
    @javax.annotation.Nullable
    public String getAskOrderMargin() {
        return askOrderMargin;
    }


    public void setAskOrderMargin(String askOrderMargin) {
        this.askOrderMargin = askOrderMargin;
    }

    public OptionsAccount bidOrderMargin(String bidOrderMargin) {
        
        this.bidOrderMargin = bidOrderMargin;
        return this;
    }

     /**
     * Margin for outstanding buy orders.
     * @return bidOrderMargin
    **/
    @javax.annotation.Nullable
    public String getBidOrderMargin() {
        return bidOrderMargin;
    }


    public void setBidOrderMargin(String bidOrderMargin) {
        this.bidOrderMargin = bidOrderMargin;
    }

    public OptionsAccount available(String available) {
        
        this.available = available;
        return this;
    }

     /**
     * Available balance to transfer out or trade.
     * @return available
    **/
    @javax.annotation.Nullable
    public String getAvailable() {
        return available;
    }


    public void setAvailable(String available) {
        this.available = available;
    }

    public OptionsAccount point(String point) {
        
        this.point = point;
        return this;
    }

     /**
     * POINT amount.
     * @return point
    **/
    @javax.annotation.Nullable
    public String getPoint() {
        return point;
    }


    public void setPoint(String point) {
        this.point = point;
    }

    public OptionsAccount currency(String currency) {
        
        this.currency = currency;
        return this;
    }

     /**
     * Settle currency.
     * @return currency
    **/
    @javax.annotation.Nullable
    public String getCurrency() {
        return currency;
    }


    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public OptionsAccount ordersLimit(Integer ordersLimit) {
        
        this.ordersLimit = ordersLimit;
        return this;
    }

     /**
     * Maximum number of outstanding orders.
     * @return ordersLimit
    **/
    @javax.annotation.Nullable
    public Integer getOrdersLimit() {
        return ordersLimit;
    }


    public void setOrdersLimit(Integer ordersLimit) {
        this.ordersLimit = ordersLimit;
    }

    public OptionsAccount positionNotionalLimit(Long positionNotionalLimit) {
        
        this.positionNotionalLimit = positionNotionalLimit;
        return this;
    }

     /**
     * Notional value upper limit, including the nominal value of positions and outstanding orders
     * @return positionNotionalLimit
    **/
    @javax.annotation.Nullable
    public Long getPositionNotionalLimit() {
        return positionNotionalLimit;
    }


    public void setPositionNotionalLimit(Long positionNotionalLimit) {
        this.positionNotionalLimit = positionNotionalLimit;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OptionsAccount optionsAccount = (OptionsAccount) o;
        return Objects.equals(this.user, optionsAccount.user) &&
                Objects.equals(this.total, optionsAccount.total) &&
                Objects.equals(this.positionValue, optionsAccount.positionValue) &&
                Objects.equals(this.equity, optionsAccount.equity) &&
                Objects.equals(this.shortEnabled, optionsAccount.shortEnabled) &&
                Objects.equals(this.mmpEnabled, optionsAccount.mmpEnabled) &&
                Objects.equals(this.liqTriggered, optionsAccount.liqTriggered) &&
                Objects.equals(this.marginMode, optionsAccount.marginMode) &&
                Objects.equals(this.unrealisedPnl, optionsAccount.unrealisedPnl) &&
                Objects.equals(this.initMargin, optionsAccount.initMargin) &&
                Objects.equals(this.maintMargin, optionsAccount.maintMargin) &&
                Objects.equals(this.orderMargin, optionsAccount.orderMargin) &&
                Objects.equals(this.askOrderMargin, optionsAccount.askOrderMargin) &&
                Objects.equals(this.bidOrderMargin, optionsAccount.bidOrderMargin) &&
                Objects.equals(this.available, optionsAccount.available) &&
                Objects.equals(this.point, optionsAccount.point) &&
                Objects.equals(this.currency, optionsAccount.currency) &&
                Objects.equals(this.ordersLimit, optionsAccount.ordersLimit) &&
                Objects.equals(this.positionNotionalLimit, optionsAccount.positionNotionalLimit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(user, total, positionValue, equity, shortEnabled, mmpEnabled, liqTriggered, marginMode, unrealisedPnl, initMargin, maintMargin, orderMargin, askOrderMargin, bidOrderMargin, available, point, currency, ordersLimit, positionNotionalLimit);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OptionsAccount {\n");
        sb.append("      user: ").append(toIndentedString(user)).append("\n");
        sb.append("      total: ").append(toIndentedString(total)).append("\n");
        sb.append("      positionValue: ").append(toIndentedString(positionValue)).append("\n");
        sb.append("      equity: ").append(toIndentedString(equity)).append("\n");
        sb.append("      shortEnabled: ").append(toIndentedString(shortEnabled)).append("\n");
        sb.append("      mmpEnabled: ").append(toIndentedString(mmpEnabled)).append("\n");
        sb.append("      liqTriggered: ").append(toIndentedString(liqTriggered)).append("\n");
        sb.append("      marginMode: ").append(toIndentedString(marginMode)).append("\n");
        sb.append("      unrealisedPnl: ").append(toIndentedString(unrealisedPnl)).append("\n");
        sb.append("      initMargin: ").append(toIndentedString(initMargin)).append("\n");
        sb.append("      maintMargin: ").append(toIndentedString(maintMargin)).append("\n");
        sb.append("      orderMargin: ").append(toIndentedString(orderMargin)).append("\n");
        sb.append("      askOrderMargin: ").append(toIndentedString(askOrderMargin)).append("\n");
        sb.append("      bidOrderMargin: ").append(toIndentedString(bidOrderMargin)).append("\n");
        sb.append("      available: ").append(toIndentedString(available)).append("\n");
        sb.append("      point: ").append(toIndentedString(point)).append("\n");
        sb.append("      currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("      ordersLimit: ").append(toIndentedString(ordersLimit)).append("\n");
        sb.append("      positionNotionalLimit: ").append(toIndentedString(positionNotionalLimit)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

