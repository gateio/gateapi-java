/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * Options underlying detail
 */
public class OptionsUnderlyingTicker {
    public static final String SERIALIZED_NAME_TRADE_PUT = "trade_put";
    @SerializedName(SERIALIZED_NAME_TRADE_PUT)
    private Long tradePut;

    public static final String SERIALIZED_NAME_TRADE_CALL = "trade_call";
    @SerializedName(SERIALIZED_NAME_TRADE_CALL)
    private Long tradeCall;

    public static final String SERIALIZED_NAME_INDEX_PRICE = "index_price";
    @SerializedName(SERIALIZED_NAME_INDEX_PRICE)
    private String indexPrice;


    public OptionsUnderlyingTicker tradePut(Long tradePut) {
        
        this.tradePut = tradePut;
        return this;
    }

     /**
     * Total put options trades amount in last 24h
     * @return tradePut
    **/
    @javax.annotation.Nullable
    public Long getTradePut() {
        return tradePut;
    }


    public void setTradePut(Long tradePut) {
        this.tradePut = tradePut;
    }

    public OptionsUnderlyingTicker tradeCall(Long tradeCall) {
        
        this.tradeCall = tradeCall;
        return this;
    }

     /**
     * Total call options trades amount in last 24h
     * @return tradeCall
    **/
    @javax.annotation.Nullable
    public Long getTradeCall() {
        return tradeCall;
    }


    public void setTradeCall(Long tradeCall) {
        this.tradeCall = tradeCall;
    }

    public OptionsUnderlyingTicker indexPrice(String indexPrice) {
        
        this.indexPrice = indexPrice;
        return this;
    }

     /**
     * Index price (quote currency)
     * @return indexPrice
    **/
    @javax.annotation.Nullable
    public String getIndexPrice() {
        return indexPrice;
    }


    public void setIndexPrice(String indexPrice) {
        this.indexPrice = indexPrice;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OptionsUnderlyingTicker optionsUnderlyingTicker = (OptionsUnderlyingTicker) o;
        return Objects.equals(this.tradePut, optionsUnderlyingTicker.tradePut) &&
                Objects.equals(this.tradeCall, optionsUnderlyingTicker.tradeCall) &&
                Objects.equals(this.indexPrice, optionsUnderlyingTicker.indexPrice);
    }

    @Override
    public int hashCode() {
        return Objects.hash(tradePut, tradeCall, indexPrice);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OptionsUnderlyingTicker {\n");
        sb.append("      tradePut: ").append(toIndentedString(tradePut)).append("\n");
        sb.append("      tradeCall: ").append(toIndentedString(tradeCall)).append("\n");
        sb.append("      indexPrice: ").append(toIndentedString(indexPrice)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

