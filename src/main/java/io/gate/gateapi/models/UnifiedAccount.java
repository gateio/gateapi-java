/*
 * Gate API v4
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gate.gateapi.models.UnifiedBalance;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * UnifiedAccount
 */
public class UnifiedAccount {
    public static final String SERIALIZED_NAME_USER_ID = "user_id";
    @SerializedName(SERIALIZED_NAME_USER_ID)
    private Long userId;

    public static final String SERIALIZED_NAME_REFRESH_TIME = "refresh_time";
    @SerializedName(SERIALIZED_NAME_REFRESH_TIME)
    private Long refreshTime;

    public static final String SERIALIZED_NAME_LOCKED = "locked";
    @SerializedName(SERIALIZED_NAME_LOCKED)
    private Boolean locked;

    public static final String SERIALIZED_NAME_BALANCES = "balances";
    @SerializedName(SERIALIZED_NAME_BALANCES)
    private Map<String, UnifiedBalance> balances = null;

    public static final String SERIALIZED_NAME_TOTAL = "total";
    @SerializedName(SERIALIZED_NAME_TOTAL)
    private String total;

    public static final String SERIALIZED_NAME_BORROWED = "borrowed";
    @SerializedName(SERIALIZED_NAME_BORROWED)
    private String borrowed;

    public static final String SERIALIZED_NAME_TOTAL_INITIAL_MARGIN = "total_initial_margin";
    @SerializedName(SERIALIZED_NAME_TOTAL_INITIAL_MARGIN)
    private String totalInitialMargin;

    public static final String SERIALIZED_NAME_TOTAL_MARGIN_BALANCE = "total_margin_balance";
    @SerializedName(SERIALIZED_NAME_TOTAL_MARGIN_BALANCE)
    private String totalMarginBalance;

    public static final String SERIALIZED_NAME_TOTAL_MAINTENANCE_MARGIN = "total_maintenance_margin";
    @SerializedName(SERIALIZED_NAME_TOTAL_MAINTENANCE_MARGIN)
    private String totalMaintenanceMargin;

    public static final String SERIALIZED_NAME_TOTAL_INITIAL_MARGIN_RATE = "total_initial_margin_rate";
    @SerializedName(SERIALIZED_NAME_TOTAL_INITIAL_MARGIN_RATE)
    private String totalInitialMarginRate;

    public static final String SERIALIZED_NAME_TOTAL_MAINTENANCE_MARGIN_RATE = "total_maintenance_margin_rate";
    @SerializedName(SERIALIZED_NAME_TOTAL_MAINTENANCE_MARGIN_RATE)
    private String totalMaintenanceMarginRate;

    public static final String SERIALIZED_NAME_TOTAL_AVAILABLE_MARGIN = "total_available_margin";
    @SerializedName(SERIALIZED_NAME_TOTAL_AVAILABLE_MARGIN)
    private String totalAvailableMargin;

    public static final String SERIALIZED_NAME_UNIFIED_ACCOUNT_TOTAL = "unified_account_total";
    @SerializedName(SERIALIZED_NAME_UNIFIED_ACCOUNT_TOTAL)
    private String unifiedAccountTotal;

    public static final String SERIALIZED_NAME_UNIFIED_ACCOUNT_TOTAL_LIAB = "unified_account_total_liab";
    @SerializedName(SERIALIZED_NAME_UNIFIED_ACCOUNT_TOTAL_LIAB)
    private String unifiedAccountTotalLiab;

    public static final String SERIALIZED_NAME_UNIFIED_ACCOUNT_TOTAL_EQUITY = "unified_account_total_equity";
    @SerializedName(SERIALIZED_NAME_UNIFIED_ACCOUNT_TOTAL_EQUITY)
    private String unifiedAccountTotalEquity;

    public static final String SERIALIZED_NAME_LEVERAGE = "leverage";
    @SerializedName(SERIALIZED_NAME_LEVERAGE)
    private String leverage;

    public static final String SERIALIZED_NAME_SPOT_ORDER_LOSS = "spot_order_loss";
    @SerializedName(SERIALIZED_NAME_SPOT_ORDER_LOSS)
    private String spotOrderLoss;

    public static final String SERIALIZED_NAME_SPOT_HEDGE = "spot_hedge";
    @SerializedName(SERIALIZED_NAME_SPOT_HEDGE)
    private Boolean spotHedge;

    public static final String SERIALIZED_NAME_USE_FUNDING = "use_funding";
    @SerializedName(SERIALIZED_NAME_USE_FUNDING)
    private Boolean useFunding;


    public UnifiedAccount userId(Long userId) {
        
        this.userId = userId;
        return this;
    }

     /**
     * User ID
     * @return userId
    **/
    @javax.annotation.Nullable
    public Long getUserId() {
        return userId;
    }


    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public UnifiedAccount refreshTime(Long refreshTime) {
        
        this.refreshTime = refreshTime;
        return this;
    }

     /**
     * Time of the most recent refresh
     * @return refreshTime
    **/
    @javax.annotation.Nullable
    public Long getRefreshTime() {
        return refreshTime;
    }


    public void setRefreshTime(Long refreshTime) {
        this.refreshTime = refreshTime;
    }

    public UnifiedAccount locked(Boolean locked) {
        
        this.locked = locked;
        return this;
    }

     /**
     * Whether the account is locked, valid in cross-currency margin/combined margin mode, false in other modes such as single-currency margin mode
     * @return locked
    **/
    @javax.annotation.Nullable
    public Boolean getLocked() {
        return locked;
    }


    public void setLocked(Boolean locked) {
        this.locked = locked;
    }

    public UnifiedAccount balances(Map<String, UnifiedBalance> balances) {
        
        this.balances = balances;
        return this;
    }

    public UnifiedAccount putBalancesItem(String key, UnifiedBalance balancesItem) {
        if (this.balances == null) {
            this.balances = new HashMap<>();
        }
        this.balances.put(key, balancesItem);
        return this;
    }

     /**
     * Get balances
     * @return balances
    **/
    @javax.annotation.Nullable
    public Map<String, UnifiedBalance> getBalances() {
        return balances;
    }


    public void setBalances(Map<String, UnifiedBalance> balances) {
        this.balances = balances;
    }

    public UnifiedAccount total(String total) {
        
        this.total = total;
        return this;
    }

     /**
     * Total account assets converted to USD, i.e. the sum of &#x60;(available + freeze) * price&#x60;  in all currencies (deprecated, to be deprecated, replaced by unified_account_total)
     * @return total
    **/
    @javax.annotation.Nullable
    public String getTotal() {
        return total;
    }


    public void setTotal(String total) {
        this.total = total;
    }

    public UnifiedAccount borrowed(String borrowed) {
        
        this.borrowed = borrowed;
        return this;
    }

     /**
     * The total borrowed amount of the account converted into USD, i.e. the sum of &#x60;borrowed * price&#x60; of all currencies (excluding Point Cards). It is valid in cross-currency margin/combined margin mode, and is 0 in other modes such as single-currency margin mode.
     * @return borrowed
    **/
    @javax.annotation.Nullable
    public String getBorrowed() {
        return borrowed;
    }


    public void setBorrowed(String borrowed) {
        this.borrowed = borrowed;
    }

    public UnifiedAccount totalInitialMargin(String totalInitialMargin) {
        
        this.totalInitialMargin = totalInitialMargin;
        return this;
    }

     /**
     * Total initial margin, valid in cross-currency margin/combined margin mode, 0 in other modes such as single-currency margin mode
     * @return totalInitialMargin
    **/
    @javax.annotation.Nullable
    public String getTotalInitialMargin() {
        return totalInitialMargin;
    }


    public void setTotalInitialMargin(String totalInitialMargin) {
        this.totalInitialMargin = totalInitialMargin;
    }

    public UnifiedAccount totalMarginBalance(String totalMarginBalance) {
        
        this.totalMarginBalance = totalMarginBalance;
        return this;
    }

     /**
     * Total margin balance, valid in cross-currency margin/combined margin mode, 0 in other modes such as single-currency margin mode
     * @return totalMarginBalance
    **/
    @javax.annotation.Nullable
    public String getTotalMarginBalance() {
        return totalMarginBalance;
    }


    public void setTotalMarginBalance(String totalMarginBalance) {
        this.totalMarginBalance = totalMarginBalance;
    }

    public UnifiedAccount totalMaintenanceMargin(String totalMaintenanceMargin) {
        
        this.totalMaintenanceMargin = totalMaintenanceMargin;
        return this;
    }

     /**
     * Total maintenance margin is valid in cross-currency margin/combined margin mode, and is 0 in other modes such as single-currency margin mode
     * @return totalMaintenanceMargin
    **/
    @javax.annotation.Nullable
    public String getTotalMaintenanceMargin() {
        return totalMaintenanceMargin;
    }


    public void setTotalMaintenanceMargin(String totalMaintenanceMargin) {
        this.totalMaintenanceMargin = totalMaintenanceMargin;
    }

    public UnifiedAccount totalInitialMarginRate(String totalInitialMarginRate) {
        
        this.totalInitialMarginRate = totalInitialMarginRate;
        return this;
    }

     /**
     * Total initial margin rate, valid in cross-currency margin/combined margin mode, 0 in other modes such as single-currency margin mode
     * @return totalInitialMarginRate
    **/
    @javax.annotation.Nullable
    public String getTotalInitialMarginRate() {
        return totalInitialMarginRate;
    }


    public void setTotalInitialMarginRate(String totalInitialMarginRate) {
        this.totalInitialMarginRate = totalInitialMarginRate;
    }

    public UnifiedAccount totalMaintenanceMarginRate(String totalMaintenanceMarginRate) {
        
        this.totalMaintenanceMarginRate = totalMaintenanceMarginRate;
        return this;
    }

     /**
     * Total maintenance margin rate, valid in cross-currency margin/combined margin mode, 0 in other modes such as single-currency margin mode
     * @return totalMaintenanceMarginRate
    **/
    @javax.annotation.Nullable
    public String getTotalMaintenanceMarginRate() {
        return totalMaintenanceMarginRate;
    }


    public void setTotalMaintenanceMarginRate(String totalMaintenanceMarginRate) {
        this.totalMaintenanceMarginRate = totalMaintenanceMarginRate;
    }

    public UnifiedAccount totalAvailableMargin(String totalAvailableMargin) {
        
        this.totalAvailableMargin = totalAvailableMargin;
        return this;
    }

     /**
     * Available margin amount, valid in cross-currency margin/combined margin mode, 0 in other modes such as single-currency margin mode
     * @return totalAvailableMargin
    **/
    @javax.annotation.Nullable
    public String getTotalAvailableMargin() {
        return totalAvailableMargin;
    }


    public void setTotalAvailableMargin(String totalAvailableMargin) {
        this.totalAvailableMargin = totalAvailableMargin;
    }

    public UnifiedAccount unifiedAccountTotal(String unifiedAccountTotal) {
        
        this.unifiedAccountTotal = unifiedAccountTotal;
        return this;
    }

     /**
     * Unify the total account assets, valid in single currency margin/cross-currency margin/combined margin mode
     * @return unifiedAccountTotal
    **/
    @javax.annotation.Nullable
    public String getUnifiedAccountTotal() {
        return unifiedAccountTotal;
    }


    public void setUnifiedAccountTotal(String unifiedAccountTotal) {
        this.unifiedAccountTotal = unifiedAccountTotal;
    }

    public UnifiedAccount unifiedAccountTotalLiab(String unifiedAccountTotalLiab) {
        
        this.unifiedAccountTotalLiab = unifiedAccountTotalLiab;
        return this;
    }

     /**
     * Unify the total loan of the account, valid in the cross-currency margin/combined margin mode, and 0 in other modes such as single-currency margin mode
     * @return unifiedAccountTotalLiab
    **/
    @javax.annotation.Nullable
    public String getUnifiedAccountTotalLiab() {
        return unifiedAccountTotalLiab;
    }


    public void setUnifiedAccountTotalLiab(String unifiedAccountTotalLiab) {
        this.unifiedAccountTotalLiab = unifiedAccountTotalLiab;
    }

    public UnifiedAccount unifiedAccountTotalEquity(String unifiedAccountTotalEquity) {
        
        this.unifiedAccountTotalEquity = unifiedAccountTotalEquity;
        return this;
    }

     /**
     * Unify the total account equity, valid in single currency margin/cross-currency margin/combined margin mode
     * @return unifiedAccountTotalEquity
    **/
    @javax.annotation.Nullable
    public String getUnifiedAccountTotalEquity() {
        return unifiedAccountTotalEquity;
    }


    public void setUnifiedAccountTotalEquity(String unifiedAccountTotalEquity) {
        this.unifiedAccountTotalEquity = unifiedAccountTotalEquity;
    }

     /**
     * Actual leverage, valid in cross-currency margin/combined margin mode
     * @return leverage
    **/
    @javax.annotation.Nullable
    public String getLeverage() {
        return leverage;
    }


    public UnifiedAccount spotOrderLoss(String spotOrderLoss) {
        
        this.spotOrderLoss = spotOrderLoss;
        return this;
    }

     /**
     * Total pending order loss, in USDT, valid in cross-currency margin/combined margin mode, 0 in other modes such as single-currency margin mode
     * @return spotOrderLoss
    **/
    @javax.annotation.Nullable
    public String getSpotOrderLoss() {
        return spotOrderLoss;
    }


    public void setSpotOrderLoss(String spotOrderLoss) {
        this.spotOrderLoss = spotOrderLoss;
    }

    public UnifiedAccount spotHedge(Boolean spotHedge) {
        
        this.spotHedge = spotHedge;
        return this;
    }

     /**
     * Spot hedging status, true - enabled, false - not enabled.
     * @return spotHedge
    **/
    @javax.annotation.Nullable
    public Boolean getSpotHedge() {
        return spotHedge;
    }


    public void setSpotHedge(Boolean spotHedge) {
        this.spotHedge = spotHedge;
    }

    public UnifiedAccount useFunding(Boolean useFunding) {
        
        this.useFunding = useFunding;
        return this;
    }

     /**
     * Whether to use funds as margin
     * @return useFunding
    **/
    @javax.annotation.Nullable
    public Boolean getUseFunding() {
        return useFunding;
    }


    public void setUseFunding(Boolean useFunding) {
        this.useFunding = useFunding;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnifiedAccount unifiedAccount = (UnifiedAccount) o;
        return Objects.equals(this.userId, unifiedAccount.userId) &&
                Objects.equals(this.refreshTime, unifiedAccount.refreshTime) &&
                Objects.equals(this.locked, unifiedAccount.locked) &&
                Objects.equals(this.balances, unifiedAccount.balances) &&
                Objects.equals(this.total, unifiedAccount.total) &&
                Objects.equals(this.borrowed, unifiedAccount.borrowed) &&
                Objects.equals(this.totalInitialMargin, unifiedAccount.totalInitialMargin) &&
                Objects.equals(this.totalMarginBalance, unifiedAccount.totalMarginBalance) &&
                Objects.equals(this.totalMaintenanceMargin, unifiedAccount.totalMaintenanceMargin) &&
                Objects.equals(this.totalInitialMarginRate, unifiedAccount.totalInitialMarginRate) &&
                Objects.equals(this.totalMaintenanceMarginRate, unifiedAccount.totalMaintenanceMarginRate) &&
                Objects.equals(this.totalAvailableMargin, unifiedAccount.totalAvailableMargin) &&
                Objects.equals(this.unifiedAccountTotal, unifiedAccount.unifiedAccountTotal) &&
                Objects.equals(this.unifiedAccountTotalLiab, unifiedAccount.unifiedAccountTotalLiab) &&
                Objects.equals(this.unifiedAccountTotalEquity, unifiedAccount.unifiedAccountTotalEquity) &&
                Objects.equals(this.leverage, unifiedAccount.leverage) &&
                Objects.equals(this.spotOrderLoss, unifiedAccount.spotOrderLoss) &&
                Objects.equals(this.spotHedge, unifiedAccount.spotHedge) &&
                Objects.equals(this.useFunding, unifiedAccount.useFunding);
    }

    @Override
    public int hashCode() {
        return Objects.hash(userId, refreshTime, locked, balances, total, borrowed, totalInitialMargin, totalMarginBalance, totalMaintenanceMargin, totalInitialMarginRate, totalMaintenanceMarginRate, totalAvailableMargin, unifiedAccountTotal, unifiedAccountTotalLiab, unifiedAccountTotalEquity, leverage, spotOrderLoss, spotHedge, useFunding);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UnifiedAccount {\n");
        sb.append("      userId: ").append(toIndentedString(userId)).append("\n");
        sb.append("      refreshTime: ").append(toIndentedString(refreshTime)).append("\n");
        sb.append("      locked: ").append(toIndentedString(locked)).append("\n");
        sb.append("      balances: ").append(toIndentedString(balances)).append("\n");
        sb.append("      total: ").append(toIndentedString(total)).append("\n");
        sb.append("      borrowed: ").append(toIndentedString(borrowed)).append("\n");
        sb.append("      totalInitialMargin: ").append(toIndentedString(totalInitialMargin)).append("\n");
        sb.append("      totalMarginBalance: ").append(toIndentedString(totalMarginBalance)).append("\n");
        sb.append("      totalMaintenanceMargin: ").append(toIndentedString(totalMaintenanceMargin)).append("\n");
        sb.append("      totalInitialMarginRate: ").append(toIndentedString(totalInitialMarginRate)).append("\n");
        sb.append("      totalMaintenanceMarginRate: ").append(toIndentedString(totalMaintenanceMarginRate)).append("\n");
        sb.append("      totalAvailableMargin: ").append(toIndentedString(totalAvailableMargin)).append("\n");
        sb.append("      unifiedAccountTotal: ").append(toIndentedString(unifiedAccountTotal)).append("\n");
        sb.append("      unifiedAccountTotalLiab: ").append(toIndentedString(unifiedAccountTotalLiab)).append("\n");
        sb.append("      unifiedAccountTotalEquity: ").append(toIndentedString(unifiedAccountTotalEquity)).append("\n");
        sb.append("      leverage: ").append(toIndentedString(leverage)).append("\n");
        sb.append("      spotOrderLoss: ").append(toIndentedString(spotOrderLoss)).append("\n");
        sb.append("      spotHedge: ").append(toIndentedString(spotHedge)).append("\n");
        sb.append("      useFunding: ").append(toIndentedString(useFunding)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

