/*
 * Gate API
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gate.gateapi.models.OptionsPositionCloseOrder;
import java.io.IOException;

/**
 * Options position information.
 */
public class OptionsPosition {
    public static final String SERIALIZED_NAME_USER = "user";
    @SerializedName(SERIALIZED_NAME_USER)
    private Integer user;

    public static final String SERIALIZED_NAME_UNDERLYING = "underlying";
    @SerializedName(SERIALIZED_NAME_UNDERLYING)
    private String underlying;

    public static final String SERIALIZED_NAME_UNDERLYING_PRICE = "underlying_price";
    @SerializedName(SERIALIZED_NAME_UNDERLYING_PRICE)
    private String underlyingPrice;

    public static final String SERIALIZED_NAME_CONTRACT = "contract";
    @SerializedName(SERIALIZED_NAME_CONTRACT)
    private String contract;

    public static final String SERIALIZED_NAME_SIZE = "size";
    @SerializedName(SERIALIZED_NAME_SIZE)
    private Long size;

    public static final String SERIALIZED_NAME_ENTRY_PRICE = "entry_price";
    @SerializedName(SERIALIZED_NAME_ENTRY_PRICE)
    private String entryPrice;

    public static final String SERIALIZED_NAME_MARK_PRICE = "mark_price";
    @SerializedName(SERIALIZED_NAME_MARK_PRICE)
    private String markPrice;

    public static final String SERIALIZED_NAME_MARK_IV = "mark_iv";
    @SerializedName(SERIALIZED_NAME_MARK_IV)
    private String markIv;

    public static final String SERIALIZED_NAME_REALISED_PNL = "realised_pnl";
    @SerializedName(SERIALIZED_NAME_REALISED_PNL)
    private String realisedPnl;

    public static final String SERIALIZED_NAME_UNREALISED_PNL = "unrealised_pnl";
    @SerializedName(SERIALIZED_NAME_UNREALISED_PNL)
    private String unrealisedPnl;

    public static final String SERIALIZED_NAME_PENDING_ORDERS = "pending_orders";
    @SerializedName(SERIALIZED_NAME_PENDING_ORDERS)
    private Integer pendingOrders;

    public static final String SERIALIZED_NAME_CLOSE_ORDER = "close_order";
    @SerializedName(SERIALIZED_NAME_CLOSE_ORDER)
    private OptionsPositionCloseOrder closeOrder;

    public static final String SERIALIZED_NAME_DELTA = "delta";
    @SerializedName(SERIALIZED_NAME_DELTA)
    private String delta;

    public static final String SERIALIZED_NAME_GAMMA = "gamma";
    @SerializedName(SERIALIZED_NAME_GAMMA)
    private String gamma;

    public static final String SERIALIZED_NAME_VEGA = "vega";
    @SerializedName(SERIALIZED_NAME_VEGA)
    private String vega;

    public static final String SERIALIZED_NAME_THETA = "theta";
    @SerializedName(SERIALIZED_NAME_THETA)
    private String theta;


     /**
     * User ID.
     * @return user
    **/
    @javax.annotation.Nullable
    public Integer getUser() {
        return user;
    }


     /**
     * Underlying.
     * @return underlying
    **/
    @javax.annotation.Nullable
    public String getUnderlying() {
        return underlying;
    }


     /**
     * Underlying price (quote currency).
     * @return underlyingPrice
    **/
    @javax.annotation.Nullable
    public String getUnderlyingPrice() {
        return underlyingPrice;
    }


     /**
     * Options contract name.
     * @return contract
    **/
    @javax.annotation.Nullable
    public String getContract() {
        return contract;
    }


     /**
     * Position size (contract size).
     * @return size
    **/
    @javax.annotation.Nullable
    public Long getSize() {
        return size;
    }


     /**
     * Entry size (quote currency).
     * @return entryPrice
    **/
    @javax.annotation.Nullable
    public String getEntryPrice() {
        return entryPrice;
    }


     /**
     * Current mark price (quote currency).
     * @return markPrice
    **/
    @javax.annotation.Nullable
    public String getMarkPrice() {
        return markPrice;
    }


     /**
     * Implied volatility.
     * @return markIv
    **/
    @javax.annotation.Nullable
    public String getMarkIv() {
        return markIv;
    }


     /**
     * Realized PNL.
     * @return realisedPnl
    **/
    @javax.annotation.Nullable
    public String getRealisedPnl() {
        return realisedPnl;
    }


     /**
     * Unrealized PNL.
     * @return unrealisedPnl
    **/
    @javax.annotation.Nullable
    public String getUnrealisedPnl() {
        return unrealisedPnl;
    }


     /**
     * Current open orders.
     * @return pendingOrders
    **/
    @javax.annotation.Nullable
    public Integer getPendingOrders() {
        return pendingOrders;
    }


    public OptionsPosition closeOrder(OptionsPositionCloseOrder closeOrder) {
        
        this.closeOrder = closeOrder;
        return this;
    }

     /**
     * Get closeOrder
     * @return closeOrder
    **/
    @javax.annotation.Nullable
    public OptionsPositionCloseOrder getCloseOrder() {
        return closeOrder;
    }


    public void setCloseOrder(OptionsPositionCloseOrder closeOrder) {
        this.closeOrder = closeOrder;
    }

     /**
     * Delta.
     * @return delta
    **/
    @javax.annotation.Nullable
    public String getDelta() {
        return delta;
    }


     /**
     * Gamma.
     * @return gamma
    **/
    @javax.annotation.Nullable
    public String getGamma() {
        return gamma;
    }


     /**
     * Vega.
     * @return vega
    **/
    @javax.annotation.Nullable
    public String getVega() {
        return vega;
    }


     /**
     * Theta.
     * @return theta
    **/
    @javax.annotation.Nullable
    public String getTheta() {
        return theta;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OptionsPosition optionsPosition = (OptionsPosition) o;
        return Objects.equals(this.user, optionsPosition.user) &&
                Objects.equals(this.underlying, optionsPosition.underlying) &&
                Objects.equals(this.underlyingPrice, optionsPosition.underlyingPrice) &&
                Objects.equals(this.contract, optionsPosition.contract) &&
                Objects.equals(this.size, optionsPosition.size) &&
                Objects.equals(this.entryPrice, optionsPosition.entryPrice) &&
                Objects.equals(this.markPrice, optionsPosition.markPrice) &&
                Objects.equals(this.markIv, optionsPosition.markIv) &&
                Objects.equals(this.realisedPnl, optionsPosition.realisedPnl) &&
                Objects.equals(this.unrealisedPnl, optionsPosition.unrealisedPnl) &&
                Objects.equals(this.pendingOrders, optionsPosition.pendingOrders) &&
                Objects.equals(this.closeOrder, optionsPosition.closeOrder) &&
                Objects.equals(this.delta, optionsPosition.delta) &&
                Objects.equals(this.gamma, optionsPosition.gamma) &&
                Objects.equals(this.vega, optionsPosition.vega) &&
                Objects.equals(this.theta, optionsPosition.theta);
    }

    @Override
    public int hashCode() {
        return Objects.hash(user, underlying, underlyingPrice, contract, size, entryPrice, markPrice, markIv, realisedPnl, unrealisedPnl, pendingOrders, closeOrder, delta, gamma, vega, theta);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OptionsPosition {\n");
        sb.append("      user: ").append(toIndentedString(user)).append("\n");
        sb.append("      underlying: ").append(toIndentedString(underlying)).append("\n");
        sb.append("      underlyingPrice: ").append(toIndentedString(underlyingPrice)).append("\n");
        sb.append("      contract: ").append(toIndentedString(contract)).append("\n");
        sb.append("      size: ").append(toIndentedString(size)).append("\n");
        sb.append("      entryPrice: ").append(toIndentedString(entryPrice)).append("\n");
        sb.append("      markPrice: ").append(toIndentedString(markPrice)).append("\n");
        sb.append("      markIv: ").append(toIndentedString(markIv)).append("\n");
        sb.append("      realisedPnl: ").append(toIndentedString(realisedPnl)).append("\n");
        sb.append("      unrealisedPnl: ").append(toIndentedString(unrealisedPnl)).append("\n");
        sb.append("      pendingOrders: ").append(toIndentedString(pendingOrders)).append("\n");
        sb.append("      closeOrder: ").append(toIndentedString(closeOrder)).append("\n");
        sb.append("      delta: ").append(toIndentedString(delta)).append("\n");
        sb.append("      gamma: ").append(toIndentedString(gamma)).append("\n");
        sb.append("      vega: ").append(toIndentedString(vega)).append("\n");
        sb.append("      theta: ").append(toIndentedString(theta)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

