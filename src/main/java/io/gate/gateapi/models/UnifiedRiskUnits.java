/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gate.gateapi.models.RiskUnits;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * UnifiedRiskUnits
 */
public class UnifiedRiskUnits {
    public static final String SERIALIZED_NAME_USER_ID = "user_id";
    @SerializedName(SERIALIZED_NAME_USER_ID)
    private Long userId;

    public static final String SERIALIZED_NAME_SPOT_HEDGE = "spot_hedge";
    @SerializedName(SERIALIZED_NAME_SPOT_HEDGE)
    private Boolean spotHedge;

    public static final String SERIALIZED_NAME_RISK_UNITS = "risk_units";
    @SerializedName(SERIALIZED_NAME_RISK_UNITS)
    private List<RiskUnits> riskUnits = null;


    public UnifiedRiskUnits userId(Long userId) {
        
        this.userId = userId;
        return this;
    }

     /**
     * User ID
     * @return userId
    **/
    @javax.annotation.Nullable
    public Long getUserId() {
        return userId;
    }


    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public UnifiedRiskUnits spotHedge(Boolean spotHedge) {
        
        this.spotHedge = spotHedge;
        return this;
    }

     /**
     * Spot hedging status, true - enabled, false - not enabled.
     * @return spotHedge
    **/
    @javax.annotation.Nullable
    public Boolean getSpotHedge() {
        return spotHedge;
    }


    public void setSpotHedge(Boolean spotHedge) {
        this.spotHedge = spotHedge;
    }

    public UnifiedRiskUnits riskUnits(List<RiskUnits> riskUnits) {
        
        this.riskUnits = riskUnits;
        return this;
    }

    public UnifiedRiskUnits addRiskUnitsItem(RiskUnits riskUnitsItem) {
        if (this.riskUnits == null) {
            this.riskUnits = new ArrayList<>();
        }
        this.riskUnits.add(riskUnitsItem);
        return this;
    }

     /**
     * Risk unit
     * @return riskUnits
    **/
    @javax.annotation.Nullable
    public List<RiskUnits> getRiskUnits() {
        return riskUnits;
    }


    public void setRiskUnits(List<RiskUnits> riskUnits) {
        this.riskUnits = riskUnits;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnifiedRiskUnits unifiedRiskUnits = (UnifiedRiskUnits) o;
        return Objects.equals(this.userId, unifiedRiskUnits.userId) &&
                Objects.equals(this.spotHedge, unifiedRiskUnits.spotHedge) &&
                Objects.equals(this.riskUnits, unifiedRiskUnits.riskUnits);
    }

    @Override
    public int hashCode() {
        return Objects.hash(userId, spotHedge, riskUnits);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UnifiedRiskUnits {\n");
        sb.append("      userId: ").append(toIndentedString(userId)).append("\n");
        sb.append("      spotHedge: ").append(toIndentedString(spotHedge)).append("\n");
        sb.append("      riskUnits: ").append(toIndentedString(riskUnits)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

