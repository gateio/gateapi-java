/*
 * Gate API
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gate.gateapi.models.MockFuturesOrder;
import io.gate.gateapi.models.MockFuturesPosition;
import io.gate.gateapi.models.MockOptionsOrder;
import io.gate.gateapi.models.MockOptionsPosition;
import io.gate.gateapi.models.MockSpotBalance;
import io.gate.gateapi.models.MockSpotOrder;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Input for the portfolio margin calculator.
 */
public class UnifiedPortfolioInput {
    public static final String SERIALIZED_NAME_SPOT_BALANCES = "spot_balances";
    @SerializedName(SERIALIZED_NAME_SPOT_BALANCES)
    private List<MockSpotBalance> spotBalances = null;

    public static final String SERIALIZED_NAME_SPOT_ORDERS = "spot_orders";
    @SerializedName(SERIALIZED_NAME_SPOT_ORDERS)
    private List<MockSpotOrder> spotOrders = null;

    public static final String SERIALIZED_NAME_FUTURES_POSITIONS = "futures_positions";
    @SerializedName(SERIALIZED_NAME_FUTURES_POSITIONS)
    private List<MockFuturesPosition> futuresPositions = null;

    public static final String SERIALIZED_NAME_FUTURES_ORDERS = "futures_orders";
    @SerializedName(SERIALIZED_NAME_FUTURES_ORDERS)
    private List<MockFuturesOrder> futuresOrders = null;

    public static final String SERIALIZED_NAME_OPTIONS_POSITIONS = "options_positions";
    @SerializedName(SERIALIZED_NAME_OPTIONS_POSITIONS)
    private List<MockOptionsPosition> optionsPositions = null;

    public static final String SERIALIZED_NAME_OPTIONS_ORDERS = "options_orders";
    @SerializedName(SERIALIZED_NAME_OPTIONS_ORDERS)
    private List<MockOptionsOrder> optionsOrders = null;

    public static final String SERIALIZED_NAME_SPOT_HEDGE = "spot_hedge";
    @SerializedName(SERIALIZED_NAME_SPOT_HEDGE)
    private Boolean spotHedge;


    public UnifiedPortfolioInput spotBalances(List<MockSpotBalance> spotBalances) {
        
        this.spotBalances = spotBalances;
        return this;
    }

    public UnifiedPortfolioInput addSpotBalancesItem(MockSpotBalance spotBalancesItem) {
        if (this.spotBalances == null) {
            this.spotBalances = new ArrayList<>();
        }
        this.spotBalances.add(spotBalancesItem);
        return this;
    }

     /**
     * Spot
     * @return spotBalances
    **/
    @javax.annotation.Nullable
    public List<MockSpotBalance> getSpotBalances() {
        return spotBalances;
    }


    public void setSpotBalances(List<MockSpotBalance> spotBalances) {
        this.spotBalances = spotBalances;
    }

    public UnifiedPortfolioInput spotOrders(List<MockSpotOrder> spotOrders) {
        
        this.spotOrders = spotOrders;
        return this;
    }

    public UnifiedPortfolioInput addSpotOrdersItem(MockSpotOrder spotOrdersItem) {
        if (this.spotOrders == null) {
            this.spotOrders = new ArrayList<>();
        }
        this.spotOrders.add(spotOrdersItem);
        return this;
    }

     /**
     * Spot orders
     * @return spotOrders
    **/
    @javax.annotation.Nullable
    public List<MockSpotOrder> getSpotOrders() {
        return spotOrders;
    }


    public void setSpotOrders(List<MockSpotOrder> spotOrders) {
        this.spotOrders = spotOrders;
    }

    public UnifiedPortfolioInput futuresPositions(List<MockFuturesPosition> futuresPositions) {
        
        this.futuresPositions = futuresPositions;
        return this;
    }

    public UnifiedPortfolioInput addFuturesPositionsItem(MockFuturesPosition futuresPositionsItem) {
        if (this.futuresPositions == null) {
            this.futuresPositions = new ArrayList<>();
        }
        this.futuresPositions.add(futuresPositionsItem);
        return this;
    }

     /**
     * Futures positions
     * @return futuresPositions
    **/
    @javax.annotation.Nullable
    public List<MockFuturesPosition> getFuturesPositions() {
        return futuresPositions;
    }


    public void setFuturesPositions(List<MockFuturesPosition> futuresPositions) {
        this.futuresPositions = futuresPositions;
    }

    public UnifiedPortfolioInput futuresOrders(List<MockFuturesOrder> futuresOrders) {
        
        this.futuresOrders = futuresOrders;
        return this;
    }

    public UnifiedPortfolioInput addFuturesOrdersItem(MockFuturesOrder futuresOrdersItem) {
        if (this.futuresOrders == null) {
            this.futuresOrders = new ArrayList<>();
        }
        this.futuresOrders.add(futuresOrdersItem);
        return this;
    }

     /**
     * Futures order
     * @return futuresOrders
    **/
    @javax.annotation.Nullable
    public List<MockFuturesOrder> getFuturesOrders() {
        return futuresOrders;
    }


    public void setFuturesOrders(List<MockFuturesOrder> futuresOrders) {
        this.futuresOrders = futuresOrders;
    }

    public UnifiedPortfolioInput optionsPositions(List<MockOptionsPosition> optionsPositions) {
        
        this.optionsPositions = optionsPositions;
        return this;
    }

    public UnifiedPortfolioInput addOptionsPositionsItem(MockOptionsPosition optionsPositionsItem) {
        if (this.optionsPositions == null) {
            this.optionsPositions = new ArrayList<>();
        }
        this.optionsPositions.add(optionsPositionsItem);
        return this;
    }

     /**
     * Options positions
     * @return optionsPositions
    **/
    @javax.annotation.Nullable
    public List<MockOptionsPosition> getOptionsPositions() {
        return optionsPositions;
    }


    public void setOptionsPositions(List<MockOptionsPosition> optionsPositions) {
        this.optionsPositions = optionsPositions;
    }

    public UnifiedPortfolioInput optionsOrders(List<MockOptionsOrder> optionsOrders) {
        
        this.optionsOrders = optionsOrders;
        return this;
    }

    public UnifiedPortfolioInput addOptionsOrdersItem(MockOptionsOrder optionsOrdersItem) {
        if (this.optionsOrders == null) {
            this.optionsOrders = new ArrayList<>();
        }
        this.optionsOrders.add(optionsOrdersItem);
        return this;
    }

     /**
     * Option orders
     * @return optionsOrders
    **/
    @javax.annotation.Nullable
    public List<MockOptionsOrder> getOptionsOrders() {
        return optionsOrders;
    }


    public void setOptionsOrders(List<MockOptionsOrder> optionsOrders) {
        this.optionsOrders = optionsOrders;
    }

    public UnifiedPortfolioInput spotHedge(Boolean spotHedge) {
        
        this.spotHedge = spotHedge;
        return this;
    }

     /**
     * Whether to enable spot hedging.
     * @return spotHedge
    **/
    @javax.annotation.Nullable
    public Boolean getSpotHedge() {
        return spotHedge;
    }


    public void setSpotHedge(Boolean spotHedge) {
        this.spotHedge = spotHedge;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnifiedPortfolioInput unifiedPortfolioInput = (UnifiedPortfolioInput) o;
        return Objects.equals(this.spotBalances, unifiedPortfolioInput.spotBalances) &&
                Objects.equals(this.spotOrders, unifiedPortfolioInput.spotOrders) &&
                Objects.equals(this.futuresPositions, unifiedPortfolioInput.futuresPositions) &&
                Objects.equals(this.futuresOrders, unifiedPortfolioInput.futuresOrders) &&
                Objects.equals(this.optionsPositions, unifiedPortfolioInput.optionsPositions) &&
                Objects.equals(this.optionsOrders, unifiedPortfolioInput.optionsOrders) &&
                Objects.equals(this.spotHedge, unifiedPortfolioInput.spotHedge);
    }

    @Override
    public int hashCode() {
        return Objects.hash(spotBalances, spotOrders, futuresPositions, futuresOrders, optionsPositions, optionsOrders, spotHedge);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UnifiedPortfolioInput {\n");
        sb.append("      spotBalances: ").append(toIndentedString(spotBalances)).append("\n");
        sb.append("      spotOrders: ").append(toIndentedString(spotOrders)).append("\n");
        sb.append("      futuresPositions: ").append(toIndentedString(futuresPositions)).append("\n");
        sb.append("      futuresOrders: ").append(toIndentedString(futuresOrders)).append("\n");
        sb.append("      optionsPositions: ").append(toIndentedString(optionsPositions)).append("\n");
        sb.append("      optionsOrders: ").append(toIndentedString(optionsOrders)).append("\n");
        sb.append("      spotHedge: ").append(toIndentedString(spotHedge)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

