/*
 * Gate API
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gate.gateapi.models.MockRiskUnit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Portfolio margin calculator output
 */
public class UnifiedPortfolioOutput {
    public static final String SERIALIZED_NAME_MAINTAIN_MARGIN_TOTAL = "maintain_margin_total";
    @SerializedName(SERIALIZED_NAME_MAINTAIN_MARGIN_TOTAL)
    private String maintainMarginTotal;

    public static final String SERIALIZED_NAME_INITIAL_MARGIN_TOTAL = "initial_margin_total";
    @SerializedName(SERIALIZED_NAME_INITIAL_MARGIN_TOTAL)
    private String initialMarginTotal;

    public static final String SERIALIZED_NAME_CALCULATE_TIME = "calculate_time";
    @SerializedName(SERIALIZED_NAME_CALCULATE_TIME)
    private Long calculateTime;

    public static final String SERIALIZED_NAME_RISK_UNIT = "risk_unit";
    @SerializedName(SERIALIZED_NAME_RISK_UNIT)
    private List<MockRiskUnit> riskUnit = null;


    public UnifiedPortfolioOutput maintainMarginTotal(String maintainMarginTotal) {
        
        this.maintainMarginTotal = maintainMarginTotal;
        return this;
    }

     /**
     * Total maintenance margin, including only portfolio margin calculation results for positions in risk units, excluding borrowing margin. If borrowing exists, conventional borrowing margin requirements will still apply
     * @return maintainMarginTotal
    **/
    @javax.annotation.Nullable
    public String getMaintainMarginTotal() {
        return maintainMarginTotal;
    }


    public void setMaintainMarginTotal(String maintainMarginTotal) {
        this.maintainMarginTotal = maintainMarginTotal;
    }

    public UnifiedPortfolioOutput initialMarginTotal(String initialMarginTotal) {
        
        this.initialMarginTotal = initialMarginTotal;
        return this;
    }

     /**
     * Total initial margin, calculated as the maximum of the following three combinations: position, position + positive delta orders, position + negative delta orders
     * @return initialMarginTotal
    **/
    @javax.annotation.Nullable
    public String getInitialMarginTotal() {
        return initialMarginTotal;
    }


    public void setInitialMarginTotal(String initialMarginTotal) {
        this.initialMarginTotal = initialMarginTotal;
    }

    public UnifiedPortfolioOutput calculateTime(Long calculateTime) {
        
        this.calculateTime = calculateTime;
        return this;
    }

     /**
     * Calculation time
     * @return calculateTime
    **/
    @javax.annotation.Nullable
    public Long getCalculateTime() {
        return calculateTime;
    }


    public void setCalculateTime(Long calculateTime) {
        this.calculateTime = calculateTime;
    }

    public UnifiedPortfolioOutput riskUnit(List<MockRiskUnit> riskUnit) {
        
        this.riskUnit = riskUnit;
        return this;
    }

    public UnifiedPortfolioOutput addRiskUnitItem(MockRiskUnit riskUnitItem) {
        if (this.riskUnit == null) {
            this.riskUnit = new ArrayList<>();
        }
        this.riskUnit.add(riskUnitItem);
        return this;
    }

     /**
     * Risk unit
     * @return riskUnit
    **/
    @javax.annotation.Nullable
    public List<MockRiskUnit> getRiskUnit() {
        return riskUnit;
    }


    public void setRiskUnit(List<MockRiskUnit> riskUnit) {
        this.riskUnit = riskUnit;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnifiedPortfolioOutput unifiedPortfolioOutput = (UnifiedPortfolioOutput) o;
        return Objects.equals(this.maintainMarginTotal, unifiedPortfolioOutput.maintainMarginTotal) &&
                Objects.equals(this.initialMarginTotal, unifiedPortfolioOutput.initialMarginTotal) &&
                Objects.equals(this.calculateTime, unifiedPortfolioOutput.calculateTime) &&
                Objects.equals(this.riskUnit, unifiedPortfolioOutput.riskUnit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(maintainMarginTotal, initialMarginTotal, calculateTime, riskUnit);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UnifiedPortfolioOutput {\n");
        sb.append("      maintainMarginTotal: ").append(toIndentedString(maintainMarginTotal)).append("\n");
        sb.append("      initialMarginTotal: ").append(toIndentedString(initialMarginTotal)).append("\n");
        sb.append("      calculateTime: ").append(toIndentedString(calculateTime)).append("\n");
        sb.append("      riskUnit: ").append(toIndentedString(riskUnit)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

