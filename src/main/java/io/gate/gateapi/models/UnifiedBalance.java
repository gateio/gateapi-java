/*
 * Gate API
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * UnifiedBalance
 */
public class UnifiedBalance {
    public static final String SERIALIZED_NAME_AVAILABLE = "available";
    @SerializedName(SERIALIZED_NAME_AVAILABLE)
    private String available;

    public static final String SERIALIZED_NAME_FREEZE = "freeze";
    @SerializedName(SERIALIZED_NAME_FREEZE)
    private String freeze;

    public static final String SERIALIZED_NAME_BORROWED = "borrowed";
    @SerializedName(SERIALIZED_NAME_BORROWED)
    private String borrowed;

    public static final String SERIALIZED_NAME_NEGATIVE_LIAB = "negative_liab";
    @SerializedName(SERIALIZED_NAME_NEGATIVE_LIAB)
    private String negativeLiab;

    public static final String SERIALIZED_NAME_FUTURES_POS_LIAB = "futures_pos_liab";
    @SerializedName(SERIALIZED_NAME_FUTURES_POS_LIAB)
    private String futuresPosLiab;

    public static final String SERIALIZED_NAME_EQUITY = "equity";
    @SerializedName(SERIALIZED_NAME_EQUITY)
    private String equity;

    public static final String SERIALIZED_NAME_TOTAL_FREEZE = "total_freeze";
    @SerializedName(SERIALIZED_NAME_TOTAL_FREEZE)
    private String totalFreeze;

    public static final String SERIALIZED_NAME_TOTAL_LIAB = "total_liab";
    @SerializedName(SERIALIZED_NAME_TOTAL_LIAB)
    private String totalLiab;

    public static final String SERIALIZED_NAME_SPOT_IN_USE = "spot_in_use";
    @SerializedName(SERIALIZED_NAME_SPOT_IN_USE)
    private String spotInUse;

    public static final String SERIALIZED_NAME_FUNDING = "funding";
    @SerializedName(SERIALIZED_NAME_FUNDING)
    private String funding;

    public static final String SERIALIZED_NAME_FUNDING_VERSION = "funding_version";
    @SerializedName(SERIALIZED_NAME_FUNDING_VERSION)
    private String fundingVersion;

    public static final String SERIALIZED_NAME_CROSS_BALANCE = "cross_balance";
    @SerializedName(SERIALIZED_NAME_CROSS_BALANCE)
    private String crossBalance;

    public static final String SERIALIZED_NAME_ISO_BALANCE = "iso_balance";
    @SerializedName(SERIALIZED_NAME_ISO_BALANCE)
    private String isoBalance;

    public static final String SERIALIZED_NAME_IM = "im";
    @SerializedName(SERIALIZED_NAME_IM)
    private String im;

    public static final String SERIALIZED_NAME_MM = "mm";
    @SerializedName(SERIALIZED_NAME_MM)
    private String mm;

    public static final String SERIALIZED_NAME_IMR = "imr";
    @SerializedName(SERIALIZED_NAME_IMR)
    private String imr;

    public static final String SERIALIZED_NAME_MMR = "mmr";
    @SerializedName(SERIALIZED_NAME_MMR)
    private String mmr;

    public static final String SERIALIZED_NAME_MARGIN_BALANCE = "margin_balance";
    @SerializedName(SERIALIZED_NAME_MARGIN_BALANCE)
    private String marginBalance;

    public static final String SERIALIZED_NAME_AVAILABLE_MARGIN = "available_margin";
    @SerializedName(SERIALIZED_NAME_AVAILABLE_MARGIN)
    private String availableMargin;

    public static final String SERIALIZED_NAME_ENABLED_COLLATERAL = "enabled_collateral";
    @SerializedName(SERIALIZED_NAME_ENABLED_COLLATERAL)
    private Boolean enabledCollateral;


    public UnifiedBalance available(String available) {
        
        this.available = available;
        return this;
    }

     /**
     * Available balance, valid in single currency margin/cross-currency margin/combined margin mode, calculation varies by mode
     * @return available
    **/
    @javax.annotation.Nullable
    public String getAvailable() {
        return available;
    }


    public void setAvailable(String available) {
        this.available = available;
    }

    public UnifiedBalance freeze(String freeze) {
        
        this.freeze = freeze;
        return this;
    }

     /**
     * Locked balance, valid in single currency margin/cross-currency margin/combined margin mode
     * @return freeze
    **/
    @javax.annotation.Nullable
    public String getFreeze() {
        return freeze;
    }


    public void setFreeze(String freeze) {
        this.freeze = freeze;
    }

    public UnifiedBalance borrowed(String borrowed) {
        
        this.borrowed = borrowed;
        return this;
    }

     /**
     * Borrowed amount, valid in cross-currency margin/combined margin mode, 0 in other modes such as single-currency margin mode
     * @return borrowed
    **/
    @javax.annotation.Nullable
    public String getBorrowed() {
        return borrowed;
    }


    public void setBorrowed(String borrowed) {
        this.borrowed = borrowed;
    }

    public UnifiedBalance negativeLiab(String negativeLiab) {
        
        this.negativeLiab = negativeLiab;
        return this;
    }

     /**
     * Negative balance borrowing, valid in cross-currency margin/combined margin mode, 0 in other modes such as single-currency margin mode
     * @return negativeLiab
    **/
    @javax.annotation.Nullable
    public String getNegativeLiab() {
        return negativeLiab;
    }


    public void setNegativeLiab(String negativeLiab) {
        this.negativeLiab = negativeLiab;
    }

    public UnifiedBalance futuresPosLiab(String futuresPosLiab) {
        
        this.futuresPosLiab = futuresPosLiab;
        return this;
    }

     /**
     * Contract opening position borrowing currency (abandoned, to be offline field)
     * @return futuresPosLiab
    **/
    @javax.annotation.Nullable
    public String getFuturesPosLiab() {
        return futuresPosLiab;
    }


    public void setFuturesPosLiab(String futuresPosLiab) {
        this.futuresPosLiab = futuresPosLiab;
    }

    public UnifiedBalance equity(String equity) {
        
        this.equity = equity;
        return this;
    }

     /**
     * Equity, valid in single currency margin/cross currency margin/combined margin mode
     * @return equity
    **/
    @javax.annotation.Nullable
    public String getEquity() {
        return equity;
    }


    public void setEquity(String equity) {
        this.equity = equity;
    }

    public UnifiedBalance totalFreeze(String totalFreeze) {
        
        this.totalFreeze = totalFreeze;
        return this;
    }

     /**
     * Total frozen (deprecated, to be removed)
     * @return totalFreeze
    **/
    @javax.annotation.Nullable
    public String getTotalFreeze() {
        return totalFreeze;
    }


    public void setTotalFreeze(String totalFreeze) {
        this.totalFreeze = totalFreeze;
    }

    public UnifiedBalance totalLiab(String totalLiab) {
        
        this.totalLiab = totalLiab;
        return this;
    }

     /**
     * Total borrowed amount, valid in cross-currency margin/combined margin mode, 0 in other modes such as single-currency margin mode
     * @return totalLiab
    **/
    @javax.annotation.Nullable
    public String getTotalLiab() {
        return totalLiab;
    }


    public void setTotalLiab(String totalLiab) {
        this.totalLiab = totalLiab;
    }

    public UnifiedBalance spotInUse(String spotInUse) {
        
        this.spotInUse = spotInUse;
        return this;
    }

     /**
     * The amount of spot hedging is valid in the combined margin mode, and is 0 in other margin modes such as single currency and cross-currency margin modes
     * @return spotInUse
    **/
    @javax.annotation.Nullable
    public String getSpotInUse() {
        return spotInUse;
    }


    public void setSpotInUse(String spotInUse) {
        this.spotInUse = spotInUse;
    }

    public UnifiedBalance funding(String funding) {
        
        this.funding = funding;
        return this;
    }

     /**
     * Uniloan financial management amount, effective when turned on as a unified account margin switch
     * @return funding
    **/
    @javax.annotation.Nullable
    public String getFunding() {
        return funding;
    }


    public void setFunding(String funding) {
        this.funding = funding;
    }

    public UnifiedBalance fundingVersion(String fundingVersion) {
        
        this.fundingVersion = fundingVersion;
        return this;
    }

     /**
     * Funding version
     * @return fundingVersion
    **/
    @javax.annotation.Nullable
    public String getFundingVersion() {
        return fundingVersion;
    }


    public void setFundingVersion(String fundingVersion) {
        this.fundingVersion = fundingVersion;
    }

    public UnifiedBalance crossBalance(String crossBalance) {
        
        this.crossBalance = crossBalance;
        return this;
    }

     /**
     * Full margin balance is valid in single currency margin mode, and is 0 in other modes such as cross currency margin/combined margin mode
     * @return crossBalance
    **/
    @javax.annotation.Nullable
    public String getCrossBalance() {
        return crossBalance;
    }


    public void setCrossBalance(String crossBalance) {
        this.crossBalance = crossBalance;
    }

    public UnifiedBalance isoBalance(String isoBalance) {
        
        this.isoBalance = isoBalance;
        return this;
    }

     /**
     * Isolated margin balance is valid in single-currency margin mode and is 0 in other modes such as cross-currency margin/combined margin mode
     * @return isoBalance
    **/
    @javax.annotation.Nullable
    public String getIsoBalance() {
        return isoBalance;
    }


    public void setIsoBalance(String isoBalance) {
        this.isoBalance = isoBalance;
    }

    public UnifiedBalance im(String im) {
        
        this.im = im;
        return this;
    }

     /**
     * Full-position initial margin is valid in single-currency margin mode and is 0 in other modes such as cross-currency margin/combined margin mode
     * @return im
    **/
    @javax.annotation.Nullable
    public String getIm() {
        return im;
    }


    public void setIm(String im) {
        this.im = im;
    }

    public UnifiedBalance mm(String mm) {
        
        this.mm = mm;
        return this;
    }

     /**
     * Cross margin maintenance margin, valid in single-currency margin mode, 0 in other modes such as cross-currency margin/combined margin mode
     * @return mm
    **/
    @javax.annotation.Nullable
    public String getMm() {
        return mm;
    }


    public void setMm(String mm) {
        this.mm = mm;
    }

    public UnifiedBalance imr(String imr) {
        
        this.imr = imr;
        return this;
    }

     /**
     * Full-position initial margin rate is valid in single-currency margin mode and is 0 in other modes such as cross-currency margin/combined margin mode
     * @return imr
    **/
    @javax.annotation.Nullable
    public String getImr() {
        return imr;
    }


    public void setImr(String imr) {
        this.imr = imr;
    }

    public UnifiedBalance mmr(String mmr) {
        
        this.mmr = mmr;
        return this;
    }

     /**
     * Full-position maintenance margin rate is valid in single-currency margin mode and is 0 in other modes such as cross-currency margin/combined margin mode
     * @return mmr
    **/
    @javax.annotation.Nullable
    public String getMmr() {
        return mmr;
    }


    public void setMmr(String mmr) {
        this.mmr = mmr;
    }

    public UnifiedBalance marginBalance(String marginBalance) {
        
        this.marginBalance = marginBalance;
        return this;
    }

     /**
     * Full margin balance is valid in single currency margin mode and is 0 in other modes such as cross currency margin/combined margin mode
     * @return marginBalance
    **/
    @javax.annotation.Nullable
    public String getMarginBalance() {
        return marginBalance;
    }


    public void setMarginBalance(String marginBalance) {
        this.marginBalance = marginBalance;
    }

    public UnifiedBalance availableMargin(String availableMargin) {
        
        this.availableMargin = availableMargin;
        return this;
    }

     /**
     * Cross margin available balance, valid in single currency margin mode, 0 in other modes such as cross-currency margin/combined margin mode
     * @return availableMargin
    **/
    @javax.annotation.Nullable
    public String getAvailableMargin() {
        return availableMargin;
    }


    public void setAvailableMargin(String availableMargin) {
        this.availableMargin = availableMargin;
    }

    public UnifiedBalance enabledCollateral(Boolean enabledCollateral) {
        
        this.enabledCollateral = enabledCollateral;
        return this;
    }

     /**
     * Currency enabled as margin: true - Enabled, false - Disabled
     * @return enabledCollateral
    **/
    @javax.annotation.Nullable
    public Boolean getEnabledCollateral() {
        return enabledCollateral;
    }


    public void setEnabledCollateral(Boolean enabledCollateral) {
        this.enabledCollateral = enabledCollateral;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnifiedBalance unifiedBalance = (UnifiedBalance) o;
        return Objects.equals(this.available, unifiedBalance.available) &&
                Objects.equals(this.freeze, unifiedBalance.freeze) &&
                Objects.equals(this.borrowed, unifiedBalance.borrowed) &&
                Objects.equals(this.negativeLiab, unifiedBalance.negativeLiab) &&
                Objects.equals(this.futuresPosLiab, unifiedBalance.futuresPosLiab) &&
                Objects.equals(this.equity, unifiedBalance.equity) &&
                Objects.equals(this.totalFreeze, unifiedBalance.totalFreeze) &&
                Objects.equals(this.totalLiab, unifiedBalance.totalLiab) &&
                Objects.equals(this.spotInUse, unifiedBalance.spotInUse) &&
                Objects.equals(this.funding, unifiedBalance.funding) &&
                Objects.equals(this.fundingVersion, unifiedBalance.fundingVersion) &&
                Objects.equals(this.crossBalance, unifiedBalance.crossBalance) &&
                Objects.equals(this.isoBalance, unifiedBalance.isoBalance) &&
                Objects.equals(this.im, unifiedBalance.im) &&
                Objects.equals(this.mm, unifiedBalance.mm) &&
                Objects.equals(this.imr, unifiedBalance.imr) &&
                Objects.equals(this.mmr, unifiedBalance.mmr) &&
                Objects.equals(this.marginBalance, unifiedBalance.marginBalance) &&
                Objects.equals(this.availableMargin, unifiedBalance.availableMargin) &&
                Objects.equals(this.enabledCollateral, unifiedBalance.enabledCollateral);
    }

    @Override
    public int hashCode() {
        return Objects.hash(available, freeze, borrowed, negativeLiab, futuresPosLiab, equity, totalFreeze, totalLiab, spotInUse, funding, fundingVersion, crossBalance, isoBalance, im, mm, imr, mmr, marginBalance, availableMargin, enabledCollateral);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UnifiedBalance {\n");
        sb.append("      available: ").append(toIndentedString(available)).append("\n");
        sb.append("      freeze: ").append(toIndentedString(freeze)).append("\n");
        sb.append("      borrowed: ").append(toIndentedString(borrowed)).append("\n");
        sb.append("      negativeLiab: ").append(toIndentedString(negativeLiab)).append("\n");
        sb.append("      futuresPosLiab: ").append(toIndentedString(futuresPosLiab)).append("\n");
        sb.append("      equity: ").append(toIndentedString(equity)).append("\n");
        sb.append("      totalFreeze: ").append(toIndentedString(totalFreeze)).append("\n");
        sb.append("      totalLiab: ").append(toIndentedString(totalLiab)).append("\n");
        sb.append("      spotInUse: ").append(toIndentedString(spotInUse)).append("\n");
        sb.append("      funding: ").append(toIndentedString(funding)).append("\n");
        sb.append("      fundingVersion: ").append(toIndentedString(fundingVersion)).append("\n");
        sb.append("      crossBalance: ").append(toIndentedString(crossBalance)).append("\n");
        sb.append("      isoBalance: ").append(toIndentedString(isoBalance)).append("\n");
        sb.append("      im: ").append(toIndentedString(im)).append("\n");
        sb.append("      mm: ").append(toIndentedString(mm)).append("\n");
        sb.append("      imr: ").append(toIndentedString(imr)).append("\n");
        sb.append("      mmr: ").append(toIndentedString(mmr)).append("\n");
        sb.append("      marginBalance: ").append(toIndentedString(marginBalance)).append("\n");
        sb.append("      availableMargin: ").append(toIndentedString(availableMargin)).append("\n");
        sb.append("      enabledCollateral: ").append(toIndentedString(enabledCollateral)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

