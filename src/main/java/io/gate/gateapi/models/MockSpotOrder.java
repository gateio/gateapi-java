/*
 * Gate API
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * Spot orders.
 */
public class MockSpotOrder {
    public static final String SERIALIZED_NAME_CURRENCY_PAIRS = "currency_pairs";
    @SerializedName(SERIALIZED_NAME_CURRENCY_PAIRS)
    private String currencyPairs;

    public static final String SERIALIZED_NAME_ORDER_PRICE = "order_price";
    @SerializedName(SERIALIZED_NAME_ORDER_PRICE)
    private String orderPrice;

    public static final String SERIALIZED_NAME_COUNT = "count";
    @SerializedName(SERIALIZED_NAME_COUNT)
    private String count;

    public static final String SERIALIZED_NAME_LEFT = "left";
    @SerializedName(SERIALIZED_NAME_LEFT)
    private String left;

    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    private String type;


    public MockSpotOrder currencyPairs(String currencyPairs) {
        
        this.currencyPairs = currencyPairs;
        return this;
    }

     /**
     * Currency pair.
     * @return currencyPairs
    **/
    public String getCurrencyPairs() {
        return currencyPairs;
    }


    public void setCurrencyPairs(String currencyPairs) {
        this.currencyPairs = currencyPairs;
    }

    public MockSpotOrder orderPrice(String orderPrice) {
        
        this.orderPrice = orderPrice;
        return this;
    }

     /**
     * Price.
     * @return orderPrice
    **/
    public String getOrderPrice() {
        return orderPrice;
    }


    public void setOrderPrice(String orderPrice) {
        this.orderPrice = orderPrice;
    }

    public MockSpotOrder count(String count) {
        
        this.count = count;
        return this;
    }

     /**
     * Initial order quantity for spot trading pairs, not involved in actual calculation.  Currently only supports three currencies: BTC, ETH.
     * @return count
    **/
    @javax.annotation.Nullable
    public String getCount() {
        return count;
    }


    public void setCount(String count) {
        this.count = count;
    }

    public MockSpotOrder left(String left) {
        
        this.left = left;
        return this;
    }

     /**
     * Unfilled quantity, involved in actual calculation.
     * @return left
    **/
    public String getLeft() {
        return left;
    }


    public void setLeft(String left) {
        this.left = left;
    }

    public MockSpotOrder type(String type) {
        
        this.type = type;
        return this;
    }

     /**
     * Order type, sell - sell order, buy - buy order.
     * @return type
    **/
    public String getType() {
        return type;
    }


    public void setType(String type) {
        this.type = type;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MockSpotOrder mockSpotOrder = (MockSpotOrder) o;
        return Objects.equals(this.currencyPairs, mockSpotOrder.currencyPairs) &&
                Objects.equals(this.orderPrice, mockSpotOrder.orderPrice) &&
                Objects.equals(this.count, mockSpotOrder.count) &&
                Objects.equals(this.left, mockSpotOrder.left) &&
                Objects.equals(this.type, mockSpotOrder.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(currencyPairs, orderPrice, count, left, type);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MockSpotOrder {\n");
        sb.append("      currencyPairs: ").append(toIndentedString(currencyPairs)).append("\n");
        sb.append("      orderPrice: ").append(toIndentedString(orderPrice)).append("\n");
        sb.append("      count: ").append(toIndentedString(count)).append("\n");
        sb.append("      left: ").append(toIndentedString(left)).append("\n");
        sb.append("      type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

