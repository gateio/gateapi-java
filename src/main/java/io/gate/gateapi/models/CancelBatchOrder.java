/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * The version of the OpenAPI document: 4.86.0
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * Info of order to be cancelled
 */
@ApiModel(description = "Info of order to be cancelled")

public class CancelBatchOrder {
  public static final String SERIALIZED_NAME_CURRENCY_PAIR = "currency_pair";
  @SerializedName(SERIALIZED_NAME_CURRENCY_PAIR)
  private String currencyPair;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ACTION_MODE = "action_mode";
  @SerializedName(SERIALIZED_NAME_ACTION_MODE)
  private String actionMode;


  public CancelBatchOrder currencyPair(String currencyPair) {
    
    this.currencyPair = currencyPair;
    return this;
  }

   /**
   * Order currency pair
   * @return currencyPair
  **/
  @ApiModelProperty(required = true, value = "Order currency pair")

  public String getCurrencyPair() {
    return currencyPair;
  }


  public void setCurrencyPair(String currencyPair) {
    this.currencyPair = currencyPair;
  }


  public CancelBatchOrder id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Order ID or user custom ID. Custom ID are accepted only within 30 minutes after order creation
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Order ID or user custom ID. Custom ID are accepted only within 30 minutes after order creation")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public CancelBatchOrder actionMode(String actionMode) {
    
    this.actionMode = actionMode;
    return this;
  }

   /**
   * Processing Mode: When placing an order, different fields are returned based on action_mode. This field is only valid during the request and is not included in the response result ACK: Asynchronous mode, only returns key order fields RESULT: No clearing information FULL: Full mode (default)
   * @return actionMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Processing Mode: When placing an order, different fields are returned based on action_mode. This field is only valid during the request and is not included in the response result ACK: Asynchronous mode, only returns key order fields RESULT: No clearing information FULL: Full mode (default)")

  public String getActionMode() {
    return actionMode;
  }


  public void setActionMode(String actionMode) {
    this.actionMode = actionMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CancelBatchOrder cancelBatchOrder = (CancelBatchOrder) o;
    return Objects.equals(this.currencyPair, cancelBatchOrder.currencyPair) &&
        Objects.equals(this.id, cancelBatchOrder.id) &&
        Objects.equals(this.actionMode, cancelBatchOrder.actionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyPair, id, actionMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CancelBatchOrder {\n");
    sb.append("    currencyPair: ").append(toIndentedString(currencyPair)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    actionMode: ").append(toIndentedString(actionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

