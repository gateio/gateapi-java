/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * CrossMarginBalance1
 */
public class CrossMarginBalance1 {
    public static final String SERIALIZED_NAME_AVAILABLE = "available";
    @SerializedName(SERIALIZED_NAME_AVAILABLE)
    private String available;

    public static final String SERIALIZED_NAME_FREEZE = "freeze";
    @SerializedName(SERIALIZED_NAME_FREEZE)
    private String freeze;

    public static final String SERIALIZED_NAME_BORROWED = "borrowed";
    @SerializedName(SERIALIZED_NAME_BORROWED)
    private String borrowed;

    public static final String SERIALIZED_NAME_INTEREST = "interest";
    @SerializedName(SERIALIZED_NAME_INTEREST)
    private String interest;


    public CrossMarginBalance1 available(String available) {
        
        this.available = available;
        return this;
    }

     /**
     * Available amount
     * @return available
    **/
    @javax.annotation.Nullable
    public String getAvailable() {
        return available;
    }


    public void setAvailable(String available) {
        this.available = available;
    }

    public CrossMarginBalance1 freeze(String freeze) {
        
        this.freeze = freeze;
        return this;
    }

     /**
     * Locked amount
     * @return freeze
    **/
    @javax.annotation.Nullable
    public String getFreeze() {
        return freeze;
    }


    public void setFreeze(String freeze) {
        this.freeze = freeze;
    }

    public CrossMarginBalance1 borrowed(String borrowed) {
        
        this.borrowed = borrowed;
        return this;
    }

     /**
     * Borrowed amount
     * @return borrowed
    **/
    @javax.annotation.Nullable
    public String getBorrowed() {
        return borrowed;
    }


    public void setBorrowed(String borrowed) {
        this.borrowed = borrowed;
    }

    public CrossMarginBalance1 interest(String interest) {
        
        this.interest = interest;
        return this;
    }

     /**
     * Unpaid interests
     * @return interest
    **/
    @javax.annotation.Nullable
    public String getInterest() {
        return interest;
    }


    public void setInterest(String interest) {
        this.interest = interest;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CrossMarginBalance1 crossMarginBalance1 = (CrossMarginBalance1) o;
        return Objects.equals(this.available, crossMarginBalance1.available) &&
                Objects.equals(this.freeze, crossMarginBalance1.freeze) &&
                Objects.equals(this.borrowed, crossMarginBalance1.borrowed) &&
                Objects.equals(this.interest, crossMarginBalance1.interest);
    }

    @Override
    public int hashCode() {
        return Objects.hash(available, freeze, borrowed, interest);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CrossMarginBalance1 {\n");
        sb.append("      available: ").append(toIndentedString(available)).append("\n");
        sb.append("      freeze: ").append(toIndentedString(freeze)).append("\n");
        sb.append("      borrowed: ").append(toIndentedString(borrowed)).append("\n");
        sb.append("      interest: ").append(toIndentedString(interest)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

