/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * The version of the OpenAPI document: 4.86.0
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * SubAccountTransfer
 */

public class SubAccountTransfer {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT = "sub_account";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT)
  private String subAccount;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_CLIENT_ORDER_ID = "client_order_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ORDER_ID)
  private String clientOrderId;

  public static final String SERIALIZED_NAME_TIMEST = "timest";
  @SerializedName(SERIALIZED_NAME_TIMEST)
  private String timest;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_TYPE = "sub_account_type";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_TYPE)
  private String subAccountType = "spot";


  public SubAccountTransfer currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Transfer currency name
   * @return currency
  **/
  @ApiModelProperty(required = true, value = "Transfer currency name")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public SubAccountTransfer subAccount(String subAccount) {
    
    this.subAccount = subAccount;
    return this;
  }

   /**
   * Sub account user ID
   * @return subAccount
  **/
  @ApiModelProperty(required = true, value = "Sub account user ID")

  public String getSubAccount() {
    return subAccount;
  }


  public void setSubAccount(String subAccount) {
    this.subAccount = subAccount;
  }


  public SubAccountTransfer direction(String direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Transfer direction. to - transfer into sub account; from - transfer out from sub account
   * @return direction
  **/
  @ApiModelProperty(required = true, value = "Transfer direction. to - transfer into sub account; from - transfer out from sub account")

  public String getDirection() {
    return direction;
  }


  public void setDirection(String direction) {
    this.direction = direction;
  }


  public SubAccountTransfer amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Transfer amount
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "Transfer amount")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


   /**
   * Main account user ID
   * @return uid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Main account user ID")

  public String getUid() {
    return uid;
  }




  public SubAccountTransfer clientOrderId(String clientOrderId) {
    
    this.clientOrderId = clientOrderId;
    return this;
  }

   /**
   * The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters.
   * @return clientOrderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens '-', and underscores '_', with a length ranging from 1 to 64 characters.")

  public String getClientOrderId() {
    return clientOrderId;
  }


  public void setClientOrderId(String clientOrderId) {
    this.clientOrderId = clientOrderId;
  }


   /**
   * Transfer timestamp
   * @return timest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transfer timestamp")

  public String getTimest() {
    return timest;
  }




   /**
   * Where the operation is initiated from
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Where the operation is initiated from")

  public String getSource() {
    return source;
  }




  public SubAccountTransfer subAccountType(String subAccountType) {
    
    this.subAccountType = subAccountType;
    return this;
  }

   /**
   * Target sub user&#39;s account. &#x60;spot&#x60; - spot account, &#x60;futures&#x60; - perpetual contract account, &#x60;delivery&#x60; - delivery account
   * @return subAccountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Target sub user's account. `spot` - spot account, `futures` - perpetual contract account, `delivery` - delivery account")

  public String getSubAccountType() {
    return subAccountType;
  }


  public void setSubAccountType(String subAccountType) {
    this.subAccountType = subAccountType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubAccountTransfer subAccountTransfer = (SubAccountTransfer) o;
    return Objects.equals(this.currency, subAccountTransfer.currency) &&
        Objects.equals(this.subAccount, subAccountTransfer.subAccount) &&
        Objects.equals(this.direction, subAccountTransfer.direction) &&
        Objects.equals(this.amount, subAccountTransfer.amount) &&
        Objects.equals(this.uid, subAccountTransfer.uid) &&
        Objects.equals(this.clientOrderId, subAccountTransfer.clientOrderId) &&
        Objects.equals(this.timest, subAccountTransfer.timest) &&
        Objects.equals(this.source, subAccountTransfer.source) &&
        Objects.equals(this.subAccountType, subAccountTransfer.subAccountType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, subAccount, direction, amount, uid, clientOrderId, timest, source, subAccountType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubAccountTransfer {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    subAccount: ").append(toIndentedString(subAccount)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    clientOrderId: ").append(toIndentedString(clientOrderId)).append("\n");
    sb.append("    timest: ").append(toIndentedString(timest)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    subAccountType: ").append(toIndentedString(subAccountType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

