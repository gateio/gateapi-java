/*
 * Gate API
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * SubAccountTransfer
 */
public class SubAccountTransfer {
    public static final String SERIALIZED_NAME_SUB_ACCOUNT = "sub_account";
    @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT)
    private String subAccount;

    public static final String SERIALIZED_NAME_SUB_ACCOUNT_TYPE = "sub_account_type";
    @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_TYPE)
    private String subAccountType = "spot";

    public static final String SERIALIZED_NAME_CURRENCY = "currency";
    @SerializedName(SERIALIZED_NAME_CURRENCY)
    private String currency;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";
    @SerializedName(SERIALIZED_NAME_AMOUNT)
    private String amount;

    public static final String SERIALIZED_NAME_DIRECTION = "direction";
    @SerializedName(SERIALIZED_NAME_DIRECTION)
    private String direction;

    public static final String SERIALIZED_NAME_CLIENT_ORDER_ID = "client_order_id";
    @SerializedName(SERIALIZED_NAME_CLIENT_ORDER_ID)
    private String clientOrderId;


    public SubAccountTransfer subAccount(String subAccount) {
        
        this.subAccount = subAccount;
        return this;
    }

     /**
     * Sub account user ID.
     * @return subAccount
    **/
    public String getSubAccount() {
        return subAccount;
    }


    public void setSubAccount(String subAccount) {
        this.subAccount = subAccount;
    }

    public SubAccountTransfer subAccountType(String subAccountType) {
        
        this.subAccountType = subAccountType;
        return this;
    }

     /**
     * Target sub user&#39;s account. &#x60;spot&#x60; - spot account, &#x60;futures&#x60; - perpetual contract account, &#x60;delivery&#x60; - delivery account
     * @return subAccountType
    **/
    @javax.annotation.Nullable
    public String getSubAccountType() {
        return subAccountType;
    }


    public void setSubAccountType(String subAccountType) {
        this.subAccountType = subAccountType;
    }

    public SubAccountTransfer currency(String currency) {
        
        this.currency = currency;
        return this;
    }

     /**
     * Transfer currency name.
     * @return currency
    **/
    public String getCurrency() {
        return currency;
    }


    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public SubAccountTransfer amount(String amount) {
        
        this.amount = amount;
        return this;
    }

     /**
     * Transfer amount.
     * @return amount
    **/
    public String getAmount() {
        return amount;
    }


    public void setAmount(String amount) {
        this.amount = amount;
    }

    public SubAccountTransfer direction(String direction) {
        
        this.direction = direction;
        return this;
    }

     /**
     * Transfer direction. to - transfer into sub account; from - transfer out from sub account
     * @return direction
    **/
    public String getDirection() {
        return direction;
    }


    public void setDirection(String direction) {
        this.direction = direction;
    }

    public SubAccountTransfer clientOrderId(String clientOrderId) {
        
        this.clientOrderId = clientOrderId;
        return this;
    }

     /**
     * The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters.
     * @return clientOrderId
    **/
    @javax.annotation.Nullable
    public String getClientOrderId() {
        return clientOrderId;
    }


    public void setClientOrderId(String clientOrderId) {
        this.clientOrderId = clientOrderId;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubAccountTransfer subAccountTransfer = (SubAccountTransfer) o;
        return Objects.equals(this.subAccount, subAccountTransfer.subAccount) &&
                Objects.equals(this.subAccountType, subAccountTransfer.subAccountType) &&
                Objects.equals(this.currency, subAccountTransfer.currency) &&
                Objects.equals(this.amount, subAccountTransfer.amount) &&
                Objects.equals(this.direction, subAccountTransfer.direction) &&
                Objects.equals(this.clientOrderId, subAccountTransfer.clientOrderId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(subAccount, subAccountType, currency, amount, direction, clientOrderId);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubAccountTransfer {\n");
        sb.append("      subAccount: ").append(toIndentedString(subAccount)).append("\n");
        sb.append("      subAccountType: ").append(toIndentedString(subAccountType)).append("\n");
        sb.append("      currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("      amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("      direction: ").append(toIndentedString(direction)).append("\n");
        sb.append("      clientOrderId: ").append(toIndentedString(clientOrderId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

