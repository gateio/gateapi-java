/*
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * PositionClose
 */
public class PositionClose {
    public static final String SERIALIZED_NAME_TIME = "time";
    @SerializedName(SERIALIZED_NAME_TIME)
    private Double time;

    public static final String SERIALIZED_NAME_CONTRACT = "contract";
    @SerializedName(SERIALIZED_NAME_CONTRACT)
    private String contract;

    /**
     * Position side, long or short
     */
    @JsonAdapter(SideEnum.Adapter.class)
    public enum SideEnum {
        LONG("long"),
        
        SHORT("short");

        private String value;

        SideEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static SideEnum fromValue(String value) {
            for (SideEnum b : SideEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<SideEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final SideEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public SideEnum read(final JsonReader jsonReader) throws IOException {
                String value =  jsonReader.nextString();
                return SideEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_SIDE = "side";
    @SerializedName(SERIALIZED_NAME_SIDE)
    private SideEnum side;

    public static final String SERIALIZED_NAME_PNL = "pnl";
    @SerializedName(SERIALIZED_NAME_PNL)
    private String pnl;

    public static final String SERIALIZED_NAME_PNL_PNL = "pnl_pnl";
    @SerializedName(SERIALIZED_NAME_PNL_PNL)
    private String pnlPnl;

    public static final String SERIALIZED_NAME_PNL_FUND = "pnl_fund";
    @SerializedName(SERIALIZED_NAME_PNL_FUND)
    private String pnlFund;

    public static final String SERIALIZED_NAME_PNL_FEE = "pnl_fee";
    @SerializedName(SERIALIZED_NAME_PNL_FEE)
    private String pnlFee;

    public static final String SERIALIZED_NAME_TEXT = "text";
    @SerializedName(SERIALIZED_NAME_TEXT)
    private String text;

    public static final String SERIALIZED_NAME_MAX_SIZE = "max_size";
    @SerializedName(SERIALIZED_NAME_MAX_SIZE)
    private String maxSize;

    public static final String SERIALIZED_NAME_ACCUM_SIZE = "accum_size";
    @SerializedName(SERIALIZED_NAME_ACCUM_SIZE)
    private String accumSize;

    public static final String SERIALIZED_NAME_FIRST_OPEN_TIME = "first_open_time";
    @SerializedName(SERIALIZED_NAME_FIRST_OPEN_TIME)
    private Long firstOpenTime;

    public static final String SERIALIZED_NAME_LONG_PRICE = "long_price";
    @SerializedName(SERIALIZED_NAME_LONG_PRICE)
    private String longPrice;

    public static final String SERIALIZED_NAME_SHORT_PRICE = "short_price";
    @SerializedName(SERIALIZED_NAME_SHORT_PRICE)
    private String shortPrice;


     /**
     * Position close time
     * @return time
    **/
    @javax.annotation.Nullable
    public Double getTime() {
        return time;
    }


     /**
     * Futures contract
     * @return contract
    **/
    @javax.annotation.Nullable
    public String getContract() {
        return contract;
    }


     /**
     * Position side, long or short
     * @return side
    **/
    @javax.annotation.Nullable
    public SideEnum getSide() {
        return side;
    }


     /**
     * PNL
     * @return pnl
    **/
    @javax.annotation.Nullable
    public String getPnl() {
        return pnl;
    }


     /**
     * PNL - Position P/L
     * @return pnlPnl
    **/
    @javax.annotation.Nullable
    public String getPnlPnl() {
        return pnlPnl;
    }


     /**
     * PNL - Funding Fees
     * @return pnlFund
    **/
    @javax.annotation.Nullable
    public String getPnlFund() {
        return pnlFund;
    }


     /**
     * PNL - Transaction Fees
     * @return pnlFee
    **/
    @javax.annotation.Nullable
    public String getPnlFee() {
        return pnlFee;
    }


     /**
     * Text of close order
     * @return text
    **/
    @javax.annotation.Nullable
    public String getText() {
        return text;
    }


     /**
     * Max Trade Size
     * @return maxSize
    **/
    @javax.annotation.Nullable
    public String getMaxSize() {
        return maxSize;
    }


     /**
     * Cumulative closed position volume
     * @return accumSize
    **/
    @javax.annotation.Nullable
    public String getAccumSize() {
        return accumSize;
    }


     /**
     * First Open Time
     * @return firstOpenTime
    **/
    @javax.annotation.Nullable
    public Long getFirstOpenTime() {
        return firstOpenTime;
    }


     /**
     * When &#39;side&#39; is &#39;long,&#39; it indicates the opening average price; when &#39;side&#39; is &#39;short,&#39; it indicates the closing average price.
     * @return longPrice
    **/
    @javax.annotation.Nullable
    public String getLongPrice() {
        return longPrice;
    }


     /**
     * When &#39;side&#39; is &#39;long,&#39; it indicates the opening average price; when &#39;side&#39; is &#39;short,&#39; it indicates the closing average price
     * @return shortPrice
    **/
    @javax.annotation.Nullable
    public String getShortPrice() {
        return shortPrice;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PositionClose positionClose = (PositionClose) o;
        return Objects.equals(this.time, positionClose.time) &&
                Objects.equals(this.contract, positionClose.contract) &&
                Objects.equals(this.side, positionClose.side) &&
                Objects.equals(this.pnl, positionClose.pnl) &&
                Objects.equals(this.pnlPnl, positionClose.pnlPnl) &&
                Objects.equals(this.pnlFund, positionClose.pnlFund) &&
                Objects.equals(this.pnlFee, positionClose.pnlFee) &&
                Objects.equals(this.text, positionClose.text) &&
                Objects.equals(this.maxSize, positionClose.maxSize) &&
                Objects.equals(this.accumSize, positionClose.accumSize) &&
                Objects.equals(this.firstOpenTime, positionClose.firstOpenTime) &&
                Objects.equals(this.longPrice, positionClose.longPrice) &&
                Objects.equals(this.shortPrice, positionClose.shortPrice);
    }

    @Override
    public int hashCode() {
        return Objects.hash(time, contract, side, pnl, pnlPnl, pnlFund, pnlFee, text, maxSize, accumSize, firstOpenTime, longPrice, shortPrice);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PositionClose {\n");
        sb.append("      time: ").append(toIndentedString(time)).append("\n");
        sb.append("      contract: ").append(toIndentedString(contract)).append("\n");
        sb.append("      side: ").append(toIndentedString(side)).append("\n");
        sb.append("      pnl: ").append(toIndentedString(pnl)).append("\n");
        sb.append("      pnlPnl: ").append(toIndentedString(pnlPnl)).append("\n");
        sb.append("      pnlFund: ").append(toIndentedString(pnlFund)).append("\n");
        sb.append("      pnlFee: ").append(toIndentedString(pnlFee)).append("\n");
        sb.append("      text: ").append(toIndentedString(text)).append("\n");
        sb.append("      maxSize: ").append(toIndentedString(maxSize)).append("\n");
        sb.append("      accumSize: ").append(toIndentedString(accumSize)).append("\n");
        sb.append("      firstOpenTime: ").append(toIndentedString(firstOpenTime)).append("\n");
        sb.append("      longPrice: ").append(toIndentedString(longPrice)).append("\n");
        sb.append("      shortPrice: ").append(toIndentedString(shortPrice)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

