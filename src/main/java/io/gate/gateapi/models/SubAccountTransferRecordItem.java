/*
 * Gate API
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * SubAccountTransferRecordItem
 */
public class SubAccountTransferRecordItem {
    public static final String SERIALIZED_NAME_TIMEST = "timest";
    @SerializedName(SERIALIZED_NAME_TIMEST)
    private String timest;

    public static final String SERIALIZED_NAME_UID = "uid";
    @SerializedName(SERIALIZED_NAME_UID)
    private String uid;

    public static final String SERIALIZED_NAME_SUB_ACCOUNT = "sub_account";
    @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT)
    private String subAccount;

    public static final String SERIALIZED_NAME_SUB_ACCOUNT_TYPE = "sub_account_type";
    @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_TYPE)
    private String subAccountType = "spot";

    public static final String SERIALIZED_NAME_CURRENCY = "currency";
    @SerializedName(SERIALIZED_NAME_CURRENCY)
    private String currency;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";
    @SerializedName(SERIALIZED_NAME_AMOUNT)
    private String amount;

    public static final String SERIALIZED_NAME_DIRECTION = "direction";
    @SerializedName(SERIALIZED_NAME_DIRECTION)
    private String direction;

    public static final String SERIALIZED_NAME_SOURCE = "source";
    @SerializedName(SERIALIZED_NAME_SOURCE)
    private String source;

    public static final String SERIALIZED_NAME_CLIENT_ORDER_ID = "client_order_id";
    @SerializedName(SERIALIZED_NAME_CLIENT_ORDER_ID)
    private String clientOrderId;

    public static final String SERIALIZED_NAME_STATUS = "status";
    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;


     /**
     * Transfer timestamp
     * @return timest
    **/
    @javax.annotation.Nullable
    public String getTimest() {
        return timest;
    }


     /**
     * Main account user ID
     * @return uid
    **/
    @javax.annotation.Nullable
    public String getUid() {
        return uid;
    }


    public SubAccountTransferRecordItem subAccount(String subAccount) {
        
        this.subAccount = subAccount;
        return this;
    }

     /**
     * Sub account user ID
     * @return subAccount
    **/
    public String getSubAccount() {
        return subAccount;
    }


    public void setSubAccount(String subAccount) {
        this.subAccount = subAccount;
    }

    public SubAccountTransferRecordItem subAccountType(String subAccountType) {
        
        this.subAccountType = subAccountType;
        return this;
    }

     /**
     * Target sub-account trading account: spot - spot account, futures - perpetual contract account, delivery - delivery contract account, options - options account
     * @return subAccountType
    **/
    @javax.annotation.Nullable
    public String getSubAccountType() {
        return subAccountType;
    }


    public void setSubAccountType(String subAccountType) {
        this.subAccountType = subAccountType;
    }

    public SubAccountTransferRecordItem currency(String currency) {
        
        this.currency = currency;
        return this;
    }

     /**
     * Transfer currency name
     * @return currency
    **/
    public String getCurrency() {
        return currency;
    }


    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public SubAccountTransferRecordItem amount(String amount) {
        
        this.amount = amount;
        return this;
    }

     /**
     * Transfer amount
     * @return amount
    **/
    public String getAmount() {
        return amount;
    }


    public void setAmount(String amount) {
        this.amount = amount;
    }

    public SubAccountTransferRecordItem direction(String direction) {
        
        this.direction = direction;
        return this;
    }

     /**
     * Transfer direction: to - transfer into sub-account, from - transfer out from sub-account
     * @return direction
    **/
    public String getDirection() {
        return direction;
    }


    public void setDirection(String direction) {
        this.direction = direction;
    }

     /**
     * Source of the transfer operation
     * @return source
    **/
    @javax.annotation.Nullable
    public String getSource() {
        return source;
    }


    public SubAccountTransferRecordItem clientOrderId(String clientOrderId) {
        
        this.clientOrderId = clientOrderId;
        return this;
    }

     /**
     * Customer-defined ID to prevent duplicate transfers. Can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;. Can be pure letters or pure numbers with length between 1-64 characters
     * @return clientOrderId
    **/
    @javax.annotation.Nullable
    public String getClientOrderId() {
        return clientOrderId;
    }


    public void setClientOrderId(String clientOrderId) {
        this.clientOrderId = clientOrderId;
    }

    public SubAccountTransferRecordItem status(String status) {
        
        this.status = status;
        return this;
    }

     /**
     * Sub-account transfer record status, currently only &#39;success&#39;
     * @return status
    **/
    @javax.annotation.Nullable
    public String getStatus() {
        return status;
    }


    public void setStatus(String status) {
        this.status = status;
    }
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubAccountTransferRecordItem subAccountTransferRecordItem = (SubAccountTransferRecordItem) o;
        return Objects.equals(this.timest, subAccountTransferRecordItem.timest) &&
                Objects.equals(this.uid, subAccountTransferRecordItem.uid) &&
                Objects.equals(this.subAccount, subAccountTransferRecordItem.subAccount) &&
                Objects.equals(this.subAccountType, subAccountTransferRecordItem.subAccountType) &&
                Objects.equals(this.currency, subAccountTransferRecordItem.currency) &&
                Objects.equals(this.amount, subAccountTransferRecordItem.amount) &&
                Objects.equals(this.direction, subAccountTransferRecordItem.direction) &&
                Objects.equals(this.source, subAccountTransferRecordItem.source) &&
                Objects.equals(this.clientOrderId, subAccountTransferRecordItem.clientOrderId) &&
                Objects.equals(this.status, subAccountTransferRecordItem.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(timest, uid, subAccount, subAccountType, currency, amount, direction, source, clientOrderId, status);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubAccountTransferRecordItem {\n");
        sb.append("      timest: ").append(toIndentedString(timest)).append("\n");
        sb.append("      uid: ").append(toIndentedString(uid)).append("\n");
        sb.append("      subAccount: ").append(toIndentedString(subAccount)).append("\n");
        sb.append("      subAccountType: ").append(toIndentedString(subAccountType)).append("\n");
        sb.append("      currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("      amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("      direction: ").append(toIndentedString(direction)).append("\n");
        sb.append("      source: ").append(toIndentedString(source)).append("\n");
        sb.append("      clientOrderId: ").append(toIndentedString(clientOrderId)).append("\n");
        sb.append("      status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

