/*
 * Gate API
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * FuturesLiqOrder
 */
public class FuturesLiqOrder {
    public static final String SERIALIZED_NAME_TIME = "time";
    @SerializedName(SERIALIZED_NAME_TIME)
    private Long time;

    public static final String SERIALIZED_NAME_CONTRACT = "contract";
    @SerializedName(SERIALIZED_NAME_CONTRACT)
    private String contract;

    public static final String SERIALIZED_NAME_SIZE = "size";
    @SerializedName(SERIALIZED_NAME_SIZE)
    private Long size;

    public static final String SERIALIZED_NAME_ORDER_SIZE = "order_size";
    @SerializedName(SERIALIZED_NAME_ORDER_SIZE)
    private Long orderSize;

    public static final String SERIALIZED_NAME_ORDER_PRICE = "order_price";
    @SerializedName(SERIALIZED_NAME_ORDER_PRICE)
    private String orderPrice;

    public static final String SERIALIZED_NAME_FILL_PRICE = "fill_price";
    @SerializedName(SERIALIZED_NAME_FILL_PRICE)
    private String fillPrice;

    public static final String SERIALIZED_NAME_LEFT = "left";
    @SerializedName(SERIALIZED_NAME_LEFT)
    private Long left;


     /**
     * Liquidation time
     * @return time
    **/
    @javax.annotation.Nullable
    public Long getTime() {
        return time;
    }


     /**
     * Futures contract
     * @return contract
    **/
    @javax.annotation.Nullable
    public String getContract() {
        return contract;
    }


     /**
     * User position size
     * @return size
    **/
    @javax.annotation.Nullable
    public Long getSize() {
        return size;
    }


     /**
     * Number of forced liquidation orders
     * @return orderSize
    **/
    @javax.annotation.Nullable
    public Long getOrderSize() {
        return orderSize;
    }


     /**
     * Liquidation order price
     * @return orderPrice
    **/
    @javax.annotation.Nullable
    public String getOrderPrice() {
        return orderPrice;
    }


     /**
     * Liquidation order average taker price
     * @return fillPrice
    **/
    @javax.annotation.Nullable
    public String getFillPrice() {
        return fillPrice;
    }


     /**
     * System liquidation order maker size
     * @return left
    **/
    @javax.annotation.Nullable
    public Long getLeft() {
        return left;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FuturesLiqOrder futuresLiqOrder = (FuturesLiqOrder) o;
        return Objects.equals(this.time, futuresLiqOrder.time) &&
                Objects.equals(this.contract, futuresLiqOrder.contract) &&
                Objects.equals(this.size, futuresLiqOrder.size) &&
                Objects.equals(this.orderSize, futuresLiqOrder.orderSize) &&
                Objects.equals(this.orderPrice, futuresLiqOrder.orderPrice) &&
                Objects.equals(this.fillPrice, futuresLiqOrder.fillPrice) &&
                Objects.equals(this.left, futuresLiqOrder.left);
    }

    @Override
    public int hashCode() {
        return Objects.hash(time, contract, size, orderSize, orderPrice, fillPrice, left);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FuturesLiqOrder {\n");
        sb.append("      time: ").append(toIndentedString(time)).append("\n");
        sb.append("      contract: ").append(toIndentedString(contract)).append("\n");
        sb.append("      size: ").append(toIndentedString(size)).append("\n");
        sb.append("      orderSize: ").append(toIndentedString(orderSize)).append("\n");
        sb.append("      orderPrice: ").append(toIndentedString(orderPrice)).append("\n");
        sb.append("      fillPrice: ").append(toIndentedString(fillPrice)).append("\n");
        sb.append("      left: ").append(toIndentedString(left)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n        ");
    }

}

